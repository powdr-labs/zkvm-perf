
use std::machines::binary::Binary;
use std::machines::range::Bit2;
use std::machines::range::Bit6;
use std::machines::range::Bit7;
use std::machines::range::Byte;
use std::machines::range::Byte2;
use std::machines::binary::ByteBinary;
use std::machines::split::ByteCompare;
use std::machines::shift::ByteShift;
use std::machines::shift::Shift;
use std::machines::split::split_gl::SplitGL;
machine Main {
Binary binary(byte_binary);
Bit2 bit2;
Bit6 bit6;
Bit7 bit7;
Byte byte;
Byte2 byte2;
ByteBinary byte_binary;
ByteCompare byte_compare;
ByteShift byte_shift;
Shift shift(byte_shift);
SplitGL split_gl(byte_compare);


    reg pc[@pc];
    reg X[<=];
    reg Y[<=];
    reg Z[<=];
    reg W[<=];

    std::machines::memory::Memory memory(byte2);


    // Increased by 4 in each step, because we do up to 4 register memory accesses per step
    col fixed STEP(i) { 4 * i };

    // ============== memory instructions ==============

    /// Loads one word from an address V = val(X) + Y, where V can be between 0 and 2**33 (sic!),
    /// wraps the address to 32 bits and rounds it down to the next multiple of 4.
    /// Writes the loaded word and the remainder of the division by 4 to registers Z and W,
    /// respectively.
    instr mload X, Y, Z, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp3_col = memory.mload(X_b4 * 0x1000000 + X_b3 * 0x10000 + X_b2 * 0x100 + X_b1 * 4, STEP + 1)
        link ~> regs.mstore(Z, STEP + 2, tmp3_col)
        link ~> regs.mstore(W, STEP + 3, tmp4_col)
        link => bit2.check(tmp4_col)
        link => bit6.check(X_b1)
    {
        tmp1_col + Y = wrap_bit * 2**32 + X_b4 * 0x1000000 + X_b3 * 0x10000 + X_b2 * 0x100 + X_b1 * 4 + tmp4_col
    }

    // Stores val(W) at address (V = val(X) - val(Y) + Z) % 2**32.
    // V can be between 0 and 2**33.
    // V should be a multiple of 4, but this instruction does not enforce it.
    instr mstore X, Y, Z, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
        link ~> tmp3_col = regs.mload(W, STEP + 2)
        link ~> memory.mstore(X_b1 + X_b2 * 0x100 + X_b3 * 0x10000 + X_b4 * 0x1000000, STEP + 3, tmp3_col)
    {
        tmp1_col - tmp2_col + Z = (X_b1 + X_b2 * 0x100 + X_b3 * 0x10000 + X_b4 * 0x1000000) + wrap_bit * 2**32
    }

    // =============== Register memory =======================
std::machines::memory::Memory regs(byte2);
    // Get the value in register Y.
    instr get_reg Y -> X link ~> X = regs.mload(Y, STEP);

    // Set the value in register X to the value in register Y.
    instr set_reg X, Y -> link ~> regs.mstore(X, STEP, Y);

    // We still need these registers prover inputs.
    reg query_arg_1;
    reg query_arg_2;

    // Witness columns used in instuctions for intermediate values inside instructions.
    col witness tmp1_col;
    col witness tmp2_col;
    col witness tmp3_col;
    col witness tmp4_col;

    // We need to add these inline instead of using std::utils::is_zero
    // because when XX is not constrained, witgen will try to set XX,
    // XX_inv and XXIsZero to zero, which fails this constraint.
    // Therefore, we have to activate constrained whenever XXIsZero is used.
    // XXIsZero = 1 - XX * XX_inv
    col witness XX, XX_inv, XXIsZero;
    std::utils::force_bool(XXIsZero);
    XXIsZero * XX = 0;

    // ============== control-flow instructions ==============

    // Load the value of label `l` into register X.
    instr load_label X, l: label
        link ~> regs.mstore(X, STEP, tmp1_col)
    {
        tmp1_col = l
    }

    // Jump to `l` and store the return program counter in register W.
    instr jump l: label, W
        link ~> regs.mstore(W, STEP, pc + 1)
    {
        pc' = l
    }
    
    // Jump to the address in register X and store the return program counter in register W.
    instr jump_dyn X, W
        link ~> pc' = regs.mload(X, STEP)
        link ~> regs.mstore(W, STEP, pc + 1);

    // Jump to `l` if val(X) - val(Y) is nonzero, where X and Y are register ids.
    instr branch_if_diff_nonzero X, Y, l: label
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
    {
        XXIsZero = 1 - XX * XX_inv,
        XX = tmp1_col - tmp2_col,
        pc' = (1 - XXIsZero) * l + XXIsZero * (pc + 1)
    }

    // Jump to `l` if (val(X) - val(Y)) == Z, where X and Y are register ids and Z is a number.
    instr branch_if_diff_equal X, Y, Z, l: label
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
    {
        XXIsZero = 1 - XX * XX_inv,
        XX = tmp1_col - tmp2_col - Z,
        pc' = XXIsZero * l + (1 - XXIsZero) * (pc + 1)
    }

    // Skips W instructions if val(X) - val(Y) + Z is zero, where X and Y are register ids and Z is a
    // constant offset.
    instr skip_if_equal X, Y, Z, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
    {
        XXIsZero = 1 - XX * XX_inv,
        XX = tmp1_col - tmp2_col + Z,
        pc' = pc + 1 + (XXIsZero * W)
    }

    // Branches to `l` if V = val(X) - val(Y) - Z is positive, i.e. val(X) - val(Y) > Z,
    // where X and Y are register ids and Z is a constant.
    // V is required to be the difference of two 32-bit unsigned values.
    // i.e. -2**32 < V < 2**32.
    instr branch_if_diff_greater_than X, Y, Z, l: label
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
    {
        (tmp1_col - tmp2_col - Z) + 2**32 - 1 = X_b1 + X_b2 * 0x100 + X_b3 * 0x10000 + X_b4 * 0x1000000 + wrap_bit * 2**32,
        pc' = wrap_bit * l + (1 - wrap_bit) * (pc + 1)
    }

    // Stores 1 in register W if V = val(X) - val(Y) - Z is positive,
    // i.e. val(X) - val(Y) > Z, where X and Y are register ids and Z is a constant.
    // V is required to be the difference of two 32-bit unsigend values.
    // i.e. -2**32 < V < 2**32
    instr is_diff_greater_than X, Y, Z, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
        link ~> regs.mstore(W, STEP + 2, wrap_bit)
    {
        (tmp1_col - tmp2_col - Z) + 2**32 - 1 = X_b1 + X_b2 * 0x100 + X_b3 * 0x10000 + X_b4 * 0x1000000 + wrap_bit * 2**32
    }

    // Stores val(X) * Z + W in register Y.
    instr affine X, Y, Z, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> regs.mstore(Y, STEP + 1, tmp1_col * Z + W);

    // ================= wrapping instructions =================

    // Computes V = val(X) + val(Y) + Z, wraps it in 32 bits, and stores the result in register W.
    // Requires 0 <= V < 2**33.
    instr add_wrap X, Y, Z, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
        link ~> regs.mstore(W, STEP + 2, tmp3_col)
    {
        tmp1_col + tmp2_col + Z = tmp3_col + wrap_bit * 2**32,
        tmp3_col = X_b1 + X_b2 * 0x100 + X_b3 * 0x10000 + X_b4 * 0x1000000
    }

    // Computes V = val(X) - val(Y) + Z, wraps it in 32 bits, and stores the result in register W.
    // Requires -2**32 <= V < 2**32.
    instr sub_wrap_with_offset X, Y, Z, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
        link ~> regs.mstore(W, STEP + 2, tmp3_col)
    {
        (tmp1_col - tmp2_col + Z) + 2**32 = tmp3_col + wrap_bit * 2**32,
        tmp3_col = X_b1 + X_b2 * 0x100 + X_b3 * 0x10000 + X_b4 * 0x1000000
    }

    // ================= logical instructions =================

    // Stores 1 in register W if the value in register X is zero,
    // otherwise stores 0.
    instr is_equal_zero X, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> regs.mstore(W, STEP + 2, XXIsZero)
    {
        XXIsZero = 1 - XX * XX_inv,
        XX = tmp1_col
    }

    // Stores 1 in register W if val(X) == val(Y), otherwise stores 0.
    instr is_not_equal X, Y, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
        link ~> regs.mstore(W, STEP + 2, tmp3_col)
    {
        XXIsZero = 1 - XX * XX_inv,
        XX = tmp1_col - tmp2_col,
        tmp3_col = 1 - XXIsZero
    }

    // ================= submachine instructions =================
    instr and X, Y, Z, W link ~> tmp1_col = regs.mload(X, STEP) link ~> tmp2_col = regs.mload(Y, STEP + 1) link ~> tmp3_col = binary.and(tmp1_col, tmp2_col + Z) link ~> regs.mstore(W, STEP + 3, tmp3_col){  }
    instr or X, Y, Z, W link ~> tmp1_col = regs.mload(X, STEP) link ~> tmp2_col = regs.mload(Y, STEP + 1) link ~> tmp3_col = binary.or(tmp1_col, tmp2_col + Z) link ~> regs.mstore(W, STEP + 3, tmp3_col){  }
    instr xor X, Y, Z, W link ~> tmp1_col = regs.mload(X, STEP) link ~> tmp2_col = regs.mload(Y, STEP + 1) link ~> tmp3_col = binary.xor(tmp1_col, tmp2_col + Z) link ~> regs.mstore(W, STEP + 3, tmp3_col){  }
    instr shl X, Y, Z, W link ~> tmp1_col = regs.mload(X, STEP) link ~> tmp2_col = regs.mload(Y, STEP + 1) link ~> tmp3_col = shift.shl(tmp1_col, tmp2_col + Z) link ~> regs.mstore(W, STEP + 3, tmp3_col){  }
    instr shr X, Y, Z, W link ~> tmp1_col = regs.mload(X, STEP) link ~> tmp2_col = regs.mload(Y, STEP + 1) link ~> tmp3_col = shift.shr(tmp1_col, tmp2_col + Z) link ~> regs.mstore(W, STEP + 3, tmp3_col){  }
    instr split_gl X, Z, W link ~> tmp1_col = regs.mload(X, STEP) link ~> (tmp3_col, tmp4_col) = split_gl.split(tmp1_col) link ~> regs.mstore(Z, STEP + 2, tmp3_col) link ~> regs.mstore(W, STEP + 3, tmp4_col){  }
    col witness X_b1;
    col witness X_b2;
    col witness X_b3;
    col witness X_b4;
    link => byte.check(X_b1);
    link => byte.check(X_b2);
    link => byte.check(X_b3);
    link => byte.check(X_b4);
    col witness wrap_bit;
    wrap_bit * (1 - wrap_bit) = 0;

    // Sign extends the value in register X and stores it in register Y.
    // Input is a 32 bit unsigned number. We check bit 7 and set all higher bits to that value.
    instr sign_extend_byte X, Y
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> regs.mstore(Y, STEP + 3, tmp3_col)
    {
        // wrap_bit is used as sign_bit here.
        tmp1_col = Y_7bit + wrap_bit * 0x80 + X_b2 * 0x100 + X_b3 * 0x10000 + X_b4 * 0x1000000,
        tmp3_col = Y_7bit + wrap_bit * 0xffffff80
    }
    col witness Y_7bit;
    link => bit7.check(Y_7bit);

    // Sign extends the value in register X and stores it in register Y.
    // Input is a 32 bit unsigned number. We check bit 15 and set all higher bits to that value.
    instr sign_extend_16_bits X, Y
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> regs.mstore(Y, STEP + 3, tmp3_col)
    {
        Y_15bit = X_b1 + Y_7bit * 0x100,

        // wrap_bit is used as sign_bit here.
        tmp1_col = Y_15bit + wrap_bit * 0x8000 + X_b3 * 0x10000 + X_b4 * 0x1000000,
        tmp3_col = Y_15bit + wrap_bit * 0xffff8000
    }
    col witness Y_15bit;

    // Converts the value in register X to a signed number and stores it in register Y.
    // Input is a 32 bit unsigned number (0 <= val(X) < 2**32) interpreted as a two's complement numbers.
    // Returns a signed number (-2**31 <= val(Y) < 2**31).
    instr to_signed X, Y
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> regs.mstore(Y, STEP + 1, tmp3_col)
    {
        // wrap_bit is used as sign_bit here.
        tmp1_col = X_b1 + X_b2 * 0x100 + X_b3 * 0x10000 + Y_7bit * 0x1000000 + wrap_bit * 0x80000000,
        tmp3_col = tmp1_col - wrap_bit * 0x100000000
    }

    // ======================= assertions =========================

    instr fail { 1 = 0 }

    // Wraps V = val(X) * Y and stores it in register Z,
    // where X is a register and Y is a constant factor.
    // Removes up to 16 bits beyond 32
    // TODO is this really safe?
    instr wrap16 X, Y, Z
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> regs.mstore(Z, STEP + 3, tmp3_col)
    {
        (tmp1_col * Y) = Y_b5 * 2**32 + Y_b6 * 2**40 + tmp3_col,
        tmp3_col = X_b1 + X_b2 * 0x100 + X_b3 * 0x10000 + X_b4 * 0x1000000
    }

    col witness Y_b5;
    col witness Y_b6;
    col witness Y_b7;
    col witness Y_b8;
    link => byte.check(Y_b5);
    link => byte.check(Y_b6);
    link => byte.check(Y_b7);
    link => byte.check(Y_b8);

    col witness REM_b1;
    col witness REM_b2;
    col witness REM_b3;
    col witness REM_b4;
    link => byte.check(REM_b1);
    link => byte.check(REM_b2);
    link => byte.check(REM_b3);
    link => byte.check(REM_b4);

    // Computes Q = val(Y) / val(X) and R = val(Y) % val(X) and stores them in registers Z and W.
    instr divremu Y, X, Z, W
        link ~> tmp1_col = regs.mload(Y, STEP)
        link ~> tmp2_col = regs.mload(X, STEP + 1)
        link ~> regs.mstore(Z, STEP + 2, tmp3_col)
        link ~> regs.mstore(W, STEP + 3, tmp4_col)
    {
        XXIsZero = 1 - XX * XX_inv,
        XX = tmp2_col,

        // if X is zero, remainder is set to dividend, as per RISC-V specification:
        tmp2_col * tmp3_col + tmp4_col = tmp1_col,

        // remainder >= 0:
        tmp4_col = REM_b1 + REM_b2 * 0x100 + REM_b3 * 0x10000 + REM_b4 * 0x1000000,

        // remainder < divisor, conditioned to val(X) not being 0:
        (1 - XXIsZero) * (tmp2_col - tmp4_col - 1 - Y_b5 - Y_b6 * 0x100 - Y_b7 * 0x10000 - Y_b8 * 0x1000000) = 0,

        // in case X is zero, we set quotient according to RISC-V specification
        XXIsZero * (tmp3_col - 0xffffffff) = 0,

        // quotient is 32 bits:
        tmp3_col = X_b1 + X_b2 * 0x100 + X_b3 * 0x10000 + X_b4 * 0x1000000
    }

    // Computes V = val(X) * val(Y) and
    // stores the lower 32 bits in register Z and the upper 32 bits in register W.
    instr mul X, Y, Z, W
        link ~> tmp1_col = regs.mload(X, STEP)
        link ~> tmp2_col = regs.mload(Y, STEP + 1)
        link ~> (tmp3_col, tmp4_col) = split_gl.split(tmp1_col * tmp2_col)
        link ~> regs.mstore(Z, STEP + 2, tmp3_col)
        link ~> regs.mstore(W, STEP + 3, tmp4_col);


let initial_memory: (fe, fe)[] = [

];

    function main {
		and 0, 0, 0, 0;
		shl 0, 0, 0, 0;
		split_gl 0, 0, 0;
		jump __data_init, 1;
		set_reg 0, 0;
		jump __runtime_start, 1;
		return;
		__runtime_start:
		  set_reg 3, 268445064;
		  set_reg 2, 268435456;
		  jump main, 32;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_bytes17h2fefed1922886a74E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L10001ddc;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10001df0;
		  mload 9, 16, 13, 32;
		  branch_if_diff_greater_than 11, 13, 0, ___dot_L10001e00;
		  add_wrap 0, 0, 0, 10;
		  mstore 9, 0, 20, 11;
		  mstore 8, 0, 4, 0;
		  mstore 8, 0, 0, 0;
		  jump ___dot_L10001de2, 32;
		___dot_L10001ddc:
		  mload 2, 4, 12, 32;
		  mstore 8, 0, 0, 11;
		  mstore 8, 0, 4, 12;
		___dot_L10001de2:
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L10001df0:
		  set_reg 12, 268440696;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10001e00:
		  set_reg 12, 268440696;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_bytes17h4002f3e307cd3654E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L10001e50;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10001e68;
		  mload 9, 16, 13, 32;
		  branch_if_diff_greater_than 11, 13, 0, ___dot_L10001e78;
		  add_wrap 0, 0, 0, 10;
		  mstore 9, 0, 20, 11;
		  mstore 8, 0, 12, 0;
		  mstore 8, 0, 8, 0;
		  jump ___dot_L10001e56, 32;
		___dot_L10001e50:
		  mload 2, 4, 12, 32;
		  mstore 8, 0, 8, 11;
		  mstore 8, 0, 12, 12;
		___dot_L10001e56:
		  mload 8, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 16, 32;
		  add_wrap 0, 0, 1, 10;
		  mstore 8, 0, 0, 10;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L10001e68:
		  set_reg 12, 268440696;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10001e78:
		  set_reg 12, 268440696;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h38db1b707792fc5bE:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mload 11, 20, 15, 32;
		  mload 11, 16, 12, 32;
		  branch_if_diff_greater_than 15, 12, -1, ___dot_L10001ec2;
		  mload 11, 12, 9, 32;
		  add_wrap 9, 15, 0, 13;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 8;
		  add_wrap 15, 0, 1, 16;
		  add_wrap 0, 0, 24, 14;
		  mstore 11, 0, 20, 16;
		  branch_if_diff_greater_than 8, 14, -1, ___dot_L10001edc;
		___dot_L10001eb4:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 0;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  jump ___dot_L10001ece, 32;
		___dot_L10001ec2:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 15;
		___dot_L10001ec8:
		  add_wrap 0, 0, 3, 11;
		___dot_L10001eca:
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		___dot_L10001ece:
		  add_wrap 0, 0, 1, 11;
		  mstore 10, 0, 0, 11;
		___dot_L10001ed2:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L10001edc:
		  add_wrap 8, 0, 4294967272, 14;
		  add_wrap 0, 0, 231, 13;
		  branch_if_diff_greater_than 14, 13, 0, ___dot_L100022b0;
		  wrap16 14, 4, 14;
		  set_reg 13, 268435712;
		  add_wrap 13, 14, 0, 13;
		  mload 13, 0, 13, 32;
		  jump_dyn 13, 32;
		___dot_L10001ef8:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  jump ___dot_L10001f7c, 32;
		___dot_L10001f06:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L100021b0;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L10001eb4, 32;
		___dot_L10001f10:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  jump ___dot_L10001f7c, 32;
		___dot_L10001f1e:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  jump ___dot_L10001f7c, 32;
		___dot_L10001f2c:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L100022c6;
		  add_wrap 0, 8, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000232a;
		  mload 9, 20, 11, 32;
		  jump ___dot_L10002268, 32;
		___dot_L10001f50:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_equal 10, 11, 0, ___dot_L10001f86;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  mstore 8, 0, 12, 11;
		  mstore 8, 0, 8, 12;
		  jump ___dot_L100022a6, 32;
		___dot_L10001f70:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_f1617h993c60321caa30dbE, 1;
		___dot_L10001f7c:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000229e;
		___dot_L10001f86:
		  mstore 8, 0, 12, 0;
		  mstore 8, 0, 8, 0;
		  mload 8, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 16, 32;
		  jump ___dot_L100022aa, 32;
		___dot_L10001f94:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  jump ___dot_L10002280, 32;
		___dot_L10001fa4:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L100022a0;
		  mstore 2, 0, 0, 11;
		  jump ___dot_L10002068, 32;
		___dot_L10001fc2:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$22parse_indefinite_bytes17h1b7900ea8a35fb95E, 32;
		___dot_L10001fd2:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 13;
		  and 13, 0, 255, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L1000239c;
		___dot_L10001fe6:
		  add_wrap 0, 0, 0, 16;
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 0, 15;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  jump ___dot_L1000239e, 32;
		___dot_L10001ff2:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_equal 10, 11, 0, ___dot_L10002232;
		  jump ___dot_L10002212, 32;
		___dot_L1000200e:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 12, 32;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L100022a2;
		  add_wrap 0, 8, 0, 10;
		  to_signed 12, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10001eb4;
		  xor 11, 0, 4294967295, 11;
		  xor 12, 0, 4294967295, 12;
		  add_wrap 0, 0, 4294967295, 13;
		  add_wrap 0, 0, 4294967295, 14;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN5serde2de7Visitor10visit_i12817h94aba450bd7f8cb0E, 32;
		___dot_L1000204a:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000229e;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 10;
		  mstore 2, 0, 0, 10;
		___dot_L10002068:
		  add_wrap 0, 2, 0, 12;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h16e3d5438fde0c96E, 1;
		  jump ___dot_L10001ed2, 32;
		___dot_L10002078:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$20parse_indefinite_str17he11230c199cd6471E, 32;
		___dot_L10002088:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 16;
		  add_wrap 0, 0, 9, 11;
		  jump ___dot_L10001eca, 32;
		___dot_L10002094:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h3a4f897c70e5ae3eE, 32;
		___dot_L100020a4:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L100021b0;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  add_wrap 12, 0, 4294967295, 13;
		  and 13, 0, 255, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L1000235c;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 0, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  jump ___dot_L10002360, 32;
		___dot_L100020cc:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  jump ___dot_L1000214c, 32;
		___dot_L100020dc:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L100021de;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10002266;
		  add_wrap 0, 8, 0, 11;
		  jump ___dot_L10002236, 32;
		___dot_L10002102:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L100021b0;
		  add_wrap 16, 9, 0, 16;
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L10002236, 32;
		___dot_L10002112:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L100021b0;
		  add_wrap 16, 9, 0, 16;
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		___dot_L10002120:
		  mstore 2, 0, 0, 12;
		  add_wrap 0, 2, 0, 12;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h16e3d5438fde0c96E, 1;
		  jump ___dot_L10001ed2, 32;
		___dot_L1000212e:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  jump ___dot_L10002280, 32;
		___dot_L1000213e:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		___dot_L1000214c:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000229e;
		  add_wrap 0, 9, 0, 12;
		  mload 9, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 13, 0, 4294967295, 10;
		  and 10, 0, 255, 11;
		  mload 9, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 28, 32;
		  add_wrap 0, 8, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L1000233e;
		  mload 12, 20, 11, 32;
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 13, 15;
		  mstore 10, 0, 8, 11;
		  jump ___dot_L100023a2, 32;
		___dot_L10002178:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L100021b0;
		  add_wrap 16, 9, 0, 16;
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L10002202, 32;
		___dot_L10002188:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000229e;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 12;
		  jump ___dot_L100021fe, 32;
		___dot_L100021a6:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L100021b0;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L1000228e, 32;
		___dot_L100021b0:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 16;
		  jump ___dot_L10001ec8, 32;
		___dot_L100021ba:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L100021de;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10002266;
		  add_wrap 0, 8, 0, 11;
		  jump ___dot_L10002202, 32;
		___dot_L100021de:
		  mstore 9, 0, 8, 12;
		  mstore 9, 0, 12, 11;
		  jump ___dot_L100022d2, 32;
		___dot_L100021e4:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10002212;
		___dot_L100021fe:
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L10002202:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_bytes17h4002f3e307cd3654E, 32;
		___dot_L10002212:
		  mload 2, 4, 11, 32;
		  jump ___dot_L100022c8, 32;
		___dot_L10002216:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000229e;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 12;
		___dot_L10002232:
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L10002236:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_str17h174c9455133b13a2E, 32;
		___dot_L10002246:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 12, 32;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L100022ce;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_equal 12, 0, 0, ___dot_L1000234c;
		___dot_L10002266:
		  mload 8, 20, 11, 32;
		___dot_L10002268:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 11;
		  add_wrap 0, 0, 6, 11;
		  jump ___dot_L10001eca, 32;
		___dot_L10002272:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		___dot_L10002280:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000229e;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L1000228e:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h8e121b50f051f860E, 32;
		___dot_L1000229e:
		  mload 2, 0, 11, 32;
		___dot_L100022a0:
		  mload 2, 4, 12, 32;
		___dot_L100022a2:
		  mstore 8, 0, 8, 11;
		  mstore 8, 0, 12, 12;
		___dot_L100022a6:
		  mload 8, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 16, 32;
		___dot_L100022aa:
		  add_wrap 0, 0, 1, 10;
		  mstore 8, 0, 0, 10;
		  jump ___dot_L10001ed2, 32;
		___dot_L100022b0:
		  and 8, 0, 252, 15;
		  add_wrap 0, 0, 28, 12;
		  branch_if_diff_nonzero 15, 12, ___dot_L100022dc;
		___dot_L100022ba:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 16;
		  add_wrap 0, 0, 8, 11;
		  jump ___dot_L10001eca, 32;
		___dot_L100022c6:
		  mload 2, 0, 12, 32;
		___dot_L100022c8:
		  mstore 8, 0, 8, 12;
		  mstore 8, 0, 12, 11;
		  jump ___dot_L100022a6, 32;
		___dot_L100022ce:
		  mstore 9, 0, 8, 11;
		  mstore 9, 0, 12, 12;
		___dot_L100022d2:
		  mload 9, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 16, 32;
		  add_wrap 0, 0, 1, 10;
		  mstore 9, 0, 0, 10;
		  jump ___dot_L10001ed2, 32;
		___dot_L100022dc:
		  add_wrap 8, 0, 4294967264, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10001eb4;
		  add_wrap 0, 0, 60, 12;
		  branch_if_diff_equal 15, 12, 0, ___dot_L100022ba;
		  add_wrap 8, 0, 4294967232, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002202;
		  add_wrap 8, 0, 4294967204, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L100022ba;
		  add_wrap 8, 0, 4294967200, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002236;
		  add_wrap 8, 0, 4294967172, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L100022ba;
		  wrap16 8, 65536, 32;
		  wrap16 32, 256, 12;
		  to_signed 12, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 12, 0, 12;
		  shr 12, 0, 24, 12;
		  xor 32, 12, 0, 12;
		  add_wrap 0, 0, 4294967192, 13;
		  to_signed 12, 32;
		  to_signed 13, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10002372;
		  add_wrap 8, 0, 4294967168, 12;
		  jump ___dot_L10002120, 32;
		___dot_L1000232a:
		  add_wrap 0, 9, 0, 12;
		  mload 9, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 13, 0, 4294967295, 11;
		  and 11, 0, 255, 14;
		  mload 9, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L1000236a;
		___dot_L1000233e:
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 0, 15;
		  mload 12, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 28, 32;
		  mstore 10, 0, 8, 0;
		  jump ___dot_L100023a2, 32;
		___dot_L1000234c:
		  mstore 2, 0, 0, 11;
		  add_wrap 0, 2, 0, 12;
		  add_wrap 0, 8, 0, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h16e3d5438fde0c96E, 1;
		  jump ___dot_L10001ed2, 32;
		___dot_L1000235c:
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 13, 14;
		___dot_L10002360:
		  mstore 10, 0, 8, 15;
		  mstore 10, 0, 12, 13;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  jump ___dot_L10001ece, 32;
		___dot_L1000236a:
		  mload 12, 20, 11, 32;
		  add_wrap 0, 0, 13, 15;
		  mstore 10, 0, 8, 11;
		  jump ___dot_L100023a2, 32;
		___dot_L10002372:
		  add_wrap 8, 0, 4294967140, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L100022ba;
		  add_wrap 8, 0, 4294967136, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 12, 13, -1, ___dot_L100023aa;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 14;
		  and 14, 0, 255, 15;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_nonzero 15, 0, ___dot_L10001fe6;
		  add_wrap 0, 0, 0, 14;
		___dot_L1000239c:
		  add_wrap 0, 0, 13, 15;
		___dot_L1000239e:
		  mstore 10, 0, 8, 16;
		___dot_L100023a2:
		  mstore 10, 0, 12, 14;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  jump ___dot_L10001ece, 32;
		___dot_L100023aa:
		  add_wrap 8, 0, 4294967108, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L100022ba;
		  add_wrap 8, 0, 4294967104, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L1000228e;
		  add_wrap 0, 0, 220, 11;
		  branch_if_diff_equal 15, 11, 0, ___dot_L100022ba;
		  add_wrap 8, 0, 4294967072, 11;
		  add_wrap 0, 0, 20, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L100022ba;
		  add_wrap 8, 0, 4294967044, 11;
		  add_wrap 0, 0, 3, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L100022ba;
		  set_reg 10, 268439424;
		  set_reg 12, 268439592;
		  add_wrap 0, 0, 40, 11;
		  jump _ZN4core9panicking5panic17h6885cb3ca4748be7E, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h4a3da4c92bcae363E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mload 11, 20, 15, 32;
		  mload 11, 16, 9, 32;
		  branch_if_diff_greater_than 15, 9, -1, ___dot_L10002428;
		  mload 11, 12, 12, 32;
		  add_wrap 12, 15, 0, 13;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 8;
		  add_wrap 15, 0, 1, 16;
		  add_wrap 0, 0, 24, 14;
		  mstore 11, 0, 20, 16;
		  branch_if_diff_greater_than 8, 14, -1, ___dot_L1000243e;
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 8;
		  add_wrap 0, 0, 16, 11;
		  jump ___dot_L10002430, 32;
		___dot_L10002428:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 15;
		___dot_L1000242e:
		  add_wrap 0, 0, 3, 11;
		___dot_L10002430:
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		___dot_L10002434:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L1000243e:
		  add_wrap 8, 0, 4294967272, 14;
		  add_wrap 0, 0, 231, 13;
		  branch_if_diff_greater_than 14, 13, 0, ___dot_L10002856;
		  wrap16 14, 4, 14;
		  set_reg 13, 268436640;
		  add_wrap 13, 14, 0, 13;
		  mload 13, 0, 13, 32;
		  jump_dyn 13, 32;
		___dot_L1000245a:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 0;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L10002468:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 13;
		  and 13, 0, 255, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L10002942;
		___dot_L1000247c:
		  add_wrap 0, 0, 0, 16;
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 0, 15;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  jump ___dot_L10002944, 32;
		___dot_L10002488:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  jump ___dot_L100024ca, 32;
		___dot_L10002498:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L10002584;
		  add_wrap 0, 8, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10002876;
		  mload 9, 20, 11, 32;
		  jump ___dot_L10002808, 32;
		___dot_L100024bc:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		___dot_L100024ca:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L100027d8;
		  add_wrap 0, 9, 0, 12;
		  mload 9, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 13, 0, 4294967295, 10;
		  and 10, 0, 255, 11;
		  mload 9, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 28, 32;
		  add_wrap 0, 8, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000286c;
		___dot_L100024ec:
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 0, 15;
		  mload 12, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 28, 32;
		  mstore 10, 0, 0, 0;
		  jump ___dot_L10002948, 32;
		___dot_L100024fa:
		  branch_if_diff_greater_than 16, 9, -1, ___dot_L100027b0;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  add_wrap 12, 0, 4294967295, 13;
		  and 13, 0, 255, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L100028cc;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 0, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  jump ___dot_L100028d0, 32;
		___dot_L10002522:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  jump ___dot_L10002738, 32;
		___dot_L10002530:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  jump ___dot_L1000275e, 32;
		___dot_L10002540:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_equal 10, 11, 0, ___dot_L10002742;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  mstore 8, 0, 4, 11;
		  mstore 8, 0, 0, 12;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L10002564:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$20parse_indefinite_str17h0c37d877974cc9fdE, 32;
		___dot_L10002574:
		  branch_if_diff_greater_than 16, 9, -1, ___dot_L100027b0;
		  add_wrap 12, 16, 0, 12;
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L100026f6, 32;
		___dot_L10002584:
		  mload 2, 0, 12, 32;
		  jump ___dot_L1000284c, 32;
		___dot_L10002588:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 16;
		  add_wrap 0, 0, 9, 11;
		  jump ___dot_L10002430, 32;
		___dot_L10002594:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$22parse_indefinite_bytes17h7f8d3a602003b19aE, 32;
		___dot_L100025a4:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000284a;
		  xor 12, 0, 4294967295, 10;
		  jump ___dot_L10002664, 32;
		___dot_L100025c2:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L100027d8;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 12;
		  jump ___dot_L100026f2, 32;
		___dot_L100025e0:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 12, 32;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L100027dc;
		  add_wrap 0, 8, 0, 10;
		  to_signed 12, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10002950;
		  xor 12, 0, 4294967295, 12;
		  xor 11, 0, 4294967295, 11;
		  mstore 10, 0, 0, 11;
		  mstore 10, 0, 4, 12;
		  add_wrap 0, 0, 16, 11;
		  jump ___dot_L10002430, 32;
		___dot_L10002610:
		  branch_if_diff_greater_than 16, 9, -1, ___dot_L100027b0;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L1000276c, 32;
		___dot_L1000261a:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  jump ___dot_L1000275e, 32;
		___dot_L1000262a:
		  branch_if_diff_greater_than 16, 9, -1, ___dot_L100027b0;
		  add_wrap 12, 16, 0, 12;
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  xor 12, 0, 4294967295, 11;
		  add_wrap 0, 0, 4294967295, 12;
		  mstore 10, 0, 4, 12;
		  mstore 10, 0, 0, 11;
		  add_wrap 0, 0, 16, 11;
		  jump ___dot_L10002430, 32;
		___dot_L10002646:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L100027d8;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 10;
		  xor 10, 0, 4294967295, 10;
		___dot_L10002664:
		  add_wrap 0, 0, 4294967295, 12;
		  mstore 8, 0, 4, 12;
		  jump ___dot_L10002724, 32;
		___dot_L1000266a:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 2, 4, 10, 32;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 12, 13, ___dot_L10002894;
		  to_signed 10, 32;
		  is_diff_greater_than 0, 32, -(0), 12;
		  xor 12, 0, 1, 13;
		  add_wrap 12, 0, 4294967295, 12;
		  and 11, 12, 0, 11;
		  and 10, 12, 0, 10;
		  wrap16 13, 16, 13;
		  mstore 8, 0, 4, 10;
		  mstore 8, 0, 0, 11;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L1000269e:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L10002812;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10002806;
		  add_wrap 0, 8, 0, 11;
		  jump ___dot_L100026f6, 32;
		___dot_L100026c4:
		  branch_if_diff_greater_than 16, 9, -1, ___dot_L100027b0;
		  add_wrap 12, 16, 0, 12;
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  mstore 10, 0, 4, 0;
		  jump ___dot_L100028c6, 32;
		___dot_L100026d8:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000284a;
		___dot_L100026f2:
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L100026f6:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_bytes17h2fefed1922886a74E, 32;
		___dot_L10002706:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L100027d8;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 10;
		  mstore 8, 0, 4, 0;
		___dot_L10002724:
		  mstore 8, 0, 0, 10;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L1000272c:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_f1617h993c60321caa30dbE, 1;
		___dot_L10002738:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L100027d8;
		___dot_L10002742:
		  mstore 8, 0, 4, 0;
		  mstore 8, 0, 0, 0;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L10002750:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		___dot_L1000275e:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L100027d8;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L1000276c:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h0c891d2759ae6279E, 32;
		___dot_L1000277c:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 0, 10, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 11, 12, ___dot_L1000289e;
		  mstore 8, 0, 4, 0;
		  mstore 8, 0, 0, 10;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L100027a0:
		  branch_if_diff_greater_than 16, 9, -1, ___dot_L100027b0;
		  add_wrap 12, 16, 0, 12;
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L1000283a, 32;
		___dot_L100027b0:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 16;
		  jump ___dot_L1000242e, 32;
		___dot_L100027ba:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L100027d8;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 12;
		  jump ___dot_L10002836, 32;
		___dot_L100027d8:
		  mload 2, 0, 11, 32;
		  mload 2, 4, 12, 32;
		___dot_L100027dc:
		  mstore 8, 0, 0, 11;
		  mstore 8, 0, 4, 12;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L100027e6:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L10002812;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L100028da;
		___dot_L10002806:
		  mload 8, 20, 11, 32;
		___dot_L10002808:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 11;
		  add_wrap 0, 0, 6, 11;
		  jump ___dot_L10002430, 32;
		___dot_L10002812:
		  mstore 9, 0, 0, 12;
		  mstore 9, 0, 4, 11;
		  mload 9, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L1000281c:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000284a;
		___dot_L10002836:
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L1000283a:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_str17h267593b3b12169eeE, 32;
		___dot_L1000284a:
		  mload 2, 4, 11, 32;
		___dot_L1000284c:
		  mstore 8, 0, 0, 12;
		  mstore 8, 0, 4, 11;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L10002856:
		  and 8, 0, 252, 15;
		  add_wrap 0, 0, 28, 12;
		  branch_if_diff_nonzero 15, 12, ___dot_L100028aa;
		___dot_L10002860:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 16;
		  add_wrap 0, 0, 8, 11;
		  jump ___dot_L10002430, 32;
		___dot_L1000286c:
		  mload 12, 20, 11, 32;
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 13, 15;
		  mstore 10, 0, 0, 11;
		  jump ___dot_L10002948, 32;
		___dot_L10002876:
		  add_wrap 0, 9, 0, 12;
		  mload 9, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 13, 0, 4294967295, 11;
		  and 11, 0, 255, 14;
		  mload 9, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 28, 32;
		  branch_if_diff_nonzero 14, 0, ___dot_L100024ec;
		  mload 12, 20, 11, 32;
		  add_wrap 0, 0, 13, 15;
		  mstore 10, 0, 0, 11;
		  jump ___dot_L10002948, 32;
		___dot_L10002894:
		  mstore 8, 0, 0, 11;
		  mstore 8, 0, 4, 10;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L1000289e:
		  mload 2, 4, 12, 32;
		  mstore 8, 0, 0, 10;
		  mstore 8, 0, 4, 12;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L100028aa:
		  add_wrap 8, 0, 4294967264, 12;
		  and 12, 0, 255, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 12, 13, -1, ___dot_L100028de;
		  add_wrap 0, 0, 31, 11;
		  sub_wrap_with_offset 11, 8, 0, 11;
		  wrap16 11, 65536, 32;
		  wrap16 32, 256, 11;
		  to_signed 11, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 11, 0, 12;
		  shr 12, 0, 24, 12;
		  xor 32, 12, 0, 12;
		  to_signed 11, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 11, 0, 11;
		  shr 11, 0, 31, 11;
		  xor 32, 11, 0, 11;
		  mstore 10, 0, 4, 11;
		___dot_L100028c6:
		  mstore 10, 0, 0, 12;
		  add_wrap 0, 0, 16, 11;
		  jump ___dot_L10002430, 32;
		___dot_L100028cc:
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 13, 14;
		___dot_L100028d0:
		  mstore 10, 0, 0, 15;
		  mstore 10, 0, 4, 13;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L100028da:
		  add_wrap 0, 8, 0, 11;
		  jump ___dot_L1000283a, 32;
		___dot_L100028de:
		  add_wrap 0, 0, 60, 12;
		  branch_if_diff_equal 15, 12, 0, ___dot_L10002860;
		  add_wrap 8, 0, 4294967232, 12;
		  and 12, 0, 255, 13;
		  add_wrap 0, 0, 24, 14;
		  branch_if_diff_greater_than 14, 13, 0, ___dot_L100026f6;
		  add_wrap 8, 0, 4294967204, 12;
		  and 12, 0, 255, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002860;
		  add_wrap 8, 0, 4294967200, 12;
		  and 12, 0, 255, 13;
		  add_wrap 0, 0, 24, 14;
		  branch_if_diff_greater_than 14, 13, 0, ___dot_L1000283a;
		  add_wrap 8, 0, 4294967172, 12;
		  and 12, 0, 255, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002860;
		  wrap16 8, 65536, 32;
		  wrap16 32, 256, 12;
		  to_signed 12, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 12, 0, 12;
		  shr 12, 0, 24, 12;
		  xor 32, 12, 0, 12;
		  add_wrap 0, 0, 4294967192, 13;
		  to_signed 12, 32;
		  to_signed 13, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L1000296c;
		___dot_L1000292c:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 14;
		  and 14, 0, 255, 15;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_nonzero 15, 0, ___dot_L1000247c;
		  add_wrap 0, 0, 0, 14;
		___dot_L10002942:
		  add_wrap 0, 0, 13, 15;
		___dot_L10002944:
		  mstore 10, 0, 0, 16;
		___dot_L10002948:
		  mstore 10, 0, 4, 14;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump ___dot_L10002434, 32;
		___dot_L10002950:
		  xor 11, 0, 4294967295, 11;
		  xor 12, 0, 4294967295, 12;
		  add_wrap 0, 0, 4294967295, 13;
		  add_wrap 0, 0, 4294967295, 14;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN5serde2de7Visitor10visit_i12817hae8b92e3ba64fb5aE, 32;
		___dot_L1000296c:
		  add_wrap 8, 0, 100, 12;
		  and 12, 0, 255, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002860;
		  add_wrap 8, 0, 96, 12;
		  and 12, 0, 255, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L1000292c;
		  add_wrap 8, 0, 68, 12;
		  and 12, 0, 255, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002860;
		  add_wrap 8, 0, 64, 12;
		  and 12, 0, 255, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L1000276c;
		  add_wrap 0, 0, 220, 11;
		  branch_if_diff_equal 15, 11, 0, ___dot_L10002860;
		  add_wrap 8, 0, 32, 11;
		  and 11, 0, 255, 11;
		  add_wrap 0, 0, 20, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L10002860;
		  add_wrap 8, 0, 4, 8;
		  and 8, 0, 255, 11;
		  add_wrap 0, 0, 3, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L10002860;
		  set_reg 10, 268439424;
		  set_reg 12, 268439592;
		  add_wrap 0, 0, 40, 11;
		  jump _ZN4core9panicking5panic17h6885cb3ca4748be7E, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h8ca9c55904813e5aE:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mload 11, 20, 15, 32;
		  mload 11, 16, 12, 32;
		  branch_if_diff_greater_than 15, 12, -1, ___dot_L10002a18;
		  mload 11, 12, 9, 32;
		  add_wrap 9, 15, 0, 13;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 8;
		  add_wrap 15, 0, 1, 16;
		  add_wrap 0, 0, 24, 14;
		  mstore 11, 0, 20, 16;
		  branch_if_diff_greater_than 8, 14, -1, ___dot_L10002a32;
		___dot_L10002a0a:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 0;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  jump ___dot_L10002a24, 32;
		___dot_L10002a18:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 15;
		___dot_L10002a1e:
		  add_wrap 0, 0, 3, 11;
		___dot_L10002a20:
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		___dot_L10002a24:
		  add_wrap 0, 0, 1, 11;
		  mstore 10, 0, 0, 11;
		___dot_L10002a28:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L10002a32:
		  add_wrap 8, 0, 4294967272, 14;
		  add_wrap 0, 0, 231, 13;
		  branch_if_diff_greater_than 14, 13, 0, ___dot_L10002e06;
		  wrap16 14, 4, 14;
		  set_reg 13, 268437568;
		  add_wrap 13, 14, 0, 13;
		  mload 13, 0, 13, 32;
		  jump_dyn 13, 32;
		___dot_L10002a4e:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  jump ___dot_L10002ad2, 32;
		___dot_L10002a5c:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10002d06;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L10002a0a, 32;
		___dot_L10002a66:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  jump ___dot_L10002ad2, 32;
		___dot_L10002a74:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  jump ___dot_L10002ad2, 32;
		___dot_L10002a82:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L10002e1c;
		  add_wrap 0, 8, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10002e80;
		  mload 9, 20, 11, 32;
		  jump ___dot_L10002dbe, 32;
		___dot_L10002aa6:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_equal 10, 11, 0, ___dot_L10002adc;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  mstore 8, 0, 12, 11;
		  mstore 8, 0, 8, 12;
		  jump ___dot_L10002dfc, 32;
		___dot_L10002ac6:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_f1617h993c60321caa30dbE, 1;
		___dot_L10002ad2:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10002df4;
		___dot_L10002adc:
		  mstore 8, 0, 12, 0;
		  mstore 8, 0, 8, 0;
		  mload 8, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 16, 32;
		  jump ___dot_L10002e00, 32;
		___dot_L10002aea:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  jump ___dot_L10002dd6, 32;
		___dot_L10002afa:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L10002df6;
		  mstore 2, 0, 0, 11;
		  jump ___dot_L10002bbe, 32;
		___dot_L10002b18:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$22parse_indefinite_bytes17h1b7900ea8a35fb95E, 32;
		___dot_L10002b28:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 13;
		  and 13, 0, 255, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L10002ef2;
		___dot_L10002b3c:
		  add_wrap 0, 0, 0, 16;
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 0, 15;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  jump ___dot_L10002ef4, 32;
		___dot_L10002b48:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_equal 10, 11, 0, ___dot_L10002d88;
		  jump ___dot_L10002d68, 32;
		___dot_L10002b64:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 12, 32;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L10002df8;
		  add_wrap 0, 8, 0, 10;
		  to_signed 12, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10002a0a;
		  xor 11, 0, 4294967295, 11;
		  xor 12, 0, 4294967295, 12;
		  add_wrap 0, 0, 4294967295, 13;
		  add_wrap 0, 0, 4294967295, 14;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN5serde2de7Visitor10visit_i12817h94aba450bd7f8cb0E, 32;
		___dot_L10002ba0:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10002df4;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 10;
		  mstore 2, 0, 0, 10;
		___dot_L10002bbe:
		  add_wrap 0, 2, 0, 12;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h25d8f80f24325d89E, 1;
		  jump ___dot_L10002a28, 32;
		___dot_L10002bce:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$20parse_indefinite_str17he11230c199cd6471E, 32;
		___dot_L10002bde:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 16;
		  add_wrap 0, 0, 9, 11;
		  jump ___dot_L10002a20, 32;
		___dot_L10002bea:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h967d0111494897bbE, 32;
		___dot_L10002bfa:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10002d06;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  add_wrap 12, 0, 4294967295, 13;
		  and 13, 0, 255, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L10002eb2;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 0, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  jump ___dot_L10002eb6, 32;
		___dot_L10002c22:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  jump ___dot_L10002ca2, 32;
		___dot_L10002c32:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L10002d34;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10002dbc;
		  add_wrap 0, 8, 0, 11;
		  jump ___dot_L10002d8c, 32;
		___dot_L10002c58:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10002d06;
		  add_wrap 16, 9, 0, 16;
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L10002d8c, 32;
		___dot_L10002c68:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10002d06;
		  add_wrap 16, 9, 0, 16;
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		___dot_L10002c76:
		  mstore 2, 0, 0, 12;
		  add_wrap 0, 2, 0, 12;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h25d8f80f24325d89E, 1;
		  jump ___dot_L10002a28, 32;
		___dot_L10002c84:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  jump ___dot_L10002dd6, 32;
		___dot_L10002c94:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		___dot_L10002ca2:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10002df4;
		  add_wrap 0, 9, 0, 12;
		  mload 9, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 13, 0, 4294967295, 10;
		  and 10, 0, 255, 11;
		  mload 9, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 28, 32;
		  add_wrap 0, 8, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10002e94;
		  mload 12, 20, 11, 32;
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 13, 15;
		  mstore 10, 0, 8, 11;
		  jump ___dot_L10002ef8, 32;
		___dot_L10002cce:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10002d06;
		  add_wrap 16, 9, 0, 16;
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L10002d58, 32;
		___dot_L10002cde:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10002df4;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 12;
		  jump ___dot_L10002d54, 32;
		___dot_L10002cfc:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10002d06;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L10002de4, 32;
		___dot_L10002d06:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 16;
		  jump ___dot_L10002a1e, 32;
		___dot_L10002d10:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L10002d34;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10002dbc;
		  add_wrap 0, 8, 0, 11;
		  jump ___dot_L10002d58, 32;
		___dot_L10002d34:
		  mstore 9, 0, 8, 12;
		  mstore 9, 0, 12, 11;
		  jump ___dot_L10002e28, 32;
		___dot_L10002d3a:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10002d68;
		___dot_L10002d54:
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L10002d58:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_bytes17h4002f3e307cd3654E, 32;
		___dot_L10002d68:
		  mload 2, 4, 11, 32;
		  jump ___dot_L10002e1e, 32;
		___dot_L10002d6c:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10002df4;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 12;
		___dot_L10002d88:
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L10002d8c:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_str17h174c9455133b13a2E, 32;
		___dot_L10002d9c:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 12, 32;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L10002e24;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_equal 12, 0, 0, ___dot_L10002ea2;
		___dot_L10002dbc:
		  mload 8, 20, 11, 32;
		___dot_L10002dbe:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 11;
		  add_wrap 0, 0, 6, 11;
		  jump ___dot_L10002a20, 32;
		___dot_L10002dc8:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		___dot_L10002dd6:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10002df4;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L10002de4:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h409ad373b8c467c6E, 32;
		___dot_L10002df4:
		  mload 2, 0, 11, 32;
		___dot_L10002df6:
		  mload 2, 4, 12, 32;
		___dot_L10002df8:
		  mstore 8, 0, 8, 11;
		  mstore 8, 0, 12, 12;
		___dot_L10002dfc:
		  mload 8, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 16, 32;
		___dot_L10002e00:
		  add_wrap 0, 0, 1, 10;
		  mstore 8, 0, 0, 10;
		  jump ___dot_L10002a28, 32;
		___dot_L10002e06:
		  and 8, 0, 252, 15;
		  add_wrap 0, 0, 28, 12;
		  branch_if_diff_nonzero 15, 12, ___dot_L10002e32;
		___dot_L10002e10:
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 16;
		  add_wrap 0, 0, 8, 11;
		  jump ___dot_L10002a20, 32;
		___dot_L10002e1c:
		  mload 2, 0, 12, 32;
		___dot_L10002e1e:
		  mstore 8, 0, 8, 12;
		  mstore 8, 0, 12, 11;
		  jump ___dot_L10002dfc, 32;
		___dot_L10002e24:
		  mstore 9, 0, 8, 11;
		  mstore 9, 0, 12, 12;
		___dot_L10002e28:
		  mload 9, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 16, 32;
		  add_wrap 0, 0, 1, 10;
		  mstore 9, 0, 0, 10;
		  jump ___dot_L10002a28, 32;
		___dot_L10002e32:
		  add_wrap 8, 0, 4294967264, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002a0a;
		  add_wrap 0, 0, 60, 12;
		  branch_if_diff_equal 15, 12, 0, ___dot_L10002e10;
		  add_wrap 8, 0, 4294967232, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002d58;
		  add_wrap 8, 0, 4294967204, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002e10;
		  add_wrap 8, 0, 4294967200, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002d8c;
		  add_wrap 8, 0, 4294967172, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002e10;
		  wrap16 8, 65536, 32;
		  wrap16 32, 256, 12;
		  to_signed 12, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 12, 0, 12;
		  shr 12, 0, 24, 12;
		  xor 32, 12, 0, 12;
		  add_wrap 0, 0, 4294967192, 13;
		  to_signed 12, 32;
		  to_signed 13, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10002ec8;
		  add_wrap 8, 0, 4294967168, 12;
		  jump ___dot_L10002c76, 32;
		___dot_L10002e80:
		  add_wrap 0, 9, 0, 12;
		  mload 9, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 13, 0, 4294967295, 11;
		  and 11, 0, 255, 14;
		  mload 9, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L10002ec0;
		___dot_L10002e94:
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 0, 15;
		  mload 12, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 28, 32;
		  mstore 10, 0, 8, 0;
		  jump ___dot_L10002ef8, 32;
		___dot_L10002ea2:
		  mstore 2, 0, 0, 11;
		  add_wrap 0, 2, 0, 12;
		  add_wrap 0, 8, 0, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h25d8f80f24325d89E, 1;
		  jump ___dot_L10002a28, 32;
		___dot_L10002eb2:
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 13, 14;
		___dot_L10002eb6:
		  mstore 10, 0, 8, 15;
		  mstore 10, 0, 12, 13;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  jump ___dot_L10002a24, 32;
		___dot_L10002ec0:
		  mload 12, 20, 11, 32;
		  add_wrap 0, 0, 13, 15;
		  mstore 10, 0, 8, 11;
		  jump ___dot_L10002ef8, 32;
		___dot_L10002ec8:
		  add_wrap 8, 0, 4294967140, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002e10;
		  add_wrap 8, 0, 4294967136, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 12, 13, -1, ___dot_L10002f00;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 14;
		  and 14, 0, 255, 15;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_nonzero 15, 0, ___dot_L10002b3c;
		  add_wrap 0, 0, 0, 14;
		___dot_L10002ef2:
		  add_wrap 0, 0, 13, 15;
		___dot_L10002ef4:
		  mstore 10, 0, 8, 16;
		___dot_L10002ef8:
		  mstore 10, 0, 12, 14;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  jump ___dot_L10002a24, 32;
		___dot_L10002f00:
		  add_wrap 8, 0, 4294967108, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002e10;
		  add_wrap 8, 0, 4294967104, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002de4;
		  add_wrap 0, 0, 220, 11;
		  branch_if_diff_equal 15, 11, 0, ___dot_L10002e10;
		  add_wrap 8, 0, 4294967072, 11;
		  add_wrap 0, 0, 20, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L10002e10;
		  add_wrap 8, 0, 4294967044, 11;
		  add_wrap 0, 0, 3, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L10002e10;
		  set_reg 10, 268439424;
		  set_reg 12, 268439592;
		  add_wrap 0, 0, 40, 11;
		  jump _ZN4core9panicking5panic17h6885cb3ca4748be7E, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17hfe295fd9f41dbf48E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mload 11, 20, 15, 32;
		  mload 11, 16, 12, 32;
		  branch_if_diff_greater_than 15, 12, -1, ___dot_L10002f7a;
		  mload 11, 12, 9, 32;
		  add_wrap 9, 15, 0, 13;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 8;
		  add_wrap 15, 0, 1, 16;
		  add_wrap 0, 0, 24, 14;
		  mstore 11, 0, 20, 16;
		  branch_if_diff_greater_than 8, 14, -1, ___dot_L10002f90;
		  mstore 10, 0, 0, 8;
		  add_wrap 0, 0, 16, 11;
		  jump ___dot_L10002f82, 32;
		___dot_L10002f7a:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 15;
		___dot_L10002f80:
		  add_wrap 0, 0, 3, 11;
		___dot_L10002f82:
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		___dot_L10002f86:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L10002f90:
		  add_wrap 8, 0, 4294967272, 14;
		  add_wrap 0, 0, 231, 13;
		  branch_if_diff_greater_than 14, 13, 0, ___dot_L10003368;
		  wrap16 14, 4, 14;
		  set_reg 13, 268438496;
		  add_wrap 13, 14, 0, 13;
		  mload 13, 0, 13, 32;
		  jump_dyn 13, 32;
		___dot_L10002fac:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 0;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L10002fba:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 13;
		  and 13, 0, 255, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L1000340e;
		___dot_L10002fce:
		  add_wrap 0, 0, 0, 16;
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 0, 15;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  jump ___dot_L10003410, 32;
		___dot_L10002fda:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  jump ___dot_L10003044, 32;
		___dot_L10002fea:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10003184;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  add_wrap 12, 0, 4294967295, 13;
		  and 13, 0, 255, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 14, 0, 0, ___dot_L1000341c;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 0, 14;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  jump ___dot_L10003420, 32;
		___dot_L10003012:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L100031b0;
		  add_wrap 0, 8, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10003392;
		  mload 9, 20, 11, 32;
		  jump ___dot_L100032e0, 32;
		___dot_L10003036:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		___dot_L10003044:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000335a;
		  add_wrap 0, 9, 0, 12;
		  mload 9, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 13, 0, 4294967295, 10;
		  and 10, 0, 255, 11;
		  mload 9, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 28, 32;
		  add_wrap 0, 8, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000337e;
		___dot_L10003066:
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 0, 15;
		  mload 12, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 28, 32;
		  mstore 10, 0, 0, 0;
		  jump ___dot_L10003414, 32;
		___dot_L10003074:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  jump ___dot_L10003238, 32;
		___dot_L10003082:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_equal 10, 11, 0, ___dot_L10003242;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  mstore 8, 0, 4, 11;
		  mstore 8, 0, 0, 12;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L100030a6:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  jump ___dot_L1000333c, 32;
		___dot_L100030b6:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10003184;
		  add_wrap 16, 9, 0, 16;
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L10003312, 32;
		___dot_L100030c6:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10003184;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L10002fac, 32;
		___dot_L100030d0:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10003184;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L1000334a, 32;
		___dot_L100030da:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L100032ea;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L100032de;
		  add_wrap 0, 8, 0, 11;
		  jump ___dot_L10003312, 32;
		___dot_L10003100:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10003184;
		  add_wrap 16, 9, 0, 16;
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  jump ___dot_L1000328c, 32;
		___dot_L10003110:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 16;
		  add_wrap 0, 0, 9, 11;
		  jump ___dot_L10002f82, 32;
		___dot_L1000311c:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L1000335c;
		  mstore 8, 0, 0, 11;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L1000313c:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  jump ___dot_L10003238, 32;
		___dot_L1000314a:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 4, 12, 32;
		  mload 2, 0, 10, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 11, 13, ___dot_L10003388;
		  branch_if_diff_nonzero 12, 0, ___dot_L10003242;
		  mstore 8, 0, 0, 10;
		  add_wrap 0, 0, 16, 10;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L10003170:
		  branch_if_diff_greater_than 16, 12, -1, ___dot_L10003184;
		  add_wrap 16, 9, 0, 16;
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 15, 0, 2, 15;
		  mstore 11, 0, 20, 15;
		  mstore 10, 0, 0, 12;
		  add_wrap 0, 0, 16, 11;
		  jump ___dot_L10002f82, 32;
		___dot_L10003184:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 16;
		  jump ___dot_L10002f80, 32;
		___dot_L1000318e:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000335a;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 10;
		  mstore 8, 0, 0, 10;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L100031b0:
		  mload 2, 0, 12, 32;
		  jump ___dot_L10003324, 32;
		___dot_L100031b4:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$20parse_indefinite_str17h0c37d877974cc9fdE, 32;
		___dot_L100031c4:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 12, 32;
		  mload 2, 0, 11, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L1000335e;
		  add_wrap 0, 8, 0, 10;
		  to_signed 12, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10002fac;
		  xor 11, 0, 4294967295, 11;
		  xor 12, 0, 4294967295, 12;
		  add_wrap 0, 0, 4294967295, 13;
		  add_wrap 0, 0, 4294967295, 14;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN5serde2de7Visitor10visit_i12817hae8b92e3ba64fb5aE, 32;
		___dot_L10003200:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000335a;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 12;
		  jump ___dot_L1000330e, 32;
		___dot_L1000321e:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  jump ___dot_L10003238, 32;
		___dot_L1000322c:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_f1617h993c60321caa30dbE, 1;
		___dot_L10003238:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000335a;
		___dot_L10003242:
		  mstore 8, 0, 4, 0;
		  mstore 8, 0, 0, 0;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L10003250:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000335a;
		  mload 2, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0x0000ffff, 12;
		  jump ___dot_L10003288, 32;
		___dot_L1000326e:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10003322;
		___dot_L10003288:
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L1000328c:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_bytes17h2fefed1922886a74E, 32;
		___dot_L1000329c:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE, 1;
		  jump ___dot_L1000333c, 32;
		___dot_L100032ac:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$22parse_indefinite_bytes17h7f8d3a602003b19aE, 32;
		___dot_L100032bc:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_nonzero 10, 13, ___dot_L100032ea;
		  add_wrap 0, 9, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000342a;
		___dot_L100032de:
		  mload 8, 20, 11, 32;
		___dot_L100032e0:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 11;
		  add_wrap 0, 0, 6, 11;
		  jump ___dot_L10002f82, 32;
		___dot_L100032ea:
		  mstore 9, 0, 0, 12;
		  mstore 9, 0, 4, 11;
		  mload 9, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L100032f4:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 0, 12, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10003322;
		___dot_L1000330e:
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L10003312:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_str17h267593b3b12169eeE, 32;
		___dot_L10003322:
		  mload 2, 4, 11, 32;
		___dot_L10003324:
		  mstore 8, 0, 0, 12;
		  mstore 8, 0, 4, 11;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L1000332e:
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 11, 0, 9;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE, 1;
		___dot_L1000333c:
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000335a;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		___dot_L1000334a:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h3553b6a32a666cb6E, 32;
		___dot_L1000335a:
		  mload 2, 0, 11, 32;
		___dot_L1000335c:
		  mload 2, 4, 12, 32;
		___dot_L1000335e:
		  mstore 8, 0, 0, 11;
		  mstore 8, 0, 4, 12;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L10003368:
		  and 8, 0, 252, 15;
		  add_wrap 0, 0, 28, 12;
		  branch_if_diff_nonzero 15, 12, ___dot_L100033b0;
		___dot_L10003372:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 16;
		  add_wrap 0, 0, 8, 11;
		  jump ___dot_L10002f82, 32;
		___dot_L1000337e:
		  mload 12, 20, 11, 32;
		  add_wrap 0, 0, 0, 14;
		  add_wrap 0, 0, 13, 15;
		  mstore 10, 0, 0, 11;
		  jump ___dot_L10003414, 32;
		___dot_L10003388:
		  mstore 8, 0, 0, 10;
		  mstore 8, 0, 4, 12;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L10003392:
		  add_wrap 0, 9, 0, 12;
		  mload 9, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 13, 0, 4294967295, 11;
		  and 11, 0, 255, 14;
		  mload 9, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 28, 32;
		  branch_if_diff_nonzero 14, 0, ___dot_L10003066;
		  mload 12, 20, 11, 32;
		  add_wrap 0, 0, 13, 15;
		  mstore 10, 0, 0, 11;
		  jump ___dot_L10003414, 32;
		___dot_L100033b0:
		  add_wrap 8, 0, 4294967264, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10002fac;
		  add_wrap 0, 0, 60, 12;
		  branch_if_diff_equal 15, 12, 0, ___dot_L10003372;
		  add_wrap 8, 0, 4294967232, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L1000328c;
		  add_wrap 8, 0, 4294967204, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10003372;
		  add_wrap 8, 0, 4294967200, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10003312;
		  add_wrap 8, 0, 4294967172, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10003372;
		  wrap16 8, 65536, 32;
		  wrap16 32, 256, 12;
		  to_signed 12, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 12, 0, 12;
		  shr 12, 0, 24, 12;
		  xor 32, 12, 0, 12;
		  add_wrap 0, 0, 4294967192, 13;
		  to_signed 12, 32;
		  to_signed 13, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L1000342e;
		___dot_L100033f8:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 14;
		  and 14, 0, 255, 15;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_nonzero 15, 0, ___dot_L10002fce;
		  add_wrap 0, 0, 0, 14;
		___dot_L1000340e:
		  add_wrap 0, 0, 13, 15;
		___dot_L10003410:
		  mstore 10, 0, 0, 16;
		___dot_L10003414:
		  mstore 10, 0, 4, 14;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L1000341c:
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 13, 14;
		___dot_L10003420:
		  mstore 10, 0, 0, 15;
		  mstore 10, 0, 4, 13;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump ___dot_L10002f86, 32;
		___dot_L1000342a:
		  add_wrap 0, 8, 0, 11;
		  jump ___dot_L1000328c, 32;
		___dot_L1000342e:
		  add_wrap 8, 0, 4294967140, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10003372;
		  add_wrap 8, 0, 4294967136, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L100033f8;
		  add_wrap 8, 0, 4294967108, 12;
		  add_wrap 0, 0, 3, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10003372;
		  add_wrap 8, 0, 4294967104, 12;
		  add_wrap 0, 0, 24, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L1000334a;
		  add_wrap 0, 0, 220, 11;
		  branch_if_diff_equal 15, 11, 0, ___dot_L10003372;
		  add_wrap 8, 0, 4294967072, 11;
		  add_wrap 0, 0, 20, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L10003372;
		  add_wrap 8, 0, 4294967044, 11;
		  add_wrap 0, 0, 3, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L10003372;
		  set_reg 10, 268439424;
		  set_reg 12, 268439592;
		  add_wrap 0, 0, 40, 11;
		  jump _ZN4core9panicking5panic17h6885cb3ca4748be7E, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h0c891d2759ae6279E:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 12;
		  and 12, 0, 255, 13;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 13, 0, 0, ___dot_L100034c0;
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h4a3da4c92bcae363E, 1;
		  mload 8, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 10, 0, 1, 10;
		  mload 8, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 28, 32;
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		___dot_L100034c0:
		  mload 11, 20, 11, 32;
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 11;
		  add_wrap 0, 0, 13, 11;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump_dyn 1, 32;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h16e3d5438fde0c96E:
		  add_wrap 2, 0, 4294967184, 2;
		  mstore 2, 0, 108, 1;
		  mstore 2, 0, 104, 8;
		  mstore 2, 0, 100, 9;
		  mstore 2, 0, 96, 18;
		  mstore 2, 0, 92, 19;
		  mstore 2, 0, 88, 20;
		  mstore 2, 0, 84, 21;
		  mstore 2, 0, 80, 22;
		  mstore 2, 0, 76, 23;
		  mstore 2, 0, 72, 24;
		  mstore 2, 0, 68, 25;
		  mstore 2, 0, 64, 26;
		  mstore 2, 0, 60, 27;
		  add_wrap 0, 11, 0, 19;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 12, 0, 21;
		  add_wrap 11, 0, 4294967295, 11;
		  and 11, 0, 255, 12;
		  mload 19, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 28, 32;
		  branch_if_diff_equal 12, 0, 0, ___dot_L100035a2;
		  mload 21, 0, 9, 32;
		  set_reg 11, 131072;
		  add_wrap 0, 9, 0, 23;
		  branch_if_diff_greater_than 11, 9, 0, ___dot_L10003512;
		  set_reg 23, 131072;
		___dot_L10003512:
		  branch_if_diff_equal 9, 0, 0, ___dot_L100035b8;
		  mstore 2, 0, 12, 10;
		  set_reg 10, 268468224;
		  wrap16 23, 8, 20;
		  add_wrap 0, 0, 8, 11;
		  add_wrap 0, 20, 0, 10;
		  jump __rust_alloc, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10003656;
		  add_wrap 0, 10, 0, 22;
		  add_wrap 0, 0, 0, 8;
		  add_wrap 0, 0, 0, 18;
		  mstore 2, 0, 32, 0;
		  mstore 2, 0, 36, 0;
		  mstore 2, 0, 24, 23;
		  mstore 2, 0, 28, 10;
		  add_wrap 9, 0, 4294967295, 9;
		  add_wrap 0, 0, 16, 26;
		  add_wrap 0, 0, 4294967295, 27;
		  jump ___dot_L1000356e, 32;
		___dot_L10003548:
		  add_wrap 8, 18, 0, 10;
		  is_diff_greater_than 23, 10, 0, 11;
		  add_wrap 11, 0, 4294967295, 11;
		  and 11, 23, 0, 11;
		  sub_wrap_with_offset 10, 11, 0, 10;
		  wrap16 10, 8, 10;
		  add_wrap 10, 22, 0, 10;
		  mstore 10, 0, 4, 25;
		  mstore 10, 0, 0, 24;
		  add_wrap 8, 0, 1, 8;
		  add_wrap 9, 0, 4294967295, 9;
		  mstore 2, 0, 36, 8;
		  branch_if_diff_equal 9, 27, 0, ___dot_L100035de;
		___dot_L1000356e:
		  mstore 21, 0, 0, 9;
		  add_wrap 2, 0, 40, 10;
		  add_wrap 0, 19, 0, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h4a3da4c92bcae363E, 1;
		  mload 2, 48, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 20;
		  mload 2, 44, 25, 32;
		  mload 2, 40, 24, 32;
		  branch_if_diff_nonzero 20, 26, ___dot_L100035c4;
		  branch_if_diff_nonzero 8, 23, ___dot_L10003548;
		  add_wrap 2, 0, 24, 10;
		  jump _ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17hda21e222e6e8e82eE, 1;
		  mload 2, 36, 8, 32;
		  mload 2, 24, 23, 32;
		  mload 2, 32, 18, 32;
		  mload 2, 28, 22, 32;
		  jump ___dot_L10003548, 32;
		___dot_L100035a2:
		  mload 19, 20, 11, 32;
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 11;
		  add_wrap 0, 0, 13, 11;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  add_wrap 0, 0, 1, 11;
		  mstore 10, 0, 0, 11;
		  jump ___dot_L10003638, 32;
		___dot_L100035b8:
		  add_wrap 0, 0, 0, 20;
		  mstore 2, 0, 32, 0;
		  mstore 2, 0, 36, 0;
		  add_wrap 0, 0, 8, 11;
		  mstore 2, 0, 28, 11;
		  jump ___dot_L100035e6, 32;
		___dot_L100035c4:
		  branch_if_diff_equal 23, 0, 0, ___dot_L100035d8;
		  wrap16 23, 8, 11;
		  add_wrap 0, 0, 8, 12;
		  add_wrap 0, 22, 0, 10;
		  jump __rust_dealloc, 1;
		___dot_L100035d8:
		  add_wrap 0, 0, 1, 14;
		  mload 2, 12, 10, 32;
		  jump ___dot_L10003604, 32;
		___dot_L100035de:
		  mload 2, 24, 23, 32;
		  and 8, 0, 255, 20;
		  mload 2, 12, 10, 32;
		___dot_L100035e6:
		  add_wrap 0, 0, 0, 14;
		  mload 2, 28, 24, 32;
		  mload 2, 38, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 37, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 2, 39, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 2, 32, 25, 32;
		  wrap16 11, 256, 11;
		  or 11, 12, 0, 11;
		  mload 2, 42, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 42, 32;
		  mload 2, 40, 32, 33;
		  set_reg 34, 0xffff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xffff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 40, 32;
		___dot_L10003604:
		  mload 19, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 11, 0, 1, 11;
		  mload 19, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 28, 32;
		  mstore 10, 0, 0, 14;
		  mstore 10, 0, 4, 23;
		  mstore 10, 0, 12, 25;
		  mstore 10, 0, 8, 24;
		  mload 2, 40, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 2, 41, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 42, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 20, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  mload 10, 17, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 17, 32;
		  mload 10, 18, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 18, 32;
		  mload 10, 19, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 19, 32;
		___dot_L10003638:
		  mload 2, 108, 1, 32;
		  mload 2, 104, 8, 32;
		  mload 2, 100, 9, 32;
		  mload 2, 96, 18, 32;
		  mload 2, 92, 19, 32;
		  mload 2, 88, 20, 32;
		  mload 2, 84, 21, 32;
		  mload 2, 80, 22, 32;
		  mload 2, 76, 23, 32;
		  mload 2, 72, 24, 32;
		  mload 2, 68, 25, 32;
		  mload 2, 64, 26, 32;
		  mload 2, 60, 27, 32;
		  add_wrap 2, 0, 112, 2;
		  jump_dyn 1, 32;
		___dot_L10003656:
		  add_wrap 0, 0, 8, 10;
		  add_wrap 0, 20, 0, 11;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h25d8f80f24325d89E:
		  add_wrap 2, 0, 4294967216, 2;
		  mstore 2, 0, 76, 1;
		  mstore 2, 0, 72, 8;
		  mstore 2, 0, 68, 9;
		  mstore 2, 0, 64, 18;
		  mstore 2, 0, 60, 19;
		  mstore 2, 0, 56, 20;
		  mstore 2, 0, 52, 21;
		  mstore 2, 0, 48, 22;
		  mstore 2, 0, 44, 23;
		  mstore 2, 0, 40, 24;
		  add_wrap 0, 11, 0, 19;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 10, 0, 18;
		  add_wrap 11, 0, 4294967295, 11;
		  and 11, 0, 255, 10;
		  mload 19, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 28, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100036c0;
		  add_wrap 0, 12, 0, 21;
		  mload 12, 0, 8, 32;
		  set_reg 10, 262144;
		  add_wrap 0, 8, 0, 24;
		  branch_if_diff_greater_than 10, 8, 0, ___dot_L1000369e;
		  set_reg 24, 262144;
		___dot_L1000369e:
		  branch_if_diff_equal 8, 0, 0, ___dot_L100036da;
		  set_reg 10, 268468224;
		  wrap16 24, 4, 20;
		  add_wrap 0, 0, 4, 11;
		  add_wrap 0, 20, 0, 10;
		  jump __rust_alloc, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100037ea;
		  add_wrap 0, 10, 0, 22;
		  jump ___dot_L100036dc, 32;
		___dot_L100036c0:
		  mload 19, 20, 10, 32;
		  mstore 18, 0, 12, 0;
		  mstore 18, 0, 8, 10;
		  add_wrap 0, 0, 13, 10;
		  mload 18, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 16, 32;
		  add_wrap 0, 0, 1, 10;
		  mstore 18, 0, 0, 10;
		  jump ___dot_L100037d2, 32;
		___dot_L100036da:
		  add_wrap 0, 0, 4, 22;
		___dot_L100036dc:
		  add_wrap 0, 0, 0, 23;
		  add_wrap 0, 0, 0, 9;
		  mstore 2, 0, 12, 24;
		  mstore 2, 0, 16, 22;
		  add_wrap 0, 0, 16, 24;
		  jump ___dot_L100036f4, 32;
		___dot_L100036e8:
		  add_wrap 22, 23, 0, 10;
		  mstore 10, 0, 0, 20;
		  add_wrap 9, 0, 1, 9;
		  add_wrap 23, 0, 4, 23;
		___dot_L100036f4:
		  mstore 2, 0, 20, 9;
		  branch_if_diff_equal 8, 0, 0, ___dot_L1000371e;
		  add_wrap 8, 0, 4294967295, 8;
		  mstore 21, 0, 0, 8;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 19, 0, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17hfe295fd9f41dbf48E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 20;
		  branch_if_diff_nonzero 20, 24, ___dot_L1000375e;
		  mload 2, 24, 20, 32;
		  add_wrap 0, 0, 1, 10;
		  mload 2, 12, 11, 32;
		  and 10, 0, 1, 10;
		  branch_if_diff_nonzero 10, 0, ___dot_L10003726;
		  jump ___dot_L10003738, 32;
		___dot_L1000371e:
		  mload 2, 12, 11, 32;
		  and 0, 0, 1, 10;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10003738;
		___dot_L10003726:
		  branch_if_diff_nonzero 9, 11, ___dot_L100036e8;
		  add_wrap 2, 0, 12, 10;
		  jump _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h1e6b00757b8f2efcE, 1;
		  mload 2, 16, 22, 32;
		  jump ___dot_L100036e8, 32;
		___dot_L10003738:
		  mload 21, 0, 10, 32;
		  mload 2, 16, 8, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10003778;
		  mload 19, 20, 22, 32;
		  add_wrap 0, 0, 1, 9;
		  add_wrap 0, 0, 10, 20;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10003758;
		  wrap16 11, 4, 11;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 8, 0, 10;
		  jump __rust_dealloc, 1;
		___dot_L10003758:
		  add_wrap 0, 0, 0, 21;
		  add_wrap 0, 22, 0, 8;
		  jump ___dot_L10003776, 32;
		___dot_L1000375e:
		  mload 2, 28, 21, 32;
		  mload 2, 12, 11, 32;
		  mload 2, 24, 8, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10003774;
		  wrap16 11, 4, 11;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 22, 0, 10;
		  jump __rust_dealloc, 1;
		___dot_L10003774:
		  add_wrap 0, 0, 1, 9;
		___dot_L10003776:
		  jump ___dot_L1000377c, 32;
		___dot_L10003778:
		  mload 2, 20, 21, 32;
		  add_wrap 0, 0, 0, 9;
		___dot_L1000377c:
		  mload 19, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 10, 0, 1, 10;
		  mload 19, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 28, 32;
		  mstore 18, 0, 0, 9;
		  mstore 18, 0, 4, 11;
		  mstore 18, 0, 12, 21;
		  mstore 18, 0, 8, 8;
		  mload 2, 24, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 25, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 26, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 18, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 20, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 16, 32;
		  mload 18, 17, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 17, 32;
		  mload 18, 18, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 18, 32;
		  mload 18, 19, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 19, 32;
		  mload 2, 27, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 29, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 2, 30, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 18, 20, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 20, 32;
		  mload 18, 21, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 21, 32;
		  mload 18, 22, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 22, 32;
		  mload 18, 23, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 23, 32;
		___dot_L100037d2:
		  mload 2, 76, 1, 32;
		  mload 2, 72, 8, 32;
		  mload 2, 68, 9, 32;
		  mload 2, 64, 18, 32;
		  mload 2, 60, 19, 32;
		  mload 2, 56, 20, 32;
		  mload 2, 52, 21, 32;
		  mload 2, 48, 22, 32;
		  mload 2, 44, 23, 32;
		  mload 2, 40, 24, 32;
		  add_wrap 2, 0, 80, 2;
		  jump_dyn 1, 32;
		___dot_L100037ea:
		  add_wrap 0, 0, 4, 10;
		  add_wrap 0, 20, 0, 11;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h3553b6a32a666cb6E:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 12;
		  and 12, 0, 255, 13;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 13, 0, 0, ___dot_L10003828;
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17hfe295fd9f41dbf48E, 1;
		  mload 8, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 10, 0, 1, 10;
		  mload 8, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 28, 32;
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		___dot_L10003828:
		  mload 11, 20, 11, 32;
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 11;
		  add_wrap 0, 0, 13, 11;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump_dyn 1, 32;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h3a4f897c70e5ae3eE:
		  add_wrap 2, 0, 4294967200, 2;
		  mstore 2, 0, 92, 1;
		  mstore 2, 0, 88, 8;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 76, 19;
		  mstore 2, 0, 72, 20;
		  mstore 2, 0, 68, 21;
		  mstore 2, 0, 64, 22;
		  mstore 2, 0, 60, 23;
		  mstore 2, 0, 56, 24;
		  mstore 2, 0, 52, 25;
		  mstore 2, 0, 48, 26;
		  add_wrap 0, 11, 0, 20;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 10, 0, 19;
		  add_wrap 11, 0, 4294967295, 11;
		  and 11, 0, 255, 10;
		  mload 20, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 20, 33, 28, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10003956;
		  mstore 2, 0, 24, 0;
		  mstore 2, 0, 28, 0;
		  mload 20, 20, 8, 32;
		  mload 20, 16, 11, 32;
		  mstore 2, 0, 16, 0;
		  add_wrap 0, 0, 8, 10;
		  mstore 2, 0, 20, 10;
		  add_wrap 0, 0, 4, 18;
		  branch_if_diff_greater_than 8, 11, -1, ___dot_L10003908;
		  mload 20, 12, 10, 32;
		  add_wrap 10, 8, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 255, 21;
		  branch_if_diff_equal 10, 21, 0, ___dot_L1000398a;
		  add_wrap 0, 0, 0, 9;
		  add_wrap 0, 0, 0, 24;
		  add_wrap 0, 0, 0, 25;
		  add_wrap 0, 0, 8, 26;
		  add_wrap 0, 0, 16, 23;
		___dot_L1000389a:
		  add_wrap 2, 0, 32, 10;
		  add_wrap 0, 20, 0, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h4a3da4c92bcae363E, 1;
		  mload 2, 40, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 36, 22, 32;
		  mload 2, 32, 8, 32;
		  branch_if_diff_nonzero 10, 23, ___dot_L100039e4;
		  branch_if_diff_nonzero 9, 24, ___dot_L100038c8;
		  add_wrap 2, 0, 16, 10;
		  jump _ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17hda21e222e6e8e82eE, 1;
		  mload 2, 28, 9, 32;
		  mload 2, 16, 24, 32;
		  mload 2, 24, 25, 32;
		  mload 2, 20, 26, 32;
		___dot_L100038c8:
		  add_wrap 9, 25, 0, 10;
		  is_diff_greater_than 24, 10, 0, 11;
		  add_wrap 11, 0, 4294967295, 11;
		  and 11, 24, 0, 11;
		  sub_wrap_with_offset 10, 11, 0, 10;
		  wrap16 10, 8, 10;
		  add_wrap 10, 26, 0, 10;
		  mstore 10, 0, 4, 22;
		  mstore 10, 0, 0, 8;
		  mload 20, 20, 8, 32;
		  mload 20, 16, 11, 32;
		  add_wrap 9, 0, 1, 9;
		  mstore 2, 0, 28, 9;
		  branch_if_diff_greater_than 8, 11, -1, ___dot_L10003908;
		  mload 20, 12, 10, 32;
		  add_wrap 10, 8, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 21, ___dot_L1000389a;
		  mload 2, 16, 21, 32;
		  and 9, 0, 255, 18;
		  jump ___dot_L1000398e, 32;
		___dot_L10003908:
		  add_wrap 0, 0, 0, 22;
		  mload 2, 16, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000391c;
		___dot_L1000390e:
		  mload 2, 20, 10, 32;
		  wrap16 11, 8, 11;
		  add_wrap 0, 0, 8, 12;
		  jump __rust_dealloc, 1;
		___dot_L1000391c:
		  add_wrap 0, 0, 1, 9;
		___dot_L1000391e:
		  mload 20, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 10, 0, 1, 10;
		  mload 20, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 20, 33, 28, 32;
		  mstore 19, 0, 0, 9;
		  mstore 19, 0, 4, 21;
		  mstore 19, 0, 12, 22;
		  mstore 19, 0, 8, 8;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 33, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 34, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 19, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 18, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 16, 32;
		  mload 19, 17, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 17, 32;
		  mload 19, 18, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 18, 32;
		  mload 19, 19, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 19, 32;
		  jump ___dot_L1000396e, 32;
		___dot_L10003956:
		  mload 20, 20, 10, 32;
		  mstore 19, 0, 12, 0;
		  mstore 19, 0, 8, 10;
		  add_wrap 0, 0, 13, 10;
		  mload 19, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 16, 32;
		  add_wrap 0, 0, 1, 10;
		  mstore 19, 0, 0, 10;
		___dot_L1000396e:
		  mload 2, 92, 1, 32;
		  mload 2, 88, 8, 32;
		  mload 2, 84, 9, 32;
		  mload 2, 80, 18, 32;
		  mload 2, 76, 19, 32;
		  mload 2, 72, 20, 32;
		  mload 2, 68, 21, 32;
		  mload 2, 64, 22, 32;
		  mload 2, 60, 23, 32;
		  mload 2, 56, 24, 32;
		  mload 2, 52, 25, 32;
		  mload 2, 48, 26, 32;
		  add_wrap 2, 0, 96, 2;
		  jump_dyn 1, 32;
		___dot_L1000398a:
		  add_wrap 0, 0, 0, 21;
		  add_wrap 0, 0, 0, 18;
		___dot_L1000398e:
		  mload 2, 24, 22, 32;
		  mload 2, 30, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 2, 29, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 2, 31, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 2, 20, 10, 32;
		  wrap16 12, 256, 12;
		  or 12, 13, 0, 12;
		  mload 2, 6, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 6, 32;
		  mload 2, 4, 32, 33;
		  set_reg 34, 0xffff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xffff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 4, 32;
		  branch_if_diff_greater_than 8, 11, -1, ___dot_L100039ca;
		  add_wrap 0, 0, 0, 9;
		  mload 2, 4, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_16_bits 32, 11;
		  mload 2, 6, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 8, 0, 1, 8;
		  mstore 20, 0, 20, 8;
		  mload 2, 32, 32, 33;
		  set_reg 34, 0xffff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xffff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 32, 32;
		  mload 2, 34, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 34, 32;
		  add_wrap 0, 10, 0, 8;
		  jump ___dot_L1000391e, 32;
		___dot_L100039ca:
		  add_wrap 0, 0, 1, 9;
		  add_wrap 0, 0, 4, 18;
		  branch_if_diff_equal 21, 0, 0, ___dot_L100039e0;
		  wrap16 21, 8, 11;
		  add_wrap 0, 0, 8, 12;
		  jump __rust_dealloc, 1;
		___dot_L100039e0:
		  add_wrap 0, 0, 0, 22;
		  jump ___dot_L1000391e, 32;
		___dot_L100039e4:
		  add_wrap 0, 10, 0, 18;
		  mload 2, 16, 11, 32;
		  branch_if_diff_nonzero 11, 0, ___dot_L1000390e;
		  jump ___dot_L1000391c, 32;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h409ad373b8c467c6E:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 12;
		  and 12, 0, 255, 13;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 13, 0, 0, ___dot_L10003a1e;
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h8ca9c55904813e5aE, 1;
		  mload 8, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 10, 0, 1, 10;
		  mload 8, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 28, 32;
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		___dot_L10003a1e:
		  mload 11, 20, 11, 32;
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 11;
		  add_wrap 0, 0, 13, 11;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  add_wrap 0, 0, 1, 11;
		  mstore 10, 0, 0, 11;
		  jump_dyn 1, 32;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h8e121b50f051f860E:
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 12, 0, 4294967295, 12;
		  and 12, 0, 255, 13;
		  mload 11, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 28, 32;
		  branch_if_diff_equal 13, 0, 0, ___dot_L10003a64;
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  add_wrap 0, 11, 0, 8;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h38db1b707792fc5bE, 1;
		  mload 8, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 10, 0, 1, 10;
		  mload 8, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 28, 32;
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		___dot_L10003a64:
		  mload 11, 20, 11, 32;
		  mstore 10, 0, 12, 0;
		  mstore 10, 0, 8, 11;
		  add_wrap 0, 0, 13, 11;
		  mload 10, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 16, 32;
		  add_wrap 0, 0, 1, 11;
		  mstore 10, 0, 0, 11;
		  jump_dyn 1, 32;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$17recursion_checked17h967d0111494897bbE:
		  add_wrap 2, 0, 4294967216, 2;
		  mstore 2, 0, 76, 1;
		  mstore 2, 0, 72, 8;
		  mstore 2, 0, 68, 9;
		  mstore 2, 0, 64, 18;
		  mstore 2, 0, 60, 19;
		  mstore 2, 0, 56, 20;
		  mstore 2, 0, 52, 21;
		  mstore 2, 0, 48, 22;
		  mstore 2, 0, 44, 23;
		  mstore 2, 0, 40, 24;
		  add_wrap 0, 11, 0, 19;
		  mload 11, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 10, 0, 18;
		  add_wrap 11, 0, 4294967295, 11;
		  and 11, 0, 255, 10;
		  mload 19, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 28, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10003b2a;
		  mload 19, 20, 22, 32;
		  mload 19, 16, 10, 32;
		  mstore 2, 0, 12, 0;
		  add_wrap 0, 0, 4, 21;
		  mstore 2, 0, 16, 21;
		  mstore 2, 0, 20, 0;
		  branch_if_diff_greater_than 22, 10, -1, ___dot_L10003b44;
		  add_wrap 0, 0, 0, 9;
		  add_wrap 0, 0, 4, 24;
		  add_wrap 0, 0, 1, 8;
		  add_wrap 0, 0, 255, 20;
		  add_wrap 0, 0, 16, 23;
		  jump ___dot_L10003ade, 32;
		___dot_L10003ac4:
		  add_wrap 24, 9, 0, 10;
		  mstore 10, 0, 0, 21;
		  mload 19, 20, 22, 32;
		  mload 19, 16, 10, 32;
		  mstore 2, 0, 20, 8;
		  add_wrap 8, 0, 1, 8;
		  add_wrap 9, 0, 4, 9;
		  branch_if_diff_greater_than 22, 10, -1, ___dot_L10003b90;
		___dot_L10003ade:
		  mload 19, 12, 10, 32;
		  add_wrap 10, 22, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_equal 10, 20, 0, ___dot_L10003b0c;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 19, 0, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17hfe295fd9f41dbf48E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 21;
		  branch_if_diff_nonzero 21, 23, ___dot_L10003c16;
		  mload 2, 24, 21, 32;
		  add_wrap 0, 0, 1, 10;
		  mload 2, 12, 11, 32;
		  and 10, 0, 1, 10;
		  branch_if_diff_nonzero 10, 0, ___dot_L10003b14;
		  jump ___dot_L10003b4c, 32;
		___dot_L10003b0c:
		  mload 2, 12, 11, 32;
		  and 0, 0, 1, 10;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10003b4c;
		___dot_L10003b14:
		  add_wrap 8, 0, 4294967295, 10;
		  branch_if_diff_nonzero 10, 11, ___dot_L10003ac4;
		  add_wrap 2, 0, 12, 10;
		  jump _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h1e6b00757b8f2efcE, 1;
		  mload 2, 16, 24, 32;
		  jump ___dot_L10003ac4, 32;
		___dot_L10003b2a:
		  mload 19, 20, 10, 32;
		  mstore 18, 0, 12, 0;
		  mstore 18, 0, 8, 10;
		  add_wrap 0, 0, 13, 10;
		  mload 18, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 16, 32;
		  add_wrap 0, 0, 1, 10;
		  mstore 18, 0, 0, 10;
		  jump ___dot_L10003bfe, 32;
		___dot_L10003b44:
		  add_wrap 0, 0, 0, 20;
		  mload 2, 12, 11, 32;
		  branch_if_diff_nonzero 11, 0, ___dot_L10003b98;
		  jump ___dot_L10003ba6, 32;
		___dot_L10003b4c:
		  mload 19, 20, 9, 32;
		  mload 19, 16, 10, 32;
		  mload 2, 16, 22, 32;
		  add_wrap 0, 0, 4, 21;
		  branch_if_diff_greater_than 9, 10, -1, ___dot_L10003b78;
		  mload 19, 12, 10, 32;
		  mload 2, 20, 20, 32;
		  add_wrap 10, 9, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 9, 0, 1, 9;
		  mstore 19, 0, 20, 9;
		  add_wrap 0, 0, 255, 12;
		  add_wrap 0, 0, 10, 21;
		  branch_if_diff_equal 10, 12, 0, ___dot_L10003c20;
		___dot_L10003b78:
		  add_wrap 0, 0, 1, 8;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10003b8a;
		  wrap16 11, 4, 11;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 22, 0, 10;
		  jump __rust_dealloc, 1;
		___dot_L10003b8a:
		  add_wrap 0, 0, 0, 20;
		  add_wrap 0, 9, 0, 22;
		  jump ___dot_L10003ba8, 32;
		___dot_L10003b90:
		  add_wrap 0, 0, 0, 20;
		  add_wrap 0, 0, 4, 21;
		  mload 2, 12, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10003ba6;
		___dot_L10003b98:
		  mload 2, 16, 10, 32;
		  wrap16 11, 4, 11;
		  add_wrap 0, 0, 4, 12;
		  jump __rust_dealloc, 1;
		___dot_L10003ba6:
		  add_wrap 0, 0, 1, 8;
		___dot_L10003ba8:
		  mload 19, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 10, 0, 1, 10;
		  mload 19, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 28, 32;
		  mstore 18, 0, 0, 8;
		  mstore 18, 0, 4, 11;
		  mstore 18, 0, 12, 20;
		  mstore 18, 0, 8, 22;
		  mload 2, 24, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 25, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 26, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 18, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 21, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 16, 32;
		  mload 18, 17, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 17, 32;
		  mload 18, 18, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 18, 32;
		  mload 18, 19, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 19, 32;
		  mload 2, 27, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 29, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 2, 30, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 18, 20, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 20, 32;
		  mload 18, 21, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 21, 32;
		  mload 18, 22, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 22, 32;
		  mload 18, 23, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 23, 32;
		___dot_L10003bfe:
		  mload 2, 76, 1, 32;
		  mload 2, 72, 8, 32;
		  mload 2, 68, 9, 32;
		  mload 2, 64, 18, 32;
		  mload 2, 60, 19, 32;
		  mload 2, 56, 20, 32;
		  mload 2, 52, 21, 32;
		  mload 2, 48, 22, 32;
		  mload 2, 44, 23, 32;
		  mload 2, 40, 24, 32;
		  add_wrap 2, 0, 80, 2;
		  jump_dyn 1, 32;
		___dot_L10003c16:
		  mload 2, 28, 20, 32;
		  mload 2, 24, 22, 32;
		  mload 2, 12, 11, 32;
		  branch_if_diff_nonzero 11, 0, ___dot_L10003b98;
		  jump ___dot_L10003ba6, 32;
		___dot_L10003c20:
		  add_wrap 0, 0, 0, 8;
		  jump ___dot_L10003ba8, 32;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$20parse_indefinite_str17h0c37d877974cc9fdE:
		  add_wrap 2, 0, 4294967200, 2;
		  mstore 2, 0, 92, 1;
		  mstore 2, 0, 88, 8;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 76, 19;
		  mstore 2, 0, 72, 20;
		  mstore 2, 0, 68, 21;
		  mstore 2, 0, 64, 22;
		  mstore 2, 0, 60, 23;
		  mstore 2, 0, 56, 24;
		  mstore 2, 0, 52, 25;
		  mstore 2, 0, 48, 26;
		  mstore 2, 0, 44, 27;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 18;
		  mstore 11, 0, 8, 0;
		  add_wrap 0, 0, 24, 19;
		  add_wrap 0, 0, 16, 20;
		  add_wrap 0, 0, 121, 21;
		  add_wrap 0, 0, 120, 22;
		  add_wrap 0, 0, 2, 23;
		  add_wrap 0, 0, 122, 24;
		  add_wrap 0, 0, 4, 25;
		  add_wrap 0, 0, 123, 26;
		  add_wrap 0, 0, 8, 27;
		  jump ___dot_L10003c86, 32;
		___dot_L10003c64:
		  branch_if_diff_greater_than 8, 11, -1, ___dot_L10003e08;
		  add_wrap 14, 8, 0, 14;
		  mload 14, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 13, 0, 2, 13;
		  mstore 9, 0, 20, 13;
		___dot_L10003c72:
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN70_$LT$serde_cbor_dot__dot_read_dot__dot_SliceRead$u20$as$u20$serde_cbor_dot__dot_read_dot__dot_Read$GT$14read_to_buffer17ha08f4644b14a0dfbE, 1;
		  mload 2, 16, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 20, ___dot_L10003dc8;
		___dot_L10003c86:
		  mload 9, 20, 13, 32;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, -1, ___dot_L10003dc0;
		  mload 9, 12, 14, 32;
		  add_wrap 14, 13, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 13, 0, 1, 8;
		  add_wrap 10, 0, 4294967200, 12;
		  mstore 9, 0, 20, 8;
		  branch_if_diff_greater_than 19, 12, 0, ___dot_L10003c72;
		  to_signed 21, 32;
		  to_signed 10, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10003d26;
		  branch_if_diff_equal 10, 24, 0, ___dot_L10003d70;
		  branch_if_diff_nonzero 10, 26, ___dot_L10003dd4;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 8, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 20, ___dot_L10003dce;
		  mload 2, 24, 8, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 8, 0, ___dot_L10003e9c;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 8, 11, 0, ___dot_L10003e8a;
		  sub_wrap_with_offset 8, 10, 0, 11;
		  branch_if_diff_nonzero 11, 27, ___dot_L10003e66;
		  mload 9, 12, 11, 32;
		  add_wrap 11, 10, 0, 14;
		  mload 14, 4, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 14, 5, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 14, 7, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 14, 6, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 14, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  mload 14, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 16;
		  mload 14, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 17;
		  mload 14, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  wrap16 15, 256, 15;
		  or 15, 16, 0, 15;
		  wrap16 17, 65536, 17;
		  wrap16 14, 65536, 32;
		  wrap16 32, 256, 14;
		  or 14, 17, 0, 14;
		  or 14, 15, 0, 14;
		  mstore 9, 0, 20, 8;
		  branch_if_diff_nonzero 14, 0, ___dot_L10003e0e;
		  wrap16 13, 256, 13;
		  or 12, 13, 0, 12;
		  wrap16 11, 65536, 11;
		  wrap16 10, 65536, 32;
		  wrap16 32, 256, 10;
		  or 10, 11, 0, 10;
		  or 12, 10, 0, 12;
		  jump ___dot_L10003c72, 32;
		___dot_L10003d26:
		  branch_if_diff_equal 10, 22, 0, ___dot_L10003c64;
		  branch_if_diff_nonzero 10, 21, ___dot_L10003e02;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 2, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 20, ___dot_L10003dce;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L10003e54;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L10003e42;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 23, ___dot_L10003e78;
		  mload 9, 12, 11, 32;
		  add_wrap 10, 11, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 13;
		  wrap16 11, 256, 11;
		  or 11, 10, 0, 12;
		  jump ___dot_L10003c72, 32;
		___dot_L10003d70:
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 20, ___dot_L10003dce;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L10003e54;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L10003e42;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 25, ___dot_L10003eae;
		  mload 9, 12, 11, 32;
		  add_wrap 10, 11, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 13;
		  wrap16 12, 256, 12;
		  or 12, 14, 0, 12;
		  wrap16 10, 65536, 10;
		  wrap16 11, 65536, 32;
		  wrap16 32, 256, 11;
		  or 10, 11, 0, 10;
		  or 12, 10, 0, 12;
		  jump ___dot_L10003c72, 32;
		___dot_L10003dc0:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 3, 10;
		  add_wrap 0, 13, 0, 8;
		  jump ___dot_L10003e18, 32;
		___dot_L10003dc8:
		  mload 2, 12, 11, 32;
		  mload 2, 8, 8, 32;
		  jump ___dot_L10003e18, 32;
		___dot_L10003dce:
		  mload 2, 28, 11, 32;
		  mload 2, 24, 8, 32;
		  jump ___dot_L10003e18, 32;
		___dot_L10003dd4:
		  add_wrap 0, 0, 255, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10003e02;
		  mload 9, 4, 11, 32;
		  mload 9, 8, 9, 32;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 9, 0, 12;
		  jump _ZN4core3str8converts9from_utf817h6bed550b26c86389E, 1;
		  mload 2, 24, 10, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10003e14;
		  mload 2, 28, 10, 32;
		  sub_wrap_with_offset 9, 10, 0, 9;
		  is_diff_greater_than 9, 8, 0, 10;
		  sub_wrap_with_offset 8, 9, 0, 8;
		  sub_wrap_with_offset 0, 10, 0, 11;
		  add_wrap 0, 0, 7, 10;
		  jump ___dot_L10003e18, 32;
		___dot_L10003e02:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 9, 10;
		  jump ___dot_L10003e18, 32;
		___dot_L10003e08:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 3, 10;
		  jump ___dot_L10003e18, 32;
		___dot_L10003e0e:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 6, 10;
		  jump ___dot_L10003e18, 32;
		___dot_L10003e14:
		  add_wrap 0, 0, 0, 8;
		  add_wrap 0, 0, 0, 11;
		___dot_L10003e18:
		  mstore 18, 0, 0, 8;
		  mstore 18, 0, 4, 11;
		  mload 18, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 8, 32;
		  mload 2, 92, 1, 32;
		  mload 2, 88, 8, 32;
		  mload 2, 84, 9, 32;
		  mload 2, 80, 18, 32;
		  mload 2, 76, 19, 32;
		  mload 2, 72, 20, 32;
		  mload 2, 68, 21, 32;
		  mload 2, 64, 22, 32;
		  mload 2, 60, 23, 32;
		  mload 2, 56, 24, 32;
		  mload 2, 52, 25, 32;
		  mload 2, 48, 26, 32;
		  mload 2, 44, 27, 32;
		  add_wrap 2, 0, 96, 2;
		  jump_dyn 1, 32;
		___dot_L10003e42:
		  set_reg 12, 268440736;
		  add_wrap 0, 13, 0, 10;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L10003e54:
		  set_reg 12, 268440736;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10003e66:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 8, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		___dot_L10003e78:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 2, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		___dot_L10003e8a:
		  set_reg 12, 268440736;
		  add_wrap 0, 8, 0, 10;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L10003e9c:
		  set_reg 12, 268440736;
		  add_wrap 0, 8, 0, 11;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10003eae:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 4, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$20parse_indefinite_str17he11230c199cd6471E:
		  add_wrap 2, 0, 4294967200, 2;
		  mstore 2, 0, 92, 1;
		  mstore 2, 0, 88, 8;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 76, 19;
		  mstore 2, 0, 72, 20;
		  mstore 2, 0, 68, 21;
		  mstore 2, 0, 64, 22;
		  mstore 2, 0, 60, 23;
		  mstore 2, 0, 56, 24;
		  mstore 2, 0, 52, 25;
		  mstore 2, 0, 48, 26;
		  mstore 2, 0, 44, 27;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 18;
		  mstore 11, 0, 8, 0;
		  add_wrap 0, 0, 24, 19;
		  add_wrap 0, 0, 16, 20;
		  add_wrap 0, 0, 121, 21;
		  add_wrap 0, 0, 120, 22;
		  add_wrap 0, 0, 2, 23;
		  add_wrap 0, 0, 122, 24;
		  add_wrap 0, 0, 4, 25;
		  add_wrap 0, 0, 123, 26;
		  add_wrap 0, 0, 8, 27;
		  jump ___dot_L10003f22, 32;
		___dot_L10003f00:
		  branch_if_diff_greater_than 8, 11, -1, ___dot_L100040a4;
		  add_wrap 14, 8, 0, 14;
		  mload 14, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 13, 0, 2, 13;
		  mstore 9, 0, 20, 13;
		___dot_L10003f0e:
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN70_$LT$serde_cbor_dot__dot_read_dot__dot_SliceRead$u20$as$u20$serde_cbor_dot__dot_read_dot__dot_Read$GT$14read_to_buffer17ha08f4644b14a0dfbE, 1;
		  mload 2, 16, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 20, ___dot_L10004064;
		___dot_L10003f22:
		  mload 9, 20, 13, 32;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, -1, ___dot_L1000405c;
		  mload 9, 12, 14, 32;
		  add_wrap 14, 13, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 13, 0, 1, 8;
		  add_wrap 10, 0, 4294967200, 12;
		  mstore 9, 0, 20, 8;
		  branch_if_diff_greater_than 19, 12, 0, ___dot_L10003f0e;
		  to_signed 21, 32;
		  to_signed 10, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10003fc2;
		  branch_if_diff_equal 10, 24, 0, ___dot_L1000400c;
		  branch_if_diff_nonzero 10, 26, ___dot_L10004070;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 8, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 20, ___dot_L1000406a;
		  mload 2, 24, 8, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 8, 0, ___dot_L1000413e;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 8, 11, 0, ___dot_L1000412c;
		  sub_wrap_with_offset 8, 10, 0, 11;
		  branch_if_diff_nonzero 11, 27, ___dot_L10004108;
		  mload 9, 12, 11, 32;
		  add_wrap 11, 10, 0, 14;
		  mload 14, 4, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 14, 5, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 14, 7, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 14, 6, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 14, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  mload 14, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 16;
		  mload 14, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 17;
		  mload 14, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  wrap16 15, 256, 15;
		  or 15, 16, 0, 15;
		  wrap16 17, 65536, 17;
		  wrap16 14, 65536, 32;
		  wrap16 32, 256, 14;
		  or 14, 17, 0, 14;
		  or 14, 15, 0, 14;
		  mstore 9, 0, 20, 8;
		  branch_if_diff_nonzero 14, 0, ___dot_L100040aa;
		  wrap16 13, 256, 13;
		  or 12, 13, 0, 12;
		  wrap16 11, 65536, 11;
		  wrap16 10, 65536, 32;
		  wrap16 32, 256, 10;
		  or 10, 11, 0, 10;
		  or 12, 10, 0, 12;
		  jump ___dot_L10003f0e, 32;
		___dot_L10003fc2:
		  branch_if_diff_equal 10, 22, 0, ___dot_L10003f00;
		  branch_if_diff_nonzero 10, 21, ___dot_L1000409e;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 2, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 20, ___dot_L1000406a;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L100040f6;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L100040e4;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 23, ___dot_L1000411a;
		  mload 9, 12, 11, 32;
		  add_wrap 10, 11, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 13;
		  wrap16 11, 256, 11;
		  or 11, 10, 0, 12;
		  jump ___dot_L10003f0e, 32;
		___dot_L1000400c:
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 20, ___dot_L1000406a;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L100040f6;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L100040e4;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 25, ___dot_L10004150;
		  mload 9, 12, 11, 32;
		  add_wrap 10, 11, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 13;
		  wrap16 12, 256, 12;
		  or 12, 14, 0, 12;
		  wrap16 10, 65536, 10;
		  wrap16 11, 65536, 32;
		  wrap16 32, 256, 11;
		  or 10, 11, 0, 10;
		  or 12, 10, 0, 12;
		  jump ___dot_L10003f0e, 32;
		___dot_L1000405c:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 3, 10;
		  add_wrap 0, 13, 0, 8;
		  jump ___dot_L100040b4, 32;
		___dot_L10004064:
		  mload 2, 12, 11, 32;
		  mload 2, 8, 8, 32;
		  jump ___dot_L100040b4, 32;
		___dot_L1000406a:
		  mload 2, 28, 11, 32;
		  mload 2, 24, 8, 32;
		  jump ___dot_L100040b4, 32;
		___dot_L10004070:
		  add_wrap 0, 0, 255, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000409e;
		  mload 9, 4, 11, 32;
		  mload 9, 8, 9, 32;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 9, 0, 12;
		  jump _ZN4core3str8converts9from_utf817h6bed550b26c86389E, 1;
		  mload 2, 24, 10, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100040b0;
		  mload 2, 28, 10, 32;
		  sub_wrap_with_offset 9, 10, 0, 9;
		  is_diff_greater_than 9, 8, 0, 10;
		  sub_wrap_with_offset 8, 9, 0, 8;
		  sub_wrap_with_offset 0, 10, 0, 11;
		  add_wrap 0, 0, 7, 10;
		  jump ___dot_L100040b4, 32;
		___dot_L1000409e:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 9, 10;
		  jump ___dot_L100040b4, 32;
		___dot_L100040a4:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 3, 10;
		  jump ___dot_L100040b4, 32;
		___dot_L100040aa:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 6, 10;
		  jump ___dot_L100040b4, 32;
		___dot_L100040b0:
		  add_wrap 0, 0, 0, 8;
		  add_wrap 0, 0, 0, 11;
		___dot_L100040b4:
		  mstore 18, 0, 8, 8;
		  mstore 18, 0, 12, 11;
		  mload 18, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 16, 32;
		  add_wrap 0, 0, 1, 10;
		  mstore 18, 0, 0, 10;
		  mload 2, 92, 1, 32;
		  mload 2, 88, 8, 32;
		  mload 2, 84, 9, 32;
		  mload 2, 80, 18, 32;
		  mload 2, 76, 19, 32;
		  mload 2, 72, 20, 32;
		  mload 2, 68, 21, 32;
		  mload 2, 64, 22, 32;
		  mload 2, 60, 23, 32;
		  mload 2, 56, 24, 32;
		  mload 2, 52, 25, 32;
		  mload 2, 48, 26, 32;
		  mload 2, 44, 27, 32;
		  add_wrap 2, 0, 96, 2;
		  jump_dyn 1, 32;
		___dot_L100040e4:
		  set_reg 12, 268440736;
		  add_wrap 0, 13, 0, 10;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L100040f6:
		  set_reg 12, 268440736;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10004108:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 8, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		___dot_L1000411a:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 2, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		___dot_L1000412c:
		  set_reg 12, 268440736;
		  add_wrap 0, 8, 0, 10;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L1000413e:
		  set_reg 12, 268440736;
		  add_wrap 0, 8, 0, 11;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10004150:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 4, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$22parse_indefinite_bytes17h1b7900ea8a35fb95E:
		  add_wrap 2, 0, 4294967200, 2;
		  mstore 2, 0, 92, 1;
		  mstore 2, 0, 88, 8;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 76, 19;
		  mstore 2, 0, 72, 20;
		  mstore 2, 0, 68, 21;
		  mstore 2, 0, 64, 22;
		  mstore 2, 0, 60, 23;
		  mstore 2, 0, 56, 24;
		  mstore 2, 0, 52, 25;
		  mstore 2, 0, 48, 26;
		  mstore 2, 0, 44, 27;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 18;
		  mstore 11, 0, 8, 0;
		  add_wrap 0, 0, 24, 19;
		  add_wrap 0, 0, 16, 27;
		  add_wrap 0, 0, 89, 20;
		  add_wrap 0, 0, 88, 21;
		  add_wrap 0, 0, 2, 22;
		  add_wrap 0, 0, 90, 23;
		  add_wrap 0, 0, 4, 24;
		  add_wrap 0, 0, 91, 25;
		  add_wrap 0, 0, 8, 26;
		  jump ___dot_L100041c4, 32;
		___dot_L100041a2:
		  branch_if_diff_greater_than 13, 11, -1, ___dot_L10004328;
		  add_wrap 13, 15, 0, 13;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 14, 0, 2, 14;
		  mstore 9, 0, 20, 14;
		___dot_L100041b0:
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN70_$LT$serde_cbor_dot__dot_read_dot__dot_SliceRead$u20$as$u20$serde_cbor_dot__dot_read_dot__dot_Read$GT$14read_to_buffer17ha08f4644b14a0dfbE, 1;
		  mload 2, 16, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 27, ___dot_L10004306;
		___dot_L100041c4:
		  mload 9, 20, 14, 32;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 14, 11, -1, ___dot_L100042fe;
		  mload 9, 12, 15, 32;
		  add_wrap 15, 14, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 14, 0, 1, 13;
		  add_wrap 10, 0, 4294967232, 12;
		  mstore 9, 0, 20, 13;
		  branch_if_diff_greater_than 19, 12, 0, ___dot_L100041b0;
		  to_signed 20, 32;
		  to_signed 10, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10004264;
		  branch_if_diff_equal 10, 23, 0, ___dot_L100042ae;
		  branch_if_diff_nonzero 10, 25, ___dot_L10004312;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 8, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 27, ___dot_L1000430c;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L10004374;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L10004362;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 26, ___dot_L10004386;
		  mload 9, 12, 11, 32;
		  add_wrap 11, 10, 0, 15;
		  mload 15, 4, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 15, 5, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 15, 7, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 15, 6, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 15, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 8;
		  mload 15, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 16;
		  mload 15, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 17;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  wrap16 8, 256, 8;
		  or 8, 16, 0, 8;
		  wrap16 17, 65536, 17;
		  wrap16 15, 65536, 32;
		  wrap16 32, 256, 15;
		  or 15, 17, 0, 15;
		  or 15, 8, 0, 15;
		  mstore 9, 0, 20, 13;
		  branch_if_diff_nonzero 15, 0, ___dot_L1000432e;
		  wrap16 14, 256, 14;
		  or 12, 14, 0, 12;
		  wrap16 11, 65536, 11;
		  wrap16 10, 65536, 32;
		  wrap16 32, 256, 10;
		  or 10, 11, 0, 10;
		  or 12, 10, 0, 12;
		  jump ___dot_L100041b0, 32;
		___dot_L10004264:
		  branch_if_diff_equal 10, 21, 0, ___dot_L100041a2;
		  branch_if_diff_nonzero 10, 20, ___dot_L10004322;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 2, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 27, ___dot_L1000430c;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L10004374;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L10004362;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 22, ___dot_L10004398;
		  mload 9, 12, 11, 32;
		  add_wrap 10, 11, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 13;
		  wrap16 11, 256, 11;
		  or 11, 10, 0, 12;
		  jump ___dot_L100041b0, 32;
		___dot_L100042ae:
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 27, ___dot_L1000430c;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L10004374;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L10004362;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 24, ___dot_L100043aa;
		  mload 9, 12, 11, 32;
		  add_wrap 10, 11, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 13;
		  wrap16 12, 256, 12;
		  or 12, 14, 0, 12;
		  wrap16 10, 65536, 10;
		  wrap16 11, 65536, 32;
		  wrap16 32, 256, 11;
		  or 10, 11, 0, 10;
		  or 12, 10, 0, 12;
		  jump ___dot_L100041b0, 32;
		___dot_L100042fe:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 3, 10;
		  add_wrap 0, 14, 0, 13;
		  jump ___dot_L10004332, 32;
		___dot_L10004306:
		  mload 2, 12, 11, 32;
		  mload 2, 8, 13, 32;
		  jump ___dot_L10004332, 32;
		___dot_L1000430c:
		  mload 2, 28, 11, 32;
		  mload 2, 24, 13, 32;
		  jump ___dot_L10004332, 32;
		___dot_L10004312:
		  add_wrap 0, 0, 255, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10004322;
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 0, 10;
		  jump ___dot_L10004332, 32;
		___dot_L10004322:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 9, 10;
		  jump ___dot_L10004332, 32;
		___dot_L10004328:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 3, 10;
		  jump ___dot_L10004332, 32;
		___dot_L1000432e:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 6, 10;
		___dot_L10004332:
		  mstore 18, 0, 8, 13;
		  mstore 18, 0, 12, 11;
		  mload 18, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 16, 32;
		  add_wrap 0, 0, 1, 10;
		  mstore 18, 0, 0, 10;
		  mload 2, 92, 1, 32;
		  mload 2, 88, 8, 32;
		  mload 2, 84, 9, 32;
		  mload 2, 80, 18, 32;
		  mload 2, 76, 19, 32;
		  mload 2, 72, 20, 32;
		  mload 2, 68, 21, 32;
		  mload 2, 64, 22, 32;
		  mload 2, 60, 23, 32;
		  mload 2, 56, 24, 32;
		  mload 2, 52, 25, 32;
		  mload 2, 48, 26, 32;
		  mload 2, 44, 27, 32;
		  add_wrap 2, 0, 96, 2;
		  jump_dyn 1, 32;
		___dot_L10004362:
		  set_reg 12, 268440736;
		  add_wrap 0, 13, 0, 10;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L10004374:
		  set_reg 12, 268440736;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10004386:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 8, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		___dot_L10004398:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 2, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		___dot_L100043aa:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 4, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$22parse_indefinite_bytes17h7f8d3a602003b19aE:
		  add_wrap 2, 0, 4294967200, 2;
		  mstore 2, 0, 92, 1;
		  mstore 2, 0, 88, 8;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 76, 19;
		  mstore 2, 0, 72, 20;
		  mstore 2, 0, 68, 21;
		  mstore 2, 0, 64, 22;
		  mstore 2, 0, 60, 23;
		  mstore 2, 0, 56, 24;
		  mstore 2, 0, 52, 25;
		  mstore 2, 0, 48, 26;
		  mstore 2, 0, 44, 27;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 18;
		  mstore 11, 0, 8, 0;
		  add_wrap 0, 0, 24, 19;
		  add_wrap 0, 0, 16, 27;
		  add_wrap 0, 0, 89, 20;
		  add_wrap 0, 0, 88, 21;
		  add_wrap 0, 0, 2, 22;
		  add_wrap 0, 0, 90, 23;
		  add_wrap 0, 0, 4, 24;
		  add_wrap 0, 0, 91, 25;
		  add_wrap 0, 0, 8, 26;
		  jump ___dot_L1000441e, 32;
		___dot_L100043fc:
		  branch_if_diff_greater_than 13, 11, -1, ___dot_L10004582;
		  add_wrap 13, 15, 0, 13;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 14, 0, 2, 14;
		  mstore 9, 0, 20, 14;
		___dot_L1000440a:
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN70_$LT$serde_cbor_dot__dot_read_dot__dot_SliceRead$u20$as$u20$serde_cbor_dot__dot_read_dot__dot_Read$GT$14read_to_buffer17ha08f4644b14a0dfbE, 1;
		  mload 2, 16, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 27, ___dot_L10004560;
		___dot_L1000441e:
		  mload 9, 20, 14, 32;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 14, 11, -1, ___dot_L10004558;
		  mload 9, 12, 15, 32;
		  add_wrap 15, 14, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 14, 0, 1, 13;
		  add_wrap 10, 0, 4294967232, 12;
		  mstore 9, 0, 20, 13;
		  branch_if_diff_greater_than 19, 12, 0, ___dot_L1000440a;
		  to_signed 20, 32;
		  to_signed 10, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L100044be;
		  branch_if_diff_equal 10, 23, 0, ___dot_L10004508;
		  branch_if_diff_nonzero 10, 25, ___dot_L1000456c;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 8, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 27, ___dot_L10004566;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L100045c8;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L100045b6;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 26, ___dot_L100045da;
		  mload 9, 12, 11, 32;
		  add_wrap 11, 10, 0, 15;
		  mload 15, 4, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 15, 5, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 15, 7, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 15, 6, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 15, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 8;
		  mload 15, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 16;
		  mload 15, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 17;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  wrap16 8, 256, 8;
		  or 8, 16, 0, 8;
		  wrap16 17, 65536, 17;
		  wrap16 15, 65536, 32;
		  wrap16 32, 256, 15;
		  or 15, 17, 0, 15;
		  or 15, 8, 0, 15;
		  mstore 9, 0, 20, 13;
		  branch_if_diff_nonzero 15, 0, ___dot_L10004588;
		  wrap16 14, 256, 14;
		  or 12, 14, 0, 12;
		  wrap16 11, 65536, 11;
		  wrap16 10, 65536, 32;
		  wrap16 32, 256, 10;
		  or 10, 11, 0, 10;
		  or 12, 10, 0, 12;
		  jump ___dot_L1000440a, 32;
		___dot_L100044be:
		  branch_if_diff_equal 10, 21, 0, ___dot_L100043fc;
		  branch_if_diff_nonzero 10, 20, ___dot_L1000457c;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 2, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 27, ___dot_L10004566;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L100045c8;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L100045b6;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 22, ___dot_L100045ec;
		  mload 9, 12, 11, 32;
		  add_wrap 10, 11, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 13;
		  wrap16 11, 256, 11;
		  or 11, 10, 0, 12;
		  jump ___dot_L1000440a, 32;
		___dot_L10004508:
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 9, 0, 11;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 27, ___dot_L10004566;
		  mload 2, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 13, 0, ___dot_L100045c8;
		  mload 9, 16, 11, 32;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L100045b6;
		  sub_wrap_with_offset 13, 10, 0, 11;
		  branch_if_diff_nonzero 11, 24, ___dot_L100045fe;
		  mload 9, 12, 11, 32;
		  add_wrap 10, 11, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 13;
		  wrap16 12, 256, 12;
		  or 12, 14, 0, 12;
		  wrap16 10, 65536, 10;
		  wrap16 11, 65536, 32;
		  wrap16 32, 256, 11;
		  or 10, 11, 0, 10;
		  or 12, 10, 0, 12;
		  jump ___dot_L1000440a, 32;
		___dot_L10004558:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 3, 10;
		  add_wrap 0, 14, 0, 13;
		  jump ___dot_L1000458c, 32;
		___dot_L10004560:
		  mload 2, 12, 11, 32;
		  mload 2, 8, 13, 32;
		  jump ___dot_L1000458c, 32;
		___dot_L10004566:
		  mload 2, 28, 11, 32;
		  mload 2, 24, 13, 32;
		  jump ___dot_L1000458c, 32;
		___dot_L1000456c:
		  add_wrap 0, 0, 255, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000457c;
		  add_wrap 0, 0, 0, 13;
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 0, 10;
		  jump ___dot_L1000458c, 32;
		___dot_L1000457c:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 9, 10;
		  jump ___dot_L1000458c, 32;
		___dot_L10004582:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 3, 10;
		  jump ___dot_L1000458c, 32;
		___dot_L10004588:
		  add_wrap 0, 0, 0, 11;
		  add_wrap 0, 0, 6, 10;
		___dot_L1000458c:
		  mstore 18, 0, 0, 13;
		  mstore 18, 0, 4, 11;
		  mload 18, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 18, 33, 8, 32;
		  mload 2, 92, 1, 32;
		  mload 2, 88, 8, 32;
		  mload 2, 84, 9, 32;
		  mload 2, 80, 18, 32;
		  mload 2, 76, 19, 32;
		  mload 2, 72, 20, 32;
		  mload 2, 68, 21, 32;
		  mload 2, 64, 22, 32;
		  mload 2, 60, 23, 32;
		  mload 2, 56, 24, 32;
		  mload 2, 52, 25, 32;
		  mload 2, 48, 26, 32;
		  mload 2, 44, 27, 32;
		  add_wrap 2, 0, 96, 2;
		  jump_dyn 1, 32;
		___dot_L100045b6:
		  set_reg 12, 268440736;
		  add_wrap 0, 13, 0, 10;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L100045c8:
		  set_reg 12, 268440736;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L100045da:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 8, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		___dot_L100045ec:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 2, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		___dot_L100045fe:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 4, 10;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_f1617h993c60321caa30dbE:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 0, 2, 12;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L10004670;
		  mload 2, 0, 11, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10004686;
		  mload 9, 16, 13, 32;
		  branch_if_diff_greater_than 11, 13, 0, ___dot_L10004696;
		  sub_wrap_with_offset 11, 10, 0, 13;
		  add_wrap 0, 0, 2, 12;
		  branch_if_diff_nonzero 13, 12, ___dot_L100046aa;
		  mload 9, 12, 12, 32;
		  add_wrap 10, 12, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 11;
		  wrap16 12, 256, 12;
		  wrap16 10, 65536, 11;
		  or 11, 12, 0, 11;
		  or 10, 11, 0, 10;
		  jump _ZN4half8binary167convert19f16_to_f32_fallback17h5f3fde806157e639E, 1;
		  mstore 8, 0, 0, 10;
		  add_wrap 0, 0, 16, 10;
		  jump ___dot_L10004678, 32;
		___dot_L10004670:
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  mstore 8, 0, 4, 11;
		  mstore 8, 0, 0, 12;
		___dot_L10004678:
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L10004686:
		  set_reg 12, 268440736;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10004696:
		  set_reg 12, 268440736;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L100046aa:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 2, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_str17h174c9455133b13a2E:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 44, 1;
		  mstore 2, 0, 40, 8;
		  mstore 2, 0, 36, 9;
		  mstore 2, 0, 32, 18;
		  mstore 2, 0, 28, 19;
		  mstore 2, 0, 24, 20;
		  add_wrap 0, 11, 0, 9;
		  mload 11, 20, 19, 32;
		  add_wrap 0, 12, 0, 18;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 2, 0, 8, 10;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 16, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 8, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L10004730;
		  branch_if_diff_greater_than 19, 11, 0, ___dot_L10004758;
		  mload 9, 16, 13, 32;
		  branch_if_diff_greater_than 11, 13, 0, ___dot_L1000476a;
		  mload 9, 12, 12, 32;
		  sub_wrap_with_offset 11, 19, 0, 20;
		  add_wrap 12, 19, 0, 12;
		  mstore 9, 0, 20, 11;
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 12, 0, 11;
		  add_wrap 0, 20, 0, 12;
		  jump _ZN4core3str8converts9from_utf817h6bed550b26c86389E, 1;
		  mload 2, 8, 10, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10004738;
		  mload 2, 12, 10, 32;
		  add_wrap 18, 19, 0, 18;
		  is_diff_greater_than 19, 18, 0, 11;
		  sub_wrap_with_offset 20, 10, 0, 10;
		  is_diff_greater_than 10, 18, 0, 12;
		  sub_wrap_with_offset 11, 12, 0, 11;
		  sub_wrap_with_offset 18, 10, 0, 10;
		  mstore 8, 0, 8, 10;
		  mstore 8, 0, 12, 11;
		  add_wrap 0, 0, 7, 10;
		  jump ___dot_L10004740, 32;
		___dot_L10004730:
		  mload 2, 12, 12, 32;
		  mstore 8, 0, 8, 11;
		  mstore 8, 0, 12, 12;
		  jump ___dot_L10004740, 32;
		___dot_L10004738:
		  mstore 8, 0, 12, 0;
		  mstore 8, 0, 8, 0;
		___dot_L10004740:
		  mload 8, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 16, 32;
		  add_wrap 0, 0, 1, 10;
		  mstore 8, 0, 0, 10;
		  mload 2, 44, 1, 32;
		  mload 2, 40, 8, 32;
		  mload 2, 36, 9, 32;
		  mload 2, 32, 18, 32;
		  mload 2, 28, 19, 32;
		  mload 2, 24, 20, 32;
		  add_wrap 2, 0, 48, 2;
		  jump_dyn 1, 32;
		___dot_L10004758:
		  set_reg 12, 268440696;
		  add_wrap 0, 19, 0, 10;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L1000476a:
		  set_reg 12, 268440696;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_str17h267593b3b12169eeE:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 44, 1;
		  mstore 2, 0, 40, 8;
		  mstore 2, 0, 36, 9;
		  mstore 2, 0, 32, 18;
		  mstore 2, 0, 28, 19;
		  mstore 2, 0, 24, 20;
		  add_wrap 0, 11, 0, 9;
		  mload 11, 20, 19, 32;
		  add_wrap 0, 12, 0, 18;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 2, 0, 8, 10;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 16, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 8, 11, 32;
		  add_wrap 0, 0, 16, 12;
		  branch_if_diff_nonzero 10, 12, ___dot_L100047f0;
		  branch_if_diff_greater_than 19, 11, 0, ___dot_L10004814;
		  mload 9, 16, 13, 32;
		  branch_if_diff_greater_than 11, 13, 0, ___dot_L10004826;
		  mload 9, 12, 12, 32;
		  sub_wrap_with_offset 11, 19, 0, 20;
		  add_wrap 12, 19, 0, 12;
		  mstore 9, 0, 20, 11;
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 12, 0, 11;
		  add_wrap 0, 20, 0, 12;
		  jump _ZN4core3str8converts9from_utf817h6bed550b26c86389E, 1;
		  mload 2, 8, 10, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100047f8;
		  mload 2, 12, 10, 32;
		  add_wrap 18, 19, 0, 18;
		  is_diff_greater_than 19, 18, 0, 11;
		  sub_wrap_with_offset 20, 10, 0, 10;
		  is_diff_greater_than 10, 18, 0, 12;
		  sub_wrap_with_offset 11, 12, 0, 11;
		  sub_wrap_with_offset 18, 10, 0, 10;
		  mstore 8, 0, 0, 10;
		  mstore 8, 0, 4, 11;
		  add_wrap 0, 0, 7, 10;
		  jump ___dot_L10004800, 32;
		___dot_L100047f0:
		  mload 2, 12, 12, 32;
		  mstore 8, 0, 0, 11;
		  mstore 8, 0, 4, 12;
		  jump ___dot_L10004800, 32;
		___dot_L100047f8:
		  mstore 8, 0, 4, 0;
		  mstore 8, 0, 0, 0;
		___dot_L10004800:
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  mload 2, 44, 1, 32;
		  mload 2, 40, 8, 32;
		  mload 2, 36, 9, 32;
		  mload 2, 32, 18, 32;
		  mload 2, 28, 19, 32;
		  mload 2, 24, 20, 32;
		  add_wrap 2, 0, 48, 2;
		  jump_dyn 1, 32;
		___dot_L10004814:
		  set_reg 12, 268440696;
		  add_wrap 0, 19, 0, 10;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10004826:
		  set_reg 12, 268440696;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u1617ha35118318dcfdfbdE:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 0, 2, 12;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000488e;
		  mload 2, 0, 11, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L100048a4;
		  mload 9, 16, 13, 32;
		  branch_if_diff_greater_than 11, 13, 0, ___dot_L100048b4;
		  sub_wrap_with_offset 11, 10, 0, 13;
		  add_wrap 0, 0, 2, 12;
		  branch_if_diff_nonzero 13, 12, ___dot_L100048c8;
		  mload 9, 12, 12, 32;
		  add_wrap 10, 12, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 11;
		  wrap16 12, 256, 12;
		  or 10, 12, 0, 10;
		  mload 8, 0, 32, 33;
		  set_reg 34, 0xffff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xffff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 0, 32;
		  add_wrap 0, 0, 16, 10;
		  jump ___dot_L10004896, 32;
		___dot_L1000488e:
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  mstore 8, 0, 4, 11;
		  mstore 8, 0, 0, 12;
		___dot_L10004896:
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L100048a4:
		  set_reg 12, 268440736;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L100048b4:
		  set_reg 12, 268440736;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L100048c8:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 2, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u3217hb15d897074e2b79fE:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 0, 4, 12;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_nonzero 10, 11, ___dot_L1000493e;
		  mload 2, 0, 11, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10004954;
		  mload 9, 16, 13, 32;
		  branch_if_diff_greater_than 11, 13, 0, ___dot_L10004964;
		  sub_wrap_with_offset 11, 10, 0, 13;
		  add_wrap 0, 0, 4, 12;
		  branch_if_diff_nonzero 13, 12, ___dot_L10004978;
		  mload 9, 12, 12, 32;
		  add_wrap 10, 12, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 10, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 11;
		  wrap16 13, 256, 13;
		  or 13, 14, 0, 13;
		  wrap16 10, 65536, 10;
		  wrap16 12, 65536, 32;
		  wrap16 32, 256, 12;
		  or 10, 12, 0, 10;
		  or 10, 13, 0, 10;
		  mstore 8, 0, 0, 10;
		  add_wrap 0, 0, 16, 10;
		  jump ___dot_L10004946, 32;
		___dot_L1000493e:
		  mload 2, 4, 11, 32;
		  mload 2, 0, 12, 32;
		  mstore 8, 0, 4, 11;
		  mstore 8, 0, 0, 12;
		___dot_L10004946:
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L10004954:
		  set_reg 12, 268440736;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10004964:
		  set_reg 12, 268440736;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L10004978:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 4, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		_ZN10serde_cbor2de21Deserializer$LT$R$GT$9parse_u6417h92703208ba147e1fE:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 0, 8, 12;
		  jump _ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E, 1;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 0, 16, 10;
		  branch_if_diff_nonzero 11, 10, ___dot_L10004a0c;
		  mload 2, 0, 11, 32;
		  mload 9, 20, 10, 32;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10004a22;
		  mload 9, 16, 13, 32;
		  branch_if_diff_greater_than 11, 13, 0, ___dot_L10004a32;
		  sub_wrap_with_offset 11, 10, 0, 13;
		  add_wrap 0, 0, 8, 12;
		  branch_if_diff_nonzero 13, 12, ___dot_L10004a46;
		  mload 9, 12, 12, 32;
		  add_wrap 10, 12, 0, 10;
		  mload 10, 4, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 16;
		  mload 10, 5, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 17;
		  mload 10, 7, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 5;
		  mload 10, 6, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 2, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 10, 3, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mstore 9, 0, 20, 11;
		  wrap16 13, 256, 13;
		  or 13, 14, 0, 13;
		  wrap16 10, 65536, 10;
		  wrap16 12, 65536, 32;
		  wrap16 32, 256, 12;
		  or 10, 12, 0, 10;
		  or 10, 13, 0, 10;
		  wrap16 15, 256, 15;
		  or 15, 5, 0, 11;
		  wrap16 17, 65536, 17;
		  wrap16 16, 65536, 32;
		  wrap16 32, 256, 16;
		  or 16, 17, 0, 12;
		  or 12, 11, 0, 12;
		  add_wrap 0, 0, 16, 11;
		  jump ___dot_L10004a10, 32;
		___dot_L10004a0c:
		  mload 2, 4, 10, 32;
		  mload 2, 0, 12, 32;
		___dot_L10004a10:
		  mstore 8, 0, 0, 12;
		  mstore 8, 0, 4, 10;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L10004a22:
		  set_reg 12, 268440736;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		___dot_L10004a32:
		  set_reg 12, 268440736;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		___dot_L10004a46:
		  set_reg 12, 268440752;
		  add_wrap 0, 0, 8, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE, 1;
		_ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17ha7548e9c1465f8d9E:
		  mload 10, 0, 12, 32;
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 0, 11, 0, 10;
		  branch_if_diff_equal 13, 0, 0, ___dot_L10004a8e;
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  add_wrap 12, 0, 1, 12;
		  mstore 2, 0, 8, 12;
		  set_reg 11, 268440587;
		  set_reg 14, 268439920;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 2, 0, 8, 13;
		  jump _ZN4core3fmt9Formatter25debug_tuple_field1_finish17hfdc85442d9860525E, 1;
		  mload 2, 12, 1, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		___dot_L10004a8e:
		  set_reg 11, 268440591;
		  add_wrap 0, 0, 4, 12;
		  jump _ZN4core3fmt9Formatter9write_str17hd51bf5ca43076a08E, 32;
		_ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hb9ac48a0de395922E:
		  mload 11, 28, 12, 32;
		  mload 10, 0, 10, 32;
		  and 12, 0, 16, 13;
		  branch_if_diff_nonzero 13, 0, ___dot_L10004ab8;
		  and 12, 0, 32, 12;
		  branch_if_diff_nonzero 12, 0, ___dot_L10004ac0;
		  jump _ZN4core3fmt3num3imp51_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u8$GT$3fmt17h93ec0d7ebf9ed4e6E, 32;
		___dot_L10004ab8:
		  jump _ZN4core3fmt3num52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$i8$GT$3fmt17hd250080e1f18d68aE, 32;
		___dot_L10004ac0:
		  jump _ZN4core3fmt3num52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$i8$GT$3fmt17h3eccc19cdbb6be7dE, 32;
		_ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hc839242aa0fb378cE:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mload 10, 0, 15, 32;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 15, 0, 4, 11;
		  mstore 2, 0, 24, 11;
		  set_reg 11, 268440256;
		  mstore 2, 0, 8, 11;
		  add_wrap 2, 0, 24, 11;
		  mstore 2, 0, 4, 11;
		  add_wrap 0, 0, 9, 5;
		  set_reg 11, 268440304;
		  set_reg 13, 268440335;
		  set_reg 16, 268440172;
		  set_reg 17, 268440353;
		  add_wrap 0, 0, 9, 12;
		  add_wrap 0, 0, 11, 14;
		  mstore 2, 0, 0, 5;
		  jump _ZN4core3fmt9Formatter26debug_struct_field2_finish17h3701d021ed82a04eE, 1;
		  mload 2, 28, 1, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt3num52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Debug$u20$for$u20$usize$GT$3fmt17h3f78c7ff64da6168E:
		  mload 11, 28, 12, 32;
		  and 12, 0, 16, 13;
		  branch_if_diff_nonzero 13, 0, ___dot_L10004b30;
		  and 12, 0, 32, 12;
		  branch_if_diff_nonzero 12, 0, ___dot_L10004b38;
		  jump _ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u32$GT$3fmt17h5898aa4ddbfe8fceE, 32;
		___dot_L10004b30:
		  jump _ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$i32$GT$3fmt17h2c801e0f986ccbacE, 32;
		___dot_L10004b38:
		  jump _ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$i32$GT$3fmt17h5a591c49bb207bb8E, 32;
		_ZN4core3fmt5Write10write_char17h638c1cd609c00e6cE:
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  add_wrap 0, 0, 128, 12;
		  mstore 2, 0, 8, 0;
		  branch_if_diff_greater_than 11, 12, -1, ___dot_L10004b56;
		  mload 2, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 8, 32;
		  add_wrap 0, 0, 1, 12;
		  jump ___dot_L10004bde, 32;
		___dot_L10004b56:
		  shr 11, 0, 11, 12;
		  branch_if_diff_nonzero 12, 0, ___dot_L10004b78;
		  shr 11, 0, 6, 12;
		  or 12, 0, 192, 12;
		  mload 2, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 8, 32;
		  and 11, 0, 63, 11;
		  add_wrap 11, 0, 128, 11;
		  mload 2, 9, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 9, 32;
		  add_wrap 0, 0, 2, 12;
		  jump ___dot_L10004bde, 32;
		___dot_L10004b78:
		  shr 11, 0, 16, 12;
		  branch_if_diff_nonzero 12, 0, ___dot_L10004ba8;
		  shr 11, 0, 12, 12;
		  or 12, 0, 224, 12;
		  mload 2, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 8, 32;
		  wrap16 11, 65536, 32;
		  wrap16 32, 16, 12;
		  shr 12, 0, 26, 12;
		  add_wrap 12, 0, 128, 12;
		  mload 2, 9, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 9, 32;
		  and 11, 0, 63, 11;
		  add_wrap 11, 0, 128, 11;
		  mload 2, 10, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 10, 32;
		  add_wrap 0, 0, 3, 12;
		  jump ___dot_L10004bde, 32;
		___dot_L10004ba8:
		  shr 11, 0, 18, 12;
		  or 12, 0, 240, 12;
		  mload 2, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 8, 32;
		  wrap16 11, 16384, 12;
		  shr 12, 0, 26, 12;
		  add_wrap 12, 0, 128, 12;
		  mload 2, 9, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 9, 32;
		  wrap16 11, 65536, 32;
		  wrap16 32, 16, 12;
		  shr 12, 0, 26, 12;
		  add_wrap 12, 0, 128, 12;
		  mload 2, 10, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 10, 32;
		  and 11, 0, 63, 11;
		  add_wrap 11, 0, 128, 11;
		  mload 2, 11, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 11, 32;
		  add_wrap 0, 0, 4, 12;
		___dot_L10004bde:
		  add_wrap 2, 0, 8, 11;
		  jump _ZN59_$LT$serde_dot__dot_de_dot__dot_format_dot__dot_Buf$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17h518e77b31ae91f28E, 1;
		  mload 2, 12, 1, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt5Write9write_fmt17h1a000e29a8298ccbE:
		  set_reg 12, 268440776;
		  add_wrap 0, 11, 0, 13;
		  add_wrap 0, 12, 0, 11;
		  add_wrap 0, 13, 0, 12;
		  jump _ZN4core3fmt5write17hd984f2c6cd7a2630E, 32;
		_ZN4core3ptr46drop_in_place$LT$alloc_dot__dot_vec_dot__dot_Vec$LT$u8$GT$$GT$17hb4e14f7cbf6efe3aE:
		  mload 10, 0, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10004c14;
		  mload 10, 4, 10, 32;
		  add_wrap 0, 0, 1, 12;
		  jump __rust_dealloc, 32;
		___dot_L10004c14:
		  jump_dyn 1, 32;
		_ZN4core3ptr49drop_in_place$LT$alloc_dot__dot_string_dot__dot_FromUtf8Error$GT$17h058822baa58a376fE:
		  mload 10, 0, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10004c26;
		  mload 10, 4, 10, 32;
		  add_wrap 0, 0, 1, 12;
		  jump __rust_dealloc, 32;
		___dot_L10004c26:
		  jump_dyn 1, 32;
		_ZN53_$LT$core_dot__dot_fmt_dot__dot_Error$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17h4aab3db1c6a4d518E_10004c28:
		  set_reg 13, 268439984;
		  add_wrap 0, 0, 5, 12;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core3fmt9Formatter9write_str17hd51bf5ca43076a08E, 32;
		_ZN53_$LT$core_dot__dot_fmt_dot__dot_Error$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17h4aab3db1c6a4d518E_10004c3e:
		  set_reg 13, 268440056;
		  add_wrap 0, 0, 5, 12;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core3fmt9Formatter9write_str17hd51bf5ca43076a08E, 32;
		_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17hda21e222e6e8e82eE:
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  mstore 2, 0, 4, 9;
		  add_wrap 0, 10, 0, 8;
		  mload 10, 0, 9, 32;
		  jump _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h3f03d17b943d0034E, 1;
		  mload 8, 12, 13, 32;
		  mload 8, 8, 10, 32;
		  sub_wrap_with_offset 9, 13, 0, 11;
		  branch_if_diff_greater_than 11, 10, -1, ___dot_L10004cc2;
		  mload 8, 0, 11, 32;
		  sub_wrap_with_offset 9, 10, 0, 12;
		  sub_wrap_with_offset 13, 12, 0, 13;
		  branch_if_diff_greater_than 13, 12, -1, ___dot_L10004ca4;
		  sub_wrap_with_offset 11, 9, 0, 14;
		  branch_if_diff_greater_than 13, 14, 0, ___dot_L10004ca4;
		  mload 8, 4, 11, 32;
		  wrap16 9, 8, 10;
		  add_wrap 10, 11, 0, 10;
		  wrap16 13, 8, 12;
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  mload 2, 4, 9, 32;
		  add_wrap 2, 0, 16, 2;
		  jump memcpy, 32;
		___dot_L10004ca4:
		  mload 8, 4, 13, 32;
		  sub_wrap_with_offset 11, 12, 0, 9;
		  wrap16 10, 8, 10;
		  add_wrap 13, 10, 0, 11;
		  wrap16 9, 8, 10;
		  add_wrap 10, 13, 0, 10;
		  wrap16 12, 8, 12;
		  jump memmove, 1;
		  mstore 8, 0, 8, 9;
		___dot_L10004cc2:
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  mload 2, 4, 9, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		_ZN5alloc7raw_vec11finish_grow17h16e0ac04886e9a8fE:
		  branch_if_diff_equal 11, 0, 0, ___dot_L10004d08;
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  mstore 2, 0, 4, 9;
		  mstore 2, 0, 0, 18;
		  add_wrap 0, 12, 0, 8;
		  to_signed 12, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10004d36;
		  add_wrap 0, 11, 0, 9;
		  mload 13, 4, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10004d12;
		  mload 13, 8, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10004d12;
		  mload 13, 0, 12, 32;
		  add_wrap 0, 10, 0, 18;
		  add_wrap 0, 12, 0, 10;
		  add_wrap 0, 9, 0, 12;
		  add_wrap 0, 8, 0, 13;
		  jump __rust_realloc, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 18, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10004d30;
		___dot_L10004d00:
		  add_wrap 0, 0, 0, 12;
		  mstore 10, 0, 4, 11;
		  mstore 10, 0, 8, 8;
		  jump ___dot_L10004d3c, 32;
		___dot_L10004d08:
		  mstore 10, 0, 4, 0;
		  add_wrap 0, 0, 1, 12;
		  mstore 10, 0, 0, 12;
		  jump_dyn 1, 32;
		___dot_L10004d12:
		  branch_if_diff_equal 8, 0, 0, ___dot_L10004d4a;
		  set_reg 11, 268468224;
		  add_wrap 0, 10, 0, 18;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  jump __rust_alloc, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 18, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10004d00;
		___dot_L10004d30:
		  mstore 10, 0, 4, 9;
		  mstore 10, 0, 8, 8;
		  jump ___dot_L10004d3a, 32;
		___dot_L10004d36:
		  mstore 10, 0, 4, 0;
		___dot_L10004d3a:
		  add_wrap 0, 0, 1, 12;
		___dot_L10004d3c:
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  mload 2, 4, 9, 32;
		  mload 2, 0, 18, 32;
		  add_wrap 2, 0, 16, 2;
		  mstore 10, 0, 0, 12;
		  jump_dyn 1, 32;
		___dot_L10004d4a:
		  add_wrap 0, 9, 0, 11;
		  branch_if_diff_nonzero 9, 0, ___dot_L10004d00;
		  jump ___dot_L10004d30, 32;
		_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h1e6b00757b8f2efcE:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 44, 1;
		  mstore 2, 0, 40, 8;
		  mstore 2, 0, 36, 9;
		  add_wrap 0, 10, 0, 8;
		  mload 10, 0, 10, 32;
		  add_wrap 10, 0, 1, 11;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10004dc6;
		  wrap16 10, 2, 9;
		  branch_if_diff_greater_than 11, 9, -1, ___dot_L10004dac;
		  shr 9, 0, 29, 11;
		  add_wrap 0, 0, 4, 12;
		  is_diff_greater_than 0, 11, -(1), 11;
		  branch_if_diff_greater_than 12, 9, -1, ___dot_L10004dba;
		___dot_L10004d78:
		  wrap16 9, 4, 12;
		  wrap16 11, 4, 11;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10004d8a;
		___dot_L10004d80:
		  mload 8, 4, 13, 32;
		  wrap16 10, 4, 10;
		  mstore 2, 0, 24, 13;
		  mstore 2, 0, 32, 10;
		  add_wrap 0, 0, 4, 10;
		___dot_L10004d8a:
		  mstore 2, 0, 28, 10;
		  add_wrap 2, 0, 12, 10;
		  add_wrap 2, 0, 24, 13;
		  jump _ZN5alloc7raw_vec11finish_grow17h16e0ac04886e9a8fE, 1;
		  mload 2, 12, 10, 32;
		  branch_if_diff_nonzero 10, 0, ___dot_L10004dd0;
		  mload 2, 16, 10, 32;
		  mstore 8, 0, 4, 10;
		  mstore 8, 0, 0, 9;
		  mload 2, 44, 1, 32;
		  mload 2, 40, 8, 32;
		  mload 2, 36, 9, 32;
		  add_wrap 2, 0, 48, 2;
		  jump_dyn 1, 32;
		___dot_L10004dac:
		  add_wrap 0, 11, 0, 9;
		  shr 11, 0, 29, 11;
		  add_wrap 0, 0, 4, 12;
		  is_diff_greater_than 0, 11, -(1), 11;
		  branch_if_diff_greater_than 9, 12, 0, ___dot_L10004d78;
		___dot_L10004dba:
		  add_wrap 0, 0, 4, 9;
		  wrap16 9, 4, 12;
		  wrap16 11, 4, 11;
		  branch_if_diff_nonzero 10, 0, ___dot_L10004d80;
		  jump ___dot_L10004d8a, 32;
		___dot_L10004dc6:
		  add_wrap 0, 0, 0, 10;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		___dot_L10004dd0:
		  mload 2, 16, 10, 32;
		  mload 2, 20, 11, 32;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h3f03d17b943d0034E:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 44, 1;
		  mstore 2, 0, 40, 8;
		  mstore 2, 0, 36, 9;
		  add_wrap 0, 10, 0, 8;
		  mload 10, 0, 10, 32;
		  add_wrap 10, 0, 1, 9;
		  branch_if_diff_equal 9, 0, 0, ___dot_L10004e52;
		  to_signed 0, 32;
		  to_signed 10, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10004e34;
		  shr 9, 0, 28, 11;
		  add_wrap 0, 0, 4, 12;
		  is_diff_greater_than 0, 11, -(1), 11;
		  branch_if_diff_greater_than 12, 9, -1, ___dot_L10004e46;
		___dot_L10004e00:
		  wrap16 9, 8, 12;
		  wrap16 11, 8, 11;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10004e12;
		___dot_L10004e08:
		  mload 8, 4, 13, 32;
		  wrap16 10, 8, 10;
		  mstore 2, 0, 24, 13;
		  mstore 2, 0, 32, 10;
		  add_wrap 0, 0, 8, 10;
		___dot_L10004e12:
		  mstore 2, 0, 28, 10;
		  add_wrap 2, 0, 12, 10;
		  add_wrap 2, 0, 24, 13;
		  jump _ZN5alloc7raw_vec11finish_grow17h16e0ac04886e9a8fE, 1;
		  mload 2, 12, 10, 32;
		  branch_if_diff_nonzero 10, 0, ___dot_L10004e5c;
		  mload 2, 16, 10, 32;
		  mstore 8, 0, 4, 10;
		  mstore 8, 0, 0, 9;
		  mload 2, 44, 1, 32;
		  mload 2, 40, 8, 32;
		  mload 2, 36, 9, 32;
		  add_wrap 2, 0, 48, 2;
		  jump_dyn 1, 32;
		___dot_L10004e34:
		  wrap16 10, 2, 9;
		  shr 9, 0, 28, 11;
		  add_wrap 0, 0, 4, 12;
		  is_diff_greater_than 0, 11, -(1), 11;
		  branch_if_diff_greater_than 9, 12, 0, ___dot_L10004e00;
		___dot_L10004e46:
		  add_wrap 0, 0, 4, 9;
		  wrap16 9, 8, 12;
		  wrap16 11, 8, 11;
		  branch_if_diff_nonzero 10, 0, ___dot_L10004e08;
		  jump ___dot_L10004e12, 32;
		___dot_L10004e52:
		  add_wrap 0, 0, 0, 10;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		___dot_L10004e5c:
		  mload 2, 16, 10, 32;
		  mload 2, 20, 11, 32;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		_ZN5serde2de7Visitor10visit_i12817h94aba450bd7f8cb0E:
		  add_wrap 2, 0, 4294967152, 2;
		  mstore 2, 0, 140, 1;
		  mstore 2, 0, 136, 8;
		  mstore 2, 0, 132, 9;
		  mstore 2, 0, 128, 18;
		  add_wrap 0, 10, 0, 8;
		  mstore 2, 0, 12, 14;
		  mstore 2, 0, 8, 13;
		  mstore 2, 0, 4, 12;
		  mstore 2, 0, 0, 11;
		  add_wrap 2, 0, 22, 18;
		  add_wrap 2, 0, 22, 10;
		  add_wrap 0, 0, 58, 12;
		  add_wrap 0, 0, 58, 9;
		  add_wrap 0, 0, 0, 11;
		  jump memset, 1;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 88, 0;
		  add_wrap 0, 2, 0, 10;
		  mstore 2, 0, 116, 10;
		  load_label 10, _ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$i128$GT$3fmt17h0486ee993b4810b9E;
		  mstore 2, 0, 120, 10;
		  set_reg 10, 268440008;
		  mstore 2, 0, 92, 10;
		  add_wrap 0, 0, 2, 10;
		  mstore 2, 0, 96, 10;
		  mstore 2, 0, 108, 0;
		  add_wrap 2, 0, 116, 10;
		  mstore 2, 0, 100, 10;
		  add_wrap 0, 0, 1, 9;
		  mstore 2, 0, 104, 9;
		  set_reg 11, 268440776;
		  add_wrap 2, 0, 80, 10;
		  add_wrap 2, 0, 92, 12;
		  jump _ZN4core3fmt5write17hd984f2c6cd7a2630E, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L10004efc;
		  add_wrap 2, 0, 80, 10;
		  jump _ZN5serde2de6format3Buf6as_str17h694cd4e9c4a7c71cE, 1;
		  mstore 8, 0, 12, 0;
		  mstore 8, 0, 8, 0;
		  mload 8, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 16, 32;
		  mstore 8, 0, 0, 9;
		  mload 2, 140, 1, 32;
		  mload 2, 136, 8, 32;
		  mload 2, 132, 9, 32;
		  mload 2, 128, 18, 32;
		  add_wrap 2, 0, 144, 2;
		  jump_dyn 1, 32;
		___dot_L10004efc:
		  set_reg 10, 268439772;
		  set_reg 13, 268440024;
		  set_reg 14, 268440156;
		  add_wrap 0, 0, 43, 11;
		  add_wrap 2, 0, 127, 12;
		  jump _ZN4core6result13unwrap_failed17h94b6a44ffee5119cE, 1;
		_ZN5serde2de7Visitor10visit_i12817hae8b92e3ba64fb5aE:
		  add_wrap 2, 0, 4294967152, 2;
		  mstore 2, 0, 140, 1;
		  mstore 2, 0, 136, 8;
		  mstore 2, 0, 132, 9;
		  mstore 2, 0, 128, 18;
		  add_wrap 0, 10, 0, 8;
		  mstore 2, 0, 12, 14;
		  mstore 2, 0, 8, 13;
		  mstore 2, 0, 4, 12;
		  mstore 2, 0, 0, 11;
		  add_wrap 2, 0, 22, 18;
		  add_wrap 2, 0, 22, 10;
		  add_wrap 0, 0, 58, 12;
		  add_wrap 0, 0, 58, 9;
		  add_wrap 0, 0, 0, 11;
		  jump memset, 1;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 88, 0;
		  add_wrap 0, 2, 0, 10;
		  mstore 2, 0, 116, 10;
		  load_label 10, _ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$i128$GT$3fmt17h0486ee993b4810b9E;
		  mstore 2, 0, 120, 10;
		  set_reg 10, 268440008;
		  mstore 2, 0, 92, 10;
		  add_wrap 0, 0, 2, 10;
		  mstore 2, 0, 96, 10;
		  mstore 2, 0, 108, 0;
		  add_wrap 2, 0, 116, 10;
		  mstore 2, 0, 100, 10;
		  add_wrap 0, 0, 1, 10;
		  mstore 2, 0, 104, 10;
		  set_reg 11, 268440776;
		  add_wrap 2, 0, 80, 10;
		  add_wrap 2, 0, 92, 12;
		  jump _ZN4core3fmt5write17hd984f2c6cd7a2630E, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L10004fb6;
		  add_wrap 2, 0, 80, 10;
		  jump _ZN5serde2de6format3Buf6as_str17h694cd4e9c4a7c71cE, 1;
		  mstore 8, 0, 4, 0;
		  mstore 8, 0, 0, 0;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  mload 2, 140, 1, 32;
		  mload 2, 136, 8, 32;
		  mload 2, 132, 9, 32;
		  mload 2, 128, 18, 32;
		  add_wrap 2, 0, 144, 2;
		  jump_dyn 1, 32;
		___dot_L10004fb6:
		  set_reg 10, 268439772;
		  set_reg 13, 268440024;
		  set_reg 14, 268440156;
		  add_wrap 0, 0, 43, 11;
		  add_wrap 2, 0, 127, 12;
		  jump _ZN4core6result13unwrap_failed17h94b6a44ffee5119cE, 1;
		_ZN60_$LT$alloc_dot__dot_string_dot__dot_String$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17hdf1c67ef114446a0E:
		  mload 10, 4, 12, 32;
		  mload 10, 8, 13, 32;
		  add_wrap 0, 11, 0, 14;
		  add_wrap 0, 12, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  add_wrap 0, 14, 0, 12;
		  jump _ZN42_$LT$str$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17hfa21afe89ad9f42eE, 32;
		_ZN65_$LT$alloc_dot__dot_string_dot__dot_FromUtf8Error$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17ha97fac1952d45796E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  add_wrap 0, 11, 0, 5;
		  add_wrap 0, 10, 0, 15;
		  add_wrap 10, 0, 12, 10;
		  mstore 2, 0, 24, 10;
		  set_reg 10, 268440528;
		  mstore 2, 0, 8, 10;
		  add_wrap 2, 0, 24, 10;
		  mstore 2, 0, 4, 10;
		  add_wrap 0, 0, 5, 10;
		  set_reg 11, 268440560;
		  set_reg 13, 268440573;
		  set_reg 16, 268440464;
		  set_reg 17, 268440578;
		  add_wrap 0, 0, 13, 12;
		  add_wrap 0, 0, 5, 14;
		  mstore 2, 0, 0, 10;
		  add_wrap 0, 5, 0, 10;
		  jump _ZN4core3fmt9Formatter26debug_struct_field2_finish17h3701d021ed82a04eE, 1;
		  mload 2, 28, 1, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		_ZN65_$LT$alloc_dot__dot_vec_dot__dot_Vec$LT$T$C$A$GT$$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17h32265791bbe14784E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mstore 2, 0, 16, 18;
		  mstore 2, 0, 12, 19;
		  mload 10, 4, 8, 32;
		  mload 10, 8, 9, 32;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN4core3fmt9Formatter10debug_list17h0e7435b302bef3d6E, 1;
		  branch_if_diff_equal 9, 0, 0, ___dot_L10005082;
		  set_reg 18, 268439920;
		___dot_L10005068:
		  add_wrap 8, 0, 1, 19;
		  mstore 2, 0, 8, 8;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 2, 0, 8, 11;
		  add_wrap 0, 18, 0, 12;
		  jump _ZN4core3fmt8builders8DebugSet5entry17h708f2533bb55ba5dE, 1;
		  add_wrap 9, 0, 4294967295, 9;
		  add_wrap 0, 19, 0, 8;
		  branch_if_diff_nonzero 9, 0, ___dot_L10005068;
		___dot_L10005082:
		  add_wrap 0, 2, 0, 10;
		  jump _ZN4core3fmt8builders9DebugList6finish17h9c9985aa60f305f9E, 1;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  mload 2, 16, 18, 32;
		  mload 2, 12, 19, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		main:
		  add_wrap 2, 0, 4294967152, 2;
		  mstore 2, 0, 140, 1;
		  mstore 2, 0, 136, 8;
		  mstore 2, 0, 132, 9;
		  mstore 2, 0, 128, 18;
		  mstore 2, 0, 124, 19;
		  mstore 2, 0, 120, 20;
		  mstore 2, 0, 116, 21;
		  mstore 2, 0, 112, 22;
		  mstore 2, 0, 108, 23;
		  add_wrap 0, 0, 1, 8;
		  add_wrap 0, 0, 1, 10;
		  add_wrap 0, 0, 1, 5;
		  add_wrap 0, 0, 0, 11;
		  add_wrap 2, 0, -4, 2;
		  mstore 2, 0, 0, 1;
		  jump __ecall_handler, 1;
		  mload 2, 0, 1, 32;
		  add_wrap 2, 0, 4, 2;
		  add_wrap 0, 10, 0, 21;
		  wrap16 10, 4, 18;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100050e0;
		  shr 21, 0, 29, 10;
		  branch_if_diff_nonzero 10, 0, ___dot_L1000536c;
		  add_wrap 0, 0, 4, 11;
		  add_wrap 0, 0, 4, 19;
		  add_wrap 0, 18, 0, 10;
		  jump __rust_alloc, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L1000536e;
		  add_wrap 0, 10, 0, 20;
		  jump ___dot_L100050e2, 32;
		___dot_L100050e0:
		  add_wrap 0, 0, 4, 20;
		___dot_L100050e2:
		  add_wrap 0, 0, 1, 10;
		  add_wrap 0, 20, 0, 11;
		  add_wrap 0, 21, 0, 12;
		  jump _ZN19powdr_riscv_runtime2io10read_slice17hd886ab3adeac2eefE, 1;
		  shr 18, 0, 2, 19;
		  branch_if_diff_equal 21, 0, 0, ___dot_L1000513c;
		  set_reg 10, 268468224;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 19, 0, 10;
		  jump __rust_alloc, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L1000537a;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 0, 0, 9;
		  add_wrap 0, 18, 0, 10;
		  add_wrap 0, 20, 0, 11;
		___dot_L10005118:
		  mload 11, 0, 12, 32;
		  add_wrap 11, 0, 4, 11;
		  add_wrap 8, 9, 0, 13;
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		  add_wrap 10, 0, 4294967292, 10;
		  add_wrap 9, 0, 1, 9;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005118;
		  wrap16 21, 4, 11;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 20, 0, 10;
		  jump __rust_dealloc, 1;
		  jump ___dot_L1000513e, 32;
		___dot_L1000513c:
		  add_wrap 0, 0, 0, 9;
		___dot_L1000513e:
		  set_reg 10, 16842752;
		  add_wrap 10, 0, 257, 21;
		  mstore 2, 0, 40, 0;
		  add_wrap 0, 0, 1, 10;
		  mstore 2, 0, 44, 10;
		  mstore 2, 0, 48, 0;
		  mstore 2, 0, 52, 8;
		  mstore 2, 0, 56, 9;
		  mstore 2, 0, 60, 0;
		  add_wrap 0, 0, 128, 10;
		  mload 2, 68, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 68, 32;
		  mstore 2, 0, 64, 21;
		  add_wrap 2, 0, 80, 10;
		  add_wrap 2, 0, 40, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h8ca9c55904813e5aE, 1;
		  mload 2, 80, 10, 32;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005362;
		  mload 2, 84, 23, 32;
		  mload 2, 60, 10, 32;
		  mload 2, 56, 11, 32;
		  mload 2, 88, 22, 32;
		  branch_if_diff_greater_than 11, 10, 0, ___dot_L10005386;
		  mload 2, 40, 11, 32;
		  mload 2, 92, 9, 32;
		  add_wrap 18, 20, 0, 18;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10005190;
		  mload 2, 44, 10, 32;
		  add_wrap 0, 0, 1, 12;
		  jump __rust_dealloc, 1;
		___dot_L10005190:
		  mstore 2, 0, 4, 23;
		  mstore 2, 0, 8, 22;
		  mstore 2, 0, 12, 9;
		  branch_if_diff_equal 20, 18, 0, ___dot_L100051a8;
		  add_wrap 0, 0, 1, 12;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 19, 0, 11;
		  jump __rust_dealloc, 1;
		___dot_L100051a8:
		  add_wrap 0, 0, 1, 8;
		  add_wrap 0, 0, 2, 10;
		  add_wrap 0, 0, 1, 5;
		  add_wrap 0, 0, 0, 11;
		  add_wrap 2, 0, -4, 2;
		  mstore 2, 0, 0, 1;
		  jump __ecall_handler, 1;
		  mload 2, 0, 1, 32;
		  add_wrap 2, 0, 4, 2;
		  add_wrap 0, 10, 0, 22;
		  wrap16 10, 4, 18;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100051da;
		  shr 22, 0, 29, 10;
		  branch_if_diff_nonzero 10, 0, ___dot_L1000536c;
		  add_wrap 0, 0, 4, 11;
		  add_wrap 0, 0, 4, 19;
		  add_wrap 0, 18, 0, 10;
		  jump __rust_alloc, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L1000536e;
		  add_wrap 0, 10, 0, 20;
		  jump ___dot_L100051dc, 32;
		___dot_L100051da:
		  add_wrap 0, 0, 4, 20;
		___dot_L100051dc:
		  add_wrap 0, 0, 2, 10;
		  add_wrap 0, 20, 0, 11;
		  add_wrap 0, 22, 0, 12;
		  jump _ZN19powdr_riscv_runtime2io10read_slice17hd886ab3adeac2eefE, 1;
		  shr 18, 0, 2, 19;
		  branch_if_diff_equal 22, 0, 0, ___dot_L10005236;
		  set_reg 10, 268468224;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 19, 0, 10;
		  jump __rust_alloc, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L1000537a;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 0, 0, 9;
		  add_wrap 0, 18, 0, 10;
		  add_wrap 0, 20, 0, 11;
		___dot_L10005212:
		  mload 11, 0, 12, 32;
		  add_wrap 11, 0, 4, 11;
		  add_wrap 8, 9, 0, 13;
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		  add_wrap 10, 0, 4294967292, 10;
		  add_wrap 9, 0, 1, 9;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005212;
		  wrap16 22, 4, 11;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 20, 0, 10;
		  jump __rust_dealloc, 1;
		  jump ___dot_L10005238, 32;
		___dot_L10005236:
		  add_wrap 0, 0, 0, 9;
		___dot_L10005238:
		  mstore 2, 0, 40, 0;
		  add_wrap 0, 0, 1, 10;
		  mstore 2, 0, 44, 10;
		  mstore 2, 0, 48, 0;
		  mstore 2, 0, 52, 8;
		  mstore 2, 0, 56, 9;
		  mstore 2, 0, 60, 0;
		  add_wrap 0, 0, 128, 10;
		  mload 2, 68, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 68, 32;
		  mstore 2, 0, 64, 21;
		  add_wrap 2, 0, 80, 10;
		  add_wrap 2, 0, 40, 11;
		  jump _ZN10serde_cbor2de21Deserializer$LT$R$GT$11parse_value17h38db1b707792fc5bE, 1;
		  mload 2, 80, 10, 32;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005362;
		  mload 2, 84, 22, 32;
		  mload 2, 88, 21, 32;
		  mload 2, 92, 9, 32;
		  mload 2, 96, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 23;
		  mload 2, 98, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 97, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 2, 99, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 2, 60, 10, 32;
		  mload 2, 56, 14, 32;
		  wrap16 11, 256, 11;
		  or 11, 12, 0, 11;
		  mload 2, 78, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 78, 32;
		  mload 2, 76, 32, 33;
		  set_reg 34, 0xffff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xffff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 76, 32;
		  branch_if_diff_greater_than 14, 10, 0, ___dot_L1000539c;
		  mload 2, 78, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 76, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_16_bits 32, 12;
		  mload 2, 40, 11, 32;
		  add_wrap 18, 20, 0, 18;
		  mload 2, 82, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 82, 32;
		  mload 2, 80, 32, 33;
		  set_reg 34, 0xffff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xffff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 80, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L100052ae;
		  mload 2, 44, 10, 32;
		  add_wrap 0, 0, 1, 12;
		  jump __rust_dealloc, 1;
		___dot_L100052ae:
		  mstore 2, 0, 16, 22;
		  mstore 2, 0, 24, 9;
		  mstore 2, 0, 20, 21;
		  mload 2, 80, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 81, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 2, 82, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 2, 28, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 23, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 28, 32;
		  mload 2, 29, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 29, 32;
		  mload 2, 30, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 30, 32;
		  mload 2, 31, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 31, 32;
		  branch_if_diff_equal 20, 18, 0, ___dot_L100052e2;
		  add_wrap 0, 0, 1, 12;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 19, 0, 11;
		  jump __rust_dealloc, 1;
		___dot_L100052e2:
		  add_wrap 2, 0, 40, 10;
		  add_wrap 2, 0, 4, 11;
		  add_wrap 2, 0, 16, 12;
		  jump _ZN21brainfuck_interpreter3run17h3884830cc1905307E, 1;
		  mload 2, 48, 18, 32;
		  mload 2, 52, 9, 32;
		  mload 2, 56, 8, 32;
		  add_wrap 2, 0, 40, 10;
		  add_wrap 0, 9, 0, 11;
		  add_wrap 0, 8, 0, 12;
		  jump _ZN4core3str8converts9from_utf817h6bed550b26c86389E, 1;
		  mload 2, 40, 10, 32;
		  branch_if_diff_nonzero 10, 0, ___dot_L100053f8;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 88, 8;
		  add_wrap 2, 0, 80, 10;
		  mstore 2, 0, 32, 10;
		  load_label 10, _ZN60_$LT$alloc_dot__dot_string_dot__dot_String$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17hdf1c67ef114446a0E;
		  mstore 2, 0, 36, 10;
		  set_reg 10, 268440900;
		  mstore 2, 0, 40, 10;
		  add_wrap 0, 0, 1, 10;
		  mstore 2, 0, 44, 10;
		  mstore 2, 0, 56, 0;
		  add_wrap 2, 0, 32, 11;
		  mstore 2, 0, 48, 11;
		  mstore 2, 0, 52, 10;
		  add_wrap 2, 0, 40, 10;
		  jump _ZN19powdr_riscv_runtime3fmt10print_args17h75ab992f2ca9ebc8E, 1;
		  mload 2, 80, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000534c;
		  mload 2, 84, 10, 32;
		  add_wrap 0, 0, 1, 12;
		  jump __rust_dealloc, 1;
		___dot_L1000534c:
		  mload 2, 140, 1, 32;
		  mload 2, 136, 8, 32;
		  mload 2, 132, 9, 32;
		  mload 2, 128, 18, 32;
		  mload 2, 124, 19, 32;
		  mload 2, 120, 20, 32;
		  mload 2, 116, 21, 32;
		  mload 2, 112, 22, 32;
		  mload 2, 108, 23, 32;
		  add_wrap 2, 0, 144, 2;
		  jump_dyn 1, 32;
		___dot_L10005362:
		  mload 2, 92, 9, 32;
		  mload 2, 88, 8, 32;
		  mload 2, 96, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 18;
		  jump ___dot_L100053ba, 32;
		___dot_L1000536c:
		  add_wrap 0, 0, 0, 19;
		___dot_L1000536e:
		  add_wrap 0, 19, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		___dot_L1000537a:
		  add_wrap 0, 0, 1, 10;
		  add_wrap 0, 19, 0, 11;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		___dot_L10005386:
		  add_wrap 10, 0, 1, 8;
		  mstore 2, 0, 60, 8;
		  add_wrap 0, 0, 10, 18;
		  branch_if_diff_equal 23, 0, 0, ___dot_L100053b8;
		  wrap16 23, 4, 11;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 22, 0, 10;
		  jump ___dot_L100053b0, 32;
		___dot_L1000539c:
		  add_wrap 10, 0, 1, 8;
		  mstore 2, 0, 60, 8;
		  add_wrap 0, 0, 10, 18;
		  branch_if_diff_equal 22, 0, 0, ___dot_L100053b8;
		  wrap16 22, 8, 11;
		  add_wrap 0, 0, 8, 12;
		  add_wrap 0, 21, 0, 10;
		___dot_L100053b0:
		  jump __rust_dealloc, 1;
		___dot_L100053b8:
		  add_wrap 0, 0, 0, 9;
		___dot_L100053ba:
		  mload 2, 40, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L100053ca;
		  mload 2, 44, 10, 32;
		  add_wrap 0, 0, 1, 12;
		  jump __rust_dealloc, 1;
		___dot_L100053ca:
		  mstore 2, 0, 44, 9;
		  mstore 2, 0, 40, 8;
		  mload 2, 48, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 18, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 48, 32;
		  set_reg 10, 268439772;
		  set_reg 13, 268439700;
		  set_reg 14, 268439904;
		  add_wrap 0, 0, 43, 11;
		  add_wrap 2, 0, 40, 12;
		  jump _ZN4core6result13unwrap_failed17h94b6a44ffee5119cE, 1;
		___dot_L100053f8:
		  mload 2, 44, 10, 32;
		  mload 2, 48, 11, 32;
		  mstore 2, 0, 40, 18;
		  mstore 2, 0, 44, 9;
		  mstore 2, 0, 48, 8;
		  mstore 2, 0, 52, 10;
		  mstore 2, 0, 56, 11;
		  set_reg 10, 268439772;
		  set_reg 13, 268440908;
		  set_reg 14, 268441072;
		  add_wrap 0, 0, 43, 11;
		  add_wrap 2, 0, 40, 12;
		  jump _ZN4core6result13unwrap_failed17h94b6a44ffee5119cE, 1;
		__rust_alloc_error_handler:
		  jump __rg_oom, 32;
		_ZN5alloc7raw_vec11finish_grow17hbc1bffeffa9452baE:
		  branch_if_diff_equal 11, 0, 0, ___dot_L10005470;
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  mstore 2, 0, 4, 9;
		  mstore 2, 0, 0, 18;
		  add_wrap 0, 12, 0, 8;
		  to_signed 12, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L1000549e;
		  add_wrap 0, 11, 0, 9;
		  mload 13, 4, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000547a;
		  mload 13, 8, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000547a;
		  mload 13, 0, 12, 32;
		  add_wrap 0, 10, 0, 18;
		  add_wrap 0, 12, 0, 10;
		  add_wrap 0, 9, 0, 12;
		  add_wrap 0, 8, 0, 13;
		  jump __rust_realloc, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 18, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10005498;
		___dot_L10005468:
		  add_wrap 0, 0, 0, 12;
		  mstore 10, 0, 4, 11;
		  mstore 10, 0, 8, 8;
		  jump ___dot_L100054a4, 32;
		___dot_L10005470:
		  mstore 10, 0, 4, 0;
		  add_wrap 0, 0, 1, 12;
		  mstore 10, 0, 0, 12;
		  jump_dyn 1, 32;
		___dot_L1000547a:
		  branch_if_diff_equal 8, 0, 0, ___dot_L100054b2;
		  set_reg 11, 268468224;
		  add_wrap 0, 10, 0, 18;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  jump __rust_alloc, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 18, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10005468;
		___dot_L10005498:
		  mstore 10, 0, 4, 9;
		  mstore 10, 0, 8, 8;
		  jump ___dot_L100054a2, 32;
		___dot_L1000549e:
		  mstore 10, 0, 4, 0;
		___dot_L100054a2:
		  add_wrap 0, 0, 1, 12;
		___dot_L100054a4:
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  mload 2, 4, 9, 32;
		  mload 2, 0, 18, 32;
		  add_wrap 2, 0, 16, 2;
		  mstore 10, 0, 0, 12;
		  jump_dyn 1, 32;
		___dot_L100054b2:
		  add_wrap 0, 9, 0, 11;
		  branch_if_diff_nonzero 9, 0, ___dot_L10005468;
		  jump ___dot_L10005498, 32;
		_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h324d38dbee69d750E:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 44, 1;
		  mstore 2, 0, 40, 8;
		  mstore 2, 0, 36, 9;
		  add_wrap 0, 10, 0, 8;
		  mload 10, 0, 10, 32;
		  add_wrap 10, 0, 1, 9;
		  branch_if_diff_equal 9, 0, 0, ___dot_L1000551e;
		  to_signed 0, 32;
		  to_signed 10, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10005508;
		  add_wrap 0, 0, 8, 11;
		  branch_if_diff_greater_than 11, 9, -1, ___dot_L10005512;
		___dot_L100054d4:
		  xor 9, 0, 4294967295, 11;
		  shr 11, 0, 31, 11;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100054e4;
		___dot_L100054dc:
		  mload 8, 4, 12, 32;
		  mstore 2, 0, 24, 12;
		  mstore 2, 0, 32, 10;
		  add_wrap 0, 0, 1, 10;
		___dot_L100054e4:
		  mstore 2, 0, 28, 10;
		  add_wrap 2, 0, 12, 10;
		  add_wrap 2, 0, 24, 13;
		  add_wrap 0, 9, 0, 12;
		  jump _ZN5alloc7raw_vec11finish_grow17hbc1bffeffa9452baE, 1;
		  mload 2, 12, 10, 32;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005528;
		  mload 2, 16, 10, 32;
		  mstore 8, 0, 4, 10;
		  mstore 8, 0, 0, 9;
		  mload 2, 44, 1, 32;
		  mload 2, 40, 8, 32;
		  mload 2, 36, 9, 32;
		  add_wrap 2, 0, 48, 2;
		  jump_dyn 1, 32;
		___dot_L10005508:
		  wrap16 10, 2, 9;
		  add_wrap 0, 0, 8, 11;
		  branch_if_diff_greater_than 9, 11, 0, ___dot_L100054d4;
		___dot_L10005512:
		  add_wrap 0, 0, 8, 9;
		  xor 9, 0, 4294967295, 11;
		  shr 11, 0, 31, 11;
		  branch_if_diff_nonzero 10, 0, ___dot_L100054dc;
		  jump ___dot_L100054e4, 32;
		___dot_L1000551e:
		  add_wrap 0, 0, 0, 10;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		___dot_L10005528:
		  mload 2, 16, 10, 32;
		  mload 2, 20, 11, 32;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h39b9a8b984fd7914E:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 44, 1;
		  mstore 2, 0, 40, 8;
		  mstore 2, 0, 36, 9;
		  add_wrap 0, 10, 0, 8;
		  mload 10, 0, 10, 32;
		  add_wrap 10, 0, 1, 9;
		  branch_if_diff_equal 9, 0, 0, ___dot_L100055aa;
		  to_signed 0, 32;
		  to_signed 10, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L1000558c;
		  shr 9, 0, 29, 11;
		  add_wrap 0, 0, 4, 12;
		  is_diff_greater_than 0, 11, -(1), 11;
		  branch_if_diff_greater_than 12, 9, -1, ___dot_L1000559e;
		___dot_L10005558:
		  wrap16 9, 4, 12;
		  wrap16 11, 4, 11;
		  branch_if_diff_equal 10, 0, 0, ___dot_L1000556a;
		___dot_L10005560:
		  mload 8, 4, 13, 32;
		  wrap16 10, 4, 10;
		  mstore 2, 0, 24, 13;
		  mstore 2, 0, 32, 10;
		  add_wrap 0, 0, 4, 10;
		___dot_L1000556a:
		  mstore 2, 0, 28, 10;
		  add_wrap 2, 0, 12, 10;
		  add_wrap 2, 0, 24, 13;
		  jump _ZN5alloc7raw_vec11finish_grow17hbc1bffeffa9452baE, 1;
		  mload 2, 12, 10, 32;
		  branch_if_diff_nonzero 10, 0, ___dot_L100055b4;
		  mload 2, 16, 10, 32;
		  mstore 8, 0, 4, 10;
		  mstore 8, 0, 0, 9;
		  mload 2, 44, 1, 32;
		  mload 2, 40, 8, 32;
		  mload 2, 36, 9, 32;
		  add_wrap 2, 0, 48, 2;
		  jump_dyn 1, 32;
		___dot_L1000558c:
		  wrap16 10, 2, 9;
		  shr 9, 0, 29, 11;
		  add_wrap 0, 0, 4, 12;
		  is_diff_greater_than 0, 11, -(1), 11;
		  branch_if_diff_greater_than 9, 12, 0, ___dot_L10005558;
		___dot_L1000559e:
		  add_wrap 0, 0, 4, 9;
		  wrap16 9, 4, 12;
		  wrap16 11, 4, 11;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005560;
		  jump ___dot_L1000556a, 32;
		___dot_L100055aa:
		  add_wrap 0, 0, 0, 10;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		___dot_L100055b4:
		  mload 2, 16, 10, 32;
		  mload 2, 20, 11, 32;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		_ZN21brainfuck_interpreter3run17h3884830cc1905307E:
		  add_wrap 2, 0, 4294967184, 2;
		  mstore 2, 0, 108, 1;
		  mstore 2, 0, 104, 8;
		  mstore 2, 0, 100, 9;
		  mstore 2, 0, 96, 18;
		  mstore 2, 0, 92, 19;
		  mstore 2, 0, 88, 20;
		  mstore 2, 0, 84, 21;
		  mstore 2, 0, 80, 22;
		  mstore 2, 0, 76, 23;
		  mstore 2, 0, 72, 24;
		  mstore 2, 0, 68, 25;
		  mstore 2, 0, 64, 26;
		  mstore 2, 0, 60, 27;
		  add_wrap 0, 12, 0, 19;
		  add_wrap 0, 11, 0, 18;
		  add_wrap 0, 10, 0, 9;
		  mstore 2, 0, 36, 0;
		  add_wrap 0, 0, 4, 10;
		  mstore 2, 0, 40, 10;
		  mstore 2, 0, 44, 0;
		  set_reg 10, 241664;
		  add_wrap 10, 0, 4294965632, 8;
		  add_wrap 0, 0, 8, 11;
		  add_wrap 0, 8, 0, 10;
		  jump __rust_alloc, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L1000591c;
		  add_wrap 0, 10, 0, 21;
		  mstore 2, 0, 12, 9;
		  mload 18, 8, 24, 32;
		  mstore 2, 0, 48, 0;
		  add_wrap 0, 0, 1, 10;
		  mstore 2, 0, 52, 10;
		  mstore 2, 0, 56, 0;
		  branch_if_diff_equal 24, 0, 0, ___dot_L10005928;
		  add_wrap 0, 0, 0, 26;
		  add_wrap 0, 0, 0, 8;
		  add_wrap 0, 0, 0, 23;
		  add_wrap 0, 0, 0, 9;
		  add_wrap 0, 0, 0, 25;
		  mstore 2, 0, 8, 18;
		  mload 18, 4, 22, 32;
		  mload 19, 0, 10, 32;
		  mstore 2, 0, 24, 10;
		  mload 19, 4, 10, 32;
		  mstore 2, 0, 20, 10;
		  mload 19, 12, 18, 32;
		  mstore 2, 0, 28, 19;
		  mload 19, 8, 10, 32;
		  mstore 2, 0, 32, 10;
		  add_wrap 22, 0, 4, 10;
		  mstore 2, 0, 16, 10;
		  add_wrap 0, 0, 4, 6;
		  add_wrap 0, 0, 50, 15;
		  set_reg 14, 268441132;
		  add_wrap 0, 0, 1874, 17;
		  add_wrap 0, 0, 91, 27;
		  add_wrap 0, 0, 93, 5;
		  jump ___dot_L10005670, 32;
		___dot_L10005660:
		  add_wrap 23, 0, 1, 23;
		___dot_L10005662:
		  add_wrap 9, 0, 1, 9;
		  is_diff_greater_than 0, 9, -(1), 10;
		  add_wrap 8, 0, 1, 8;
		  add_wrap 25, 10, 0, 25;
		  branch_if_diff_greater_than 8, 24, -1, ___dot_L1000592a;
		___dot_L10005670:
		  wrap16 8, 4, 11;
		  add_wrap 22, 11, 0, 10;
		  mload 10, 0, 10, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100057f8;
		  add_wrap 10, 0, 4294967253, 10;
		  branch_if_diff_greater_than 10, 15, 0, ___dot_L10005662;
		  wrap16 10, 4, 10;
		  add_wrap 10, 14, 0, 10;
		  mload 10, 0, 10, 32;
		  jump_dyn 10, 32;
		___dot_L1000568e:
		  shr 23, 0, 4, 10;
		  branch_if_diff_greater_than 10, 17, 0, ___dot_L100058dc;
		  wrap16 23, 8, 10;
		  add_wrap 10, 21, 0, 10;
		  mload 10, 0, 11, 32;
		  mload 10, 4, 12, 32;
		  add_wrap 11, 0, 1, 11;
		  is_diff_greater_than 0, 11, -(1), 13;
		  add_wrap 12, 13, 0, 12;
		  jump ___dot_L1000575c, 32;
		___dot_L100056aa:
		  branch_if_diff_equal 18, 0, 0, ___dot_L100057b8;
		  mload 2, 32, 13, 32;
		  add_wrap 13, 0, 1, 10;
		  mload 2, 24, 12, 32;
		  is_diff_greater_than 12, 10, 0, 11;
		  add_wrap 11, 0, 4294967295, 11;
		  and 11, 12, 0, 11;
		  wrap16 13, 8, 12;
		  sub_wrap_with_offset 10, 11, 0, 13;
		  mload 2, 20, 10, 32;
		  add_wrap 12, 10, 0, 12;
		  mload 12, 4, 11, 32;
		  mload 12, 0, 10, 32;
		  mload 2, 28, 12, 32;
		  mstore 12, 0, 8, 13;
		  add_wrap 18, 0, 4294967295, 18;
		  mstore 12, 0, 12, 18;
		  mstore 2, 0, 32, 13;
		  shr 23, 0, 4, 12;
		  branch_if_diff_greater_than 17, 12, -1, ___dot_L100057c4;
		  jump ___dot_L100058c4, 32;
		___dot_L100056e4:
		  shr 23, 0, 4, 10;
		  branch_if_diff_greater_than 10, 17, 0, ___dot_L10005904;
		  wrap16 23, 8, 10;
		  add_wrap 10, 21, 0, 10;
		  mload 10, 4, 12, 32;
		  mload 10, 0, 10, 32;
		  or 10, 12, 0, 10;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100057d0;
		  mload 2, 36, 10, 32;
		  branch_if_diff_nonzero 26, 10, ___dot_L10005720;
		  add_wrap 2, 0, 36, 10;
		  jump _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h39b9a8b984fd7914E, 1;
		  add_wrap 0, 0, 93, 5;
		  add_wrap 0, 0, 50, 15;
		  add_wrap 0, 0, 1874, 17;
		  set_reg 14, 268441132;
		  mload 2, 40, 6, 32;
		___dot_L10005720:
		  wrap16 26, 4, 10;
		  add_wrap 10, 6, 0, 10;
		  mstore 10, 0, 0, 8;
		  add_wrap 26, 0, 1, 26;
		  mstore 2, 0, 44, 26;
		  jump ___dot_L10005662, 32;
		___dot_L1000572e:
		  branch_if_diff_equal 26, 0, 0, ___dot_L100058f4;
		  add_wrap 26, 0, 4294967295, 26;
		  mstore 2, 0, 44, 26;
		  wrap16 26, 4, 10;
		  add_wrap 10, 6, 0, 10;
		  mload 10, 0, 8, 32;
		  add_wrap 8, 0, 4294967295, 8;
		  jump ___dot_L10005662, 32;
		___dot_L10005742:
		  shr 23, 0, 4, 10;
		  branch_if_diff_greater_than 10, 17, 0, ___dot_L100058ac;
		  wrap16 23, 8, 10;
		  add_wrap 10, 21, 0, 10;
		  mload 10, 0, 11, 32;
		  mload 10, 4, 12, 32;
		  is_diff_greater_than 0, 11, -(1), 13;
		  sub_wrap_with_offset 12, 13, 0, 12;
		  add_wrap 11, 0, 4294967295, 11;
		___dot_L1000575c:
		  mstore 10, 0, 0, 11;
		  mstore 10, 0, 4, 12;
		  jump ___dot_L10005662, 32;
		___dot_L10005762:
		  shr 23, 0, 4, 10;
		  branch_if_diff_greater_than 10, 17, 0, ___dot_L10005894;
		  wrap16 23, 8, 10;
		  add_wrap 10, 21, 0, 10;
		  mload 2, 56, 20, 32;
		  mload 2, 48, 11, 32;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 19;
		  branch_if_diff_nonzero 20, 11, ___dot_L100057a6;
		  add_wrap 2, 0, 48, 10;
		  add_wrap 0, 21, 0, 27;
		  add_wrap 0, 6, 0, 21;
		  jump _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h324d38dbee69d750E, 1;
		  add_wrap 0, 21, 0, 6;
		  add_wrap 0, 27, 0, 21;
		  add_wrap 0, 0, 91, 27;
		  add_wrap 0, 0, 93, 5;
		  add_wrap 0, 0, 50, 15;
		  add_wrap 0, 0, 1874, 17;
		  set_reg 14, 268441132;
		___dot_L100057a6:
		  mload 2, 52, 10, 32;
		  add_wrap 10, 20, 0, 10;
		  mload 10, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 19, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 0, 32;
		  add_wrap 20, 0, 1, 20;
		  mstore 2, 0, 56, 20;
		  jump ___dot_L10005662, 32;
		___dot_L100057b4:
		  add_wrap 23, 0, 4294967295, 23;
		  jump ___dot_L10005662, 32;
		___dot_L100057b8:
		  add_wrap 0, 0, 4294967295, 10;
		  add_wrap 0, 0, 4294967295, 11;
		  shr 23, 0, 4, 12;
		  branch_if_diff_greater_than 12, 17, 0, ___dot_L100058c4;
		___dot_L100057c4:
		  wrap16 23, 8, 12;
		  add_wrap 12, 21, 0, 12;
		  mstore 12, 0, 4, 11;
		  mstore 12, 0, 0, 10;
		  jump ___dot_L10005662, 32;
		___dot_L100057d0:
		  mload 2, 16, 10, 32;
		  add_wrap 11, 10, 0, 11;
		  add_wrap 0, 0, 1, 12;
		  add_wrap 0, 8, 0, 10;
		  jump ___dot_L100057e0, 32;
		___dot_L100057da:
		  add_wrap 12, 0, 1, 12;
		___dot_L100057dc:
		  add_wrap 11, 0, 4, 11;
		  branch_if_diff_equal 12, 0, 0, ___dot_L100057f4;
		___dot_L100057e0:
		  add_wrap 10, 0, 1, 10;
		  branch_if_diff_greater_than 10, 24, -1, ___dot_L10005878;
		  mload 11, 0, 13, 32;
		  branch_if_diff_equal 13, 27, 0, ___dot_L100057da;
		  branch_if_diff_nonzero 13, 5, ___dot_L100057dc;
		  add_wrap 12, 0, 4294967295, 12;
		  jump ___dot_L100057dc, 32;
		___dot_L100057f4:
		  add_wrap 0, 10, 0, 8;
		  jump ___dot_L10005662, 32;
		___dot_L100057f8:
		  mload 2, 56, 10, 32;
		  mload 2, 52, 11, 32;
		  mload 2, 48, 12, 32;
		  mload 2, 12, 13, 32;
		  mstore 13, 0, 16, 10;
		  mstore 13, 0, 12, 11;
		  mstore 13, 0, 8, 12;
		  mstore 13, 0, 0, 9;
		  mstore 13, 0, 4, 25;
		  set_reg 10, 241664;
		  add_wrap 10, 0, 4294965632, 11;
		  add_wrap 0, 0, 8, 12;
		  add_wrap 0, 21, 0, 10;
		  jump __rust_dealloc, 1;
		  mload 2, 36, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10005832;
		  mload 2, 40, 10, 32;
		  wrap16 11, 4, 11;
		  add_wrap 0, 0, 4, 12;
		  jump __rust_dealloc, 1;
		___dot_L10005832:
		  mload 2, 28, 10, 32;
		  mload 10, 0, 11, 32;
		  mload 2, 8, 8, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10005848;
		  mload 10, 4, 10, 32;
		  wrap16 11, 8, 11;
		  add_wrap 0, 0, 8, 12;
		  jump __rust_dealloc, 1;
		___dot_L10005848:
		  mload 8, 0, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000585a;
		  wrap16 11, 4, 11;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 22, 0, 10;
		  jump __rust_dealloc, 1;
		___dot_L1000585a:
		  mload 2, 108, 1, 32;
		  mload 2, 104, 8, 32;
		  mload 2, 100, 9, 32;
		  mload 2, 96, 18, 32;
		  mload 2, 92, 19, 32;
		  mload 2, 88, 20, 32;
		  mload 2, 84, 21, 32;
		  mload 2, 80, 22, 32;
		  mload 2, 76, 23, 32;
		  mload 2, 72, 24, 32;
		  mload 2, 68, 25, 32;
		  mload 2, 64, 26, 32;
		  mload 2, 60, 27, 32;
		  add_wrap 2, 0, 112, 2;
		  jump_dyn 1, 32;
		___dot_L10005878:
		  add_wrap 8, 0, 1, 8;
		  add_wrap 0, 24, 0, 10;
		  branch_if_diff_greater_than 24, 8, 0, ___dot_L10005882;
		  add_wrap 0, 8, 0, 10;
		___dot_L10005882:
		  set_reg 12, 268439716;
		  add_wrap 0, 24, 0, 11;
		  jump _ZN4core9panicking18panic_bounds_check17h622a96b44c564c9cE, 1;
		___dot_L10005894:
		  set_reg 12, 268439936;
		  set_reg 10, 28672;
		  add_wrap 10, 0, 1328, 11;
		  add_wrap 0, 23, 0, 10;
		  jump _ZN4core9panicking18panic_bounds_check17h622a96b44c564c9cE, 1;
		___dot_L100058ac:
		  set_reg 12, 268440040;
		  set_reg 10, 28672;
		  add_wrap 10, 0, 1328, 11;
		  add_wrap 0, 23, 0, 10;
		  jump _ZN4core9panicking18panic_bounds_check17h622a96b44c564c9cE, 1;
		___dot_L100058c4:
		  set_reg 12, 268440188;
		  set_reg 10, 28672;
		  add_wrap 10, 0, 1328, 11;
		  add_wrap 0, 23, 0, 10;
		  jump _ZN4core9panicking18panic_bounds_check17h622a96b44c564c9cE, 1;
		___dot_L100058dc:
		  set_reg 12, 268440272;
		  set_reg 10, 28672;
		  add_wrap 10, 0, 1328, 11;
		  add_wrap 0, 23, 0, 10;
		  jump _ZN4core9panicking18panic_bounds_check17h622a96b44c564c9cE, 1;
		___dot_L100058f4:
		  set_reg 10, 268440480;
		  jump _ZN4core6option13unwrap_failed17h2f54e17bec2b23f6E, 1;
		___dot_L10005904:
		  set_reg 12, 268440544;
		  set_reg 10, 28672;
		  add_wrap 10, 0, 1328, 11;
		  add_wrap 0, 23, 0, 10;
		  jump _ZN4core9panicking18panic_bounds_check17h622a96b44c564c9cE, 1;
		___dot_L1000591c:
		  add_wrap 0, 0, 8, 10;
		  add_wrap 0, 8, 0, 11;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		___dot_L10005928:
		  add_wrap 0, 0, 0, 8;
		___dot_L1000592a:
		  set_reg 12, 268440800;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 24, 0, 11;
		  jump _ZN4core9panicking18panic_bounds_check17h622a96b44c564c9cE, 1;
		_ZN44_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17h3ab8c61648952475E:
		  mload 10, 0, 10, 32;
		  jump _ZN73_$LT$core_dot__dot_panic_dot__dot_panic_info_dot__dot_PanicInfo$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17h186a01ef52ca6532E, 32;
		_ZN4core3fmt5Write10write_char17ha956c26b76346f98E:
		  add_wrap 2, 0, 4294967280, 2;
		  add_wrap 0, 0, 128, 10;
		  mstore 2, 0, 12, 0;
		  branch_if_diff_greater_than 11, 10, -1, ___dot_L1000595e;
		  add_wrap 2, 0, 13, 12;
		  mload 2, 12, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 12, 32;
		  jump ___dot_L100059ea, 32;
		___dot_L1000595e:
		  shr 11, 0, 11, 10;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005982;
		  add_wrap 2, 0, 14, 12;
		  shr 11, 0, 6, 10;
		  or 10, 0, 192, 10;
		  mload 2, 12, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 12, 32;
		  and 11, 0, 63, 10;
		  add_wrap 10, 0, 128, 10;
		  mload 2, 13, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 13, 32;
		  jump ___dot_L100059ea, 32;
		___dot_L10005982:
		  shr 11, 0, 16, 10;
		  branch_if_diff_nonzero 10, 0, ___dot_L100059b4;
		  add_wrap 2, 0, 15, 12;
		  shr 11, 0, 12, 10;
		  or 10, 0, 224, 10;
		  mload 2, 12, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 12, 32;
		  wrap16 11, 65536, 32;
		  wrap16 32, 16, 10;
		  shr 10, 0, 26, 10;
		  add_wrap 10, 0, 128, 10;
		  mload 2, 13, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 13, 32;
		  and 11, 0, 63, 10;
		  add_wrap 10, 0, 128, 10;
		  mload 2, 14, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 14, 32;
		  jump ___dot_L100059ea, 32;
		___dot_L100059b4:
		  add_wrap 2, 0, 16, 12;
		  shr 11, 0, 18, 10;
		  or 10, 0, 240, 10;
		  mload 2, 12, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 12, 32;
		  wrap16 11, 16384, 10;
		  shr 10, 0, 26, 10;
		  add_wrap 10, 0, 128, 10;
		  mload 2, 13, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 13, 32;
		  wrap16 11, 65536, 32;
		  wrap16 32, 16, 10;
		  shr 10, 0, 26, 10;
		  add_wrap 10, 0, 128, 10;
		  mload 2, 14, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 14, 32;
		  and 11, 0, 63, 10;
		  add_wrap 10, 0, 128, 10;
		  mload 2, 15, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 15, 32;
		___dot_L100059ea:
		  add_wrap 2, 0, 12, 13;
		  add_wrap 0, 0, 2, 5;
		___dot_L100059ee:
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 0, 1, 10;
		  add_wrap 2, 0, -4, 2;
		  mstore 2, 0, 0, 1;
		  jump __ecall_handler, 1;
		  mload 2, 0, 1, 32;
		  add_wrap 2, 0, 4, 2;
		  add_wrap 13, 0, 1, 10;
		  add_wrap 0, 10, 0, 13;
		  branch_if_diff_nonzero 10, 12, ___dot_L100059ee;
		  add_wrap 0, 0, 0, 10;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt5Write9write_fmt17hb504e02c1f75331cE:
		  set_reg 12, 268439732;
		  add_wrap 0, 11, 0, 13;
		  add_wrap 0, 12, 0, 11;
		  add_wrap 0, 13, 0, 12;
		  jump _ZN4core3fmt5write17hd984f2c6cd7a2630E, 32;
		_ZN19powdr_riscv_runtime3fmt10print_args17h75ab992f2ca9ebc8E:
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  add_wrap 0, 10, 0, 12;
		  set_reg 11, 268439732;
		  add_wrap 2, 0, 11, 10;
		  jump _ZN4core3fmt5write17hd984f2c6cd7a2630E, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005a40;
		  mload 2, 12, 1, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		___dot_L10005a40:
		  set_reg 10, 268440204;
		  set_reg 13, 268439952;
		  set_reg 14, 268440288;
		  add_wrap 0, 0, 43, 11;
		  add_wrap 2, 0, 11, 12;
		  jump _ZN4core6result13unwrap_failed17h94b6a44ffee5119cE, 1;
		_ZN75_$LT$powdr_riscv_runtime_dot__dot_fmt_dot__dot_ProverWriter$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17hcaec170a5325097dE:
		  branch_if_diff_equal 12, 0, 0, ___dot_L10005a7e;
		  add_wrap 0, 11, 0, 13;
		  add_wrap 0, 0, 2, 5;
		___dot_L10005a6e:
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 0, 1, 10;
		  add_wrap 2, 0, -4, 2;
		  mstore 2, 0, 0, 1;
		  jump __ecall_handler, 1;
		  mload 2, 0, 1, 32;
		  add_wrap 2, 0, 4, 2;
		  add_wrap 13, 0, 1, 13;
		  add_wrap 12, 0, 4294967295, 12;
		  branch_if_diff_nonzero 12, 0, ___dot_L10005a6e;
		___dot_L10005a7e:
		  add_wrap 0, 0, 0, 10;
		  jump_dyn 1, 32;
		_ZN19powdr_riscv_runtime2io10read_slice17hd886ab3adeac2eefE:
		  branch_if_diff_equal 12, 0, 0, ___dot_L10005a9e;
		  add_wrap 0, 11, 0, 13;
		  add_wrap 0, 10, 0, 14;
		  wrap16 12, 4, 12;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 0, 1, 5;
		___dot_L10005a8e:
		  add_wrap 0, 14, 0, 10;
		  add_wrap 2, 0, -4, 2;
		  mstore 2, 0, 0, 1;
		  jump __ecall_handler, 1;
		  mload 2, 0, 1, 32;
		  add_wrap 2, 0, 4, 2;
		  mstore 13, 0, 0, 10;
		  add_wrap 13, 0, 4, 13;
		  add_wrap 12, 0, 4294967292, 12;
		  add_wrap 11, 0, 1, 11;
		  branch_if_diff_nonzero 12, 0, ___dot_L10005a8e;
		___dot_L10005a9e:
		  jump_dyn 1, 32;
		rust_begin_unwind:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 44, 1;
		  set_reg 11, 268468224;
		  mload 11, 1826, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mstore 2, 0, 4, 10;
		  branch_if_diff_equal 12, 0, 0, ___dot_L10005ad0;
		  set_reg 12, 268440816;
		  add_wrap 12, 0, 59, 13;
		  add_wrap 0, 0, 2, 5;
		___dot_L10005abe:
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 0, 1, 10;
		  add_wrap 2, 0, -4, 2;
		  mstore 2, 0, 0, 1;
		  jump __ecall_handler, 1;
		  mload 2, 0, 1, 32;
		  add_wrap 2, 0, 4, 2;
		  add_wrap 12, 0, 1, 12;
		  branch_if_diff_nonzero 12, 13, ___dot_L10005abe;
		  jump ___dot_L10005b12, 32;
		___dot_L10005ad0:
		  add_wrap 0, 0, 1, 10;
		  mload 11, 1826, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 11, 33, 1826, 32;
		  add_wrap 2, 0, 4, 11;
		  mstore 2, 0, 32, 11;
		  load_label 11, _ZN44_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17h3ab8c61648952475E;
		  mstore 2, 0, 36, 11;
		  set_reg 11, 268441012;
		  mstore 2, 0, 8, 11;
		  add_wrap 0, 0, 2, 11;
		  mstore 2, 0, 12, 11;
		  mstore 2, 0, 24, 0;
		  add_wrap 2, 0, 32, 11;
		  mstore 2, 0, 16, 11;
		  mstore 2, 0, 20, 10;
		  set_reg 11, 268439732;
		  add_wrap 2, 0, 43, 10;
		  add_wrap 2, 0, 8, 12;
		  jump _ZN4core3fmt5write17hd984f2c6cd7a2630E, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005b16;
		___dot_L10005b12:
		  fail;
		___dot_L10005b14:
		  jump ___dot_L10005b14, 32;
		___dot_L10005b16:
		  set_reg 10, 268440204;
		  set_reg 13, 268439952;
		  set_reg 14, 268440288;
		  add_wrap 0, 0, 43, 11;
		  add_wrap 2, 0, 43, 12;
		  jump _ZN4core6result13unwrap_failed17h94b6a44ffee5119cE, 1;
		__rust_alloc:
		__rust_alloc_zeroed:
		  set_reg 12, 268468224;
		  mload 12, 1828, 13, 32;
		  add_wrap 12, 0, 1828, 14;
		  add_wrap 14, 0, 4, 14;
		  add_wrap 14, 11, 0, 15;
		  add_wrap 13, 15, 0, 13;
		  add_wrap 13, 0, 4294967295, 13;
		  sub_wrap_with_offset 0, 11, 0, 11;
		  and 11, 13, 0, 11;
		  sub_wrap_with_offset 10, 14, 0, 10;
		  add_wrap 10, 11, 0, 13;
		  set_reg 14, 1073741824;
		  add_wrap 0, 0, 0, 10;
		  branch_if_diff_greater_than 13, 14, 0, ___dot_L10005b70;
		  mstore 12, 0, 1828, 13;
		  add_wrap 0, 11, 0, 10;
		___dot_L10005b70:
		  jump_dyn 1, 32;
		__rust_dealloc:
		  jump_dyn 1, 32;
		__rust_realloc:
		  set_reg 16, 268468224;
		  mload 16, 1828, 17, 32;
		  add_wrap 16, 0, 1828, 14;
		  add_wrap 14, 0, 4, 15;
		  add_wrap 15, 12, 0, 14;
		  add_wrap 14, 17, 0, 14;
		  add_wrap 14, 0, 4294967295, 14;
		  sub_wrap_with_offset 0, 12, 0, 12;
		  and 12, 14, 0, 12;
		  sub_wrap_with_offset 13, 15, 0, 15;
		  add_wrap 15, 12, 0, 15;
		  set_reg 14, 1073741824;
		  branch_if_diff_greater_than 15, 14, 0, ___dot_L10005bbc;
		  mstore 16, 0, 1828, 15;
		  branch_if_diff_equal 12, 0, 0, ___dot_L10005bbc;
		  add_wrap 0, 10, 0, 14;
		  branch_if_diff_greater_than 13, 11, 0, ___dot_L10005bae;
		  add_wrap 0, 13, 0, 11;
		___dot_L10005bae:
		  add_wrap 0, 12, 0, 10;
		  add_wrap 0, 11, 0, 12;
		  add_wrap 0, 14, 0, 11;
		  jump memcpy, 32;
		___dot_L10005bbc:
		  add_wrap 0, 0, 0, 10;
		  jump_dyn 1, 32;
		_ZN19powdr_riscv_runtime14no_std_support11alloc_error17h43493870ac3d017fE:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 40, 11;
		  mstore 2, 0, 44, 10;
		  add_wrap 2, 0, 40, 10;
		  mstore 2, 0, 24, 10;
		  load_label 10, _ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u32$GT$3fmt17h5898aa4ddbfe8fceE;
		  mstore 2, 0, 28, 10;
		  add_wrap 2, 0, 44, 11;
		  mstore 2, 0, 32, 11;
		  mstore 2, 0, 36, 10;
		  set_reg 10, 268440712;
		  mstore 2, 0, 0, 10;
		  add_wrap 0, 0, 3, 10;
		  mstore 2, 0, 4, 10;
		  mstore 2, 0, 16, 0;
		  add_wrap 2, 0, 24, 10;
		  mstore 2, 0, 8, 10;
		  add_wrap 0, 0, 2, 10;
		  mstore 2, 0, 12, 10;
		  set_reg 11, 268439464;
		  add_wrap 0, 2, 0, 10;
		  jump _ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E, 1;
		__rg_oom:
		  add_wrap 0, 10, 0, 12;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 12, 0, 11;
		  jump _ZN19powdr_riscv_runtime14no_std_support11alloc_error17h43493870ac3d017fE, 1;
		_ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hbd0527e3aa88d65fE:
		  mload 11, 28, 12, 32;
		  mload 10, 0, 10, 32;
		  and 12, 0, 16, 13;
		  branch_if_diff_nonzero 13, 0, ___dot_L10005c2a;
		  and 12, 0, 32, 12;
		  branch_if_diff_nonzero 12, 0, ___dot_L10005c32;
		  jump _ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u64$GT$3fmt17he69166304e9a7811E, 32;
		___dot_L10005c2a:
		  jump _ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$i64$GT$3fmt17h8a8cb446dfc638f8E, 32;
		___dot_L10005c32:
		  jump _ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$i64$GT$3fmt17hafdf13ae719a13f5E, 32;
		_ZN5alloc7raw_vec11finish_grow17hf6aa405f0c00fda6E:
		  branch_if_diff_equal 11, 0, 0, ___dot_L10005c76;
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  mstore 2, 0, 4, 9;
		  mstore 2, 0, 0, 18;
		  add_wrap 0, 12, 0, 8;
		  to_signed 12, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10005ca4;
		  add_wrap 0, 11, 0, 9;
		  mload 13, 4, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10005c80;
		  mload 13, 8, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10005c80;
		  mload 13, 0, 12, 32;
		  add_wrap 0, 10, 0, 18;
		  add_wrap 0, 12, 0, 10;
		  add_wrap 0, 9, 0, 12;
		  add_wrap 0, 8, 0, 13;
		  jump __rust_realloc, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 18, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10005c9e;
		___dot_L10005c6e:
		  add_wrap 0, 0, 0, 12;
		  mstore 10, 0, 4, 11;
		  mstore 10, 0, 8, 8;
		  jump ___dot_L10005caa, 32;
		___dot_L10005c76:
		  mstore 10, 0, 4, 0;
		  add_wrap 0, 0, 1, 12;
		  mstore 10, 0, 0, 12;
		  jump_dyn 1, 32;
		___dot_L10005c80:
		  branch_if_diff_equal 8, 0, 0, ___dot_L10005cb8;
		  set_reg 11, 268468224;
		  add_wrap 0, 10, 0, 18;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  jump __rust_alloc, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 18, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10005c6e;
		___dot_L10005c9e:
		  mstore 10, 0, 4, 9;
		  mstore 10, 0, 8, 8;
		  jump ___dot_L10005ca8, 32;
		___dot_L10005ca4:
		  mstore 10, 0, 4, 0;
		___dot_L10005ca8:
		  add_wrap 0, 0, 1, 12;
		___dot_L10005caa:
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  mload 2, 4, 9, 32;
		  mload 2, 0, 18, 32;
		  add_wrap 2, 0, 16, 2;
		  mstore 10, 0, 0, 12;
		  jump_dyn 1, 32;
		___dot_L10005cb8:
		  add_wrap 0, 9, 0, 11;
		  branch_if_diff_nonzero 9, 0, ___dot_L10005c6e;
		  jump ___dot_L10005c9e, 32;
		_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17hc309a9987ef01bdbE:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 44, 1;
		  mstore 2, 0, 40, 8;
		  mstore 2, 0, 36, 9;
		  add_wrap 12, 11, 0, 12;
		  branch_if_diff_greater_than 11, 12, 0, ___dot_L10005d26;
		  add_wrap 0, 10, 0, 8;
		  mload 10, 0, 10, 32;
		  wrap16 10, 2, 9;
		  branch_if_diff_greater_than 12, 9, -1, ___dot_L10005d12;
		  add_wrap 0, 0, 8, 11;
		  branch_if_diff_greater_than 11, 9, -1, ___dot_L10005d1a;
		___dot_L10005cde:
		  xor 9, 0, 4294967295, 11;
		  shr 11, 0, 31, 11;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10005cee;
		___dot_L10005ce6:
		  mload 8, 4, 12, 32;
		  mstore 2, 0, 24, 12;
		  mstore 2, 0, 32, 10;
		  add_wrap 0, 0, 1, 10;
		___dot_L10005cee:
		  mstore 2, 0, 28, 10;
		  add_wrap 2, 0, 12, 10;
		  add_wrap 2, 0, 24, 13;
		  add_wrap 0, 9, 0, 12;
		  jump _ZN5alloc7raw_vec11finish_grow17hf6aa405f0c00fda6E, 1;
		  mload 2, 12, 10, 32;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005d30;
		  mload 2, 16, 10, 32;
		  mstore 8, 0, 4, 10;
		  mstore 8, 0, 0, 9;
		  mload 2, 44, 1, 32;
		  mload 2, 40, 8, 32;
		  mload 2, 36, 9, 32;
		  add_wrap 2, 0, 48, 2;
		  jump_dyn 1, 32;
		___dot_L10005d12:
		  add_wrap 0, 12, 0, 9;
		  add_wrap 0, 0, 8, 11;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L10005cde;
		___dot_L10005d1a:
		  add_wrap 0, 0, 8, 9;
		  xor 9, 0, 4294967295, 11;
		  shr 11, 0, 31, 11;
		  branch_if_diff_nonzero 10, 0, ___dot_L10005ce6;
		  jump ___dot_L10005cee, 32;
		___dot_L10005d26:
		  add_wrap 0, 0, 0, 10;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		___dot_L10005d30:
		  mload 2, 16, 10, 32;
		  mload 2, 20, 11, 32;
		  jump _ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE, 1;
		_ZN61_$LT$serde_cbor_dot__dot_error_dot__dot_Error$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17he3be38c5f0319ea0E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  add_wrap 0, 11, 0, 5;
		  add_wrap 10, 0, 8, 15;
		  mstore 2, 0, 24, 10;
		  set_reg 10, 268439968;
		  mstore 2, 0, 8, 10;
		  add_wrap 2, 0, 24, 10;
		  mstore 2, 0, 4, 10;
		  add_wrap 0, 0, 6, 10;
		  set_reg 11, 268440247;
		  set_reg 13, 268440583;
		  set_reg 16, 268439756;
		  set_reg 17, 268440496;
		  add_wrap 0, 0, 9, 12;
		  add_wrap 0, 0, 4, 14;
		  mstore 2, 0, 0, 10;
		  add_wrap 0, 5, 0, 10;
		  jump _ZN4core3fmt9Formatter26debug_struct_field2_finish17h3701d021ed82a04eE, 1;
		  mload 2, 28, 1, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		_ZN10serde_cbor4read9SliceRead3end17h3d0a5b991f68b3c4E:
		  mload 11, 20, 13, 32;
		  mload 11, 16, 11, 32;
		  add_wrap 12, 13, 0, 12;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L10005da6;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L10005da6;
		  mstore 10, 0, 0, 12;
		  add_wrap 0, 0, 16, 11;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump_dyn 1, 32;
		___dot_L10005da6:
		  mstore 10, 0, 4, 0;
		  mstore 10, 0, 0, 11;
		  add_wrap 0, 0, 3, 11;
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  jump_dyn 1, 32;
		_ZN70_$LT$serde_cbor_dot__dot_read_dot__dot_SliceRead$u20$as$u20$serde_cbor_dot__dot_read_dot__dot_Read$GT$14read_to_buffer17ha08f4644b14a0dfbE:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mstore 2, 0, 16, 18;
		  mstore 2, 0, 12, 19;
		  mstore 2, 0, 8, 20;
		  mstore 2, 0, 4, 21;
		  mload 11, 20, 19, 32;
		  mload 11, 16, 13, 32;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 19, 12, 0, 9;
		  add_wrap 0, 0, 3, 10;
		  branch_if_diff_greater_than 19, 9, 0, ___dot_L10005e10;
		  branch_if_diff_greater_than 9, 13, 0, ___dot_L10005e10;
		  mload 11, 8, 20, 32;
		  mload 11, 0, 10, 32;
		  mload 11, 12, 12, 32;
		  sub_wrap_with_offset 9, 19, 0, 18;
		  sub_wrap_with_offset 10, 20, 0, 10;
		  add_wrap 19, 12, 0, 19;
		  branch_if_diff_greater_than 18, 10, 0, ___dot_L10005e2c;
		___dot_L10005df0:
		  mload 11, 4, 10, 32;
		  add_wrap 10, 20, 0, 10;
		  add_wrap 0, 11, 0, 21;
		  add_wrap 0, 19, 0, 11;
		  add_wrap 0, 18, 0, 12;
		  jump memcpy, 1;
		  add_wrap 18, 20, 0, 18;
		  mstore 21, 0, 8, 18;
		  mstore 21, 0, 20, 9;
		  add_wrap 0, 0, 16, 10;
		  add_wrap 0, 9, 0, 13;
		___dot_L10005e10:
		  mstore 8, 0, 4, 0;
		  mstore 8, 0, 0, 13;
		  mload 8, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 8, 32;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  mload 2, 16, 18, 32;
		  mload 2, 12, 19, 32;
		  mload 2, 8, 20, 32;
		  mload 2, 4, 21, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L10005e2c:
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 11, 0, 21;
		  add_wrap 0, 20, 0, 11;
		  add_wrap 0, 18, 0, 12;
		  jump _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17hc309a9987ef01bdbE, 1;
		  add_wrap 0, 21, 0, 11;
		  mload 21, 8, 20, 32;
		  jump ___dot_L10005df0, 32;
		_ZN65_$LT$serde_cbor_dot__dot_error_dot__dot_ErrorCode$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hd412ff65ca6eab1cE:
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  wrap16 10, 4, 10;
		  set_reg 12, 268441732;
		  add_wrap 12, 10, 0, 12;
		  mload 12, 0, 12, 32;
		  set_reg 13, 268441796;
		  add_wrap 10, 13, 0, 10;
		  mload 10, 0, 13, 32;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core3fmt9Formatter9write_str17hd51bf5ca43076a08E, 32;
		_ZN4half8binary167convert19f16_to_f32_fallback17h5f3fde806157e639E:
		  add_wrap 0, 0, 31, 11;
		  wrap16 11, 1024, 11;
		  add_wrap 11, 0, 1023, 12;
		  and 12, 10, 0, 12;
		  branch_if_diff_equal 12, 0, 0, ___dot_L10005e9c;
		  set_reg 13, 32768;
		  and 13, 10, 0, 13;
		  and 10, 11, 0, 12;
		  and 10, 0, 1023, 10;
		  branch_if_diff_nonzero 12, 11, ___dot_L10005ea0;
		  wrap16 13, 65536, 11;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10005eb6;
		  wrap16 10, 8192, 10;
		  set_reg 12, 2143289344;
		  or 10, 12, 0, 10;
		  or 10, 11, 0, 10;
		  jump_dyn 1, 32;
		___dot_L10005e9c:
		  wrap16 10, 65536, 10;
		  jump_dyn 1, 32;
		___dot_L10005ea0:
		  wrap16 13, 65536, 11;
		  branch_if_diff_equal 12, 0, 0, ___dot_L10005ebe;
		  shr 12, 0, 10, 12;
		  add_wrap 12, 0, 112, 12;
		  wrap16 12, 65536, 32;
		  wrap16 32, 128, 12;
		  wrap16 10, 8192, 10;
		  or 10, 11, 0, 10;
		  or 10, 12, 0, 10;
		  jump_dyn 1, 32;
		___dot_L10005eb6:
		  set_reg 10, 2139095040;
		  or 10, 11, 0, 10;
		  jump_dyn 1, 32;
		___dot_L10005ebe:
		  branch_if_diff_equal 10, 0, 0, ___dot_L10005f0a;
		  shr 10, 0, 1, 12;
		  or 12, 10, 0, 12;
		  shr 12, 0, 2, 13;
		  or 13, 12, 0, 13;
		  shr 13, 0, 4, 14;
		  shr 12, 0, 8, 12;
		  or 12, 13, 0, 12;
		  or 12, 14, 0, 12;
		  xor 12, 0, 4294967295, 12;
		  shr 12, 0, 1, 13;
		  set_reg 14, 21845;
		  and 13, 14, 0, 13;
		  sub_wrap_with_offset 12, 13, 0, 12;
		  set_reg 13, 13107;
		  and 12, 13, 0, 14;
		  shr 12, 0, 2, 12;
		  and 12, 13, 0, 12;
		  add_wrap 12, 14, 0, 12;
		  shr 12, 0, 4, 13;
		  add_wrap 12, 13, 0, 12;
		  and 12, 0, 15, 13;
		  wrap16 12, 65536, 32;
		  wrap16 32, 16, 12;
		  shr 12, 0, 28, 12;
		  add_wrap 12, 13, 0, 12;
		  jump ___dot_L10005f0c, 32;
		___dot_L10005f0a:
		  add_wrap 0, 0, 16, 12;
		___dot_L10005f0c:
		  wrap16 12, 65536, 32;
		  wrap16 32, 128, 13;
		  add_wrap 12, 0, 8, 12;
		  and 12, 0, 0x1f, 32;
		  shl 10, 32, 0, 10;
		  wrap16 10, 512, 10;
		  shr 10, 0, 9, 10;
		  sub_wrap_with_offset 13, 11, 0, 13;
		  set_reg 11, 989855744;
		  sub_wrap_with_offset 13, 11, 0, 13;
		  sub_wrap_with_offset 10, 13, 0, 10;
		  jump_dyn 1, 32;
		_ZN5serde2de6format3Buf6as_str17h694cd4e9c4a7c71cE:
		  mload 10, 4, 13, 32;
		  mload 10, 8, 11, 32;
		  branch_if_diff_greater_than 11, 13, 0, ___dot_L10005f32;
		  mload 10, 0, 10, 32;
		  jump_dyn 1, 32;
		___dot_L10005f32:
		  set_reg 12, 268440876;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E, 1;
		_ZN59_$LT$serde_dot__dot_de_dot__dot_format_dot__dot_Buf$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17h518e77b31ae91f28E:
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  mstore 2, 0, 4, 9;
		  mstore 2, 0, 0, 18;
		  add_wrap 0, 10, 0, 13;
		  mload 10, 8, 10, 32;
		  mload 13, 4, 9, 32;
		  add_wrap 10, 12, 0, 8;
		  branch_if_diff_greater_than 8, 9, 0, ___dot_L10005f74;
		  branch_if_diff_greater_than 10, 8, 0, ___dot_L10005f84;
		  mload 13, 0, 14, 32;
		  add_wrap 10, 14, 0, 10;
		  add_wrap 0, 13, 0, 18;
		  jump memcpy, 1;
		  mstore 18, 0, 8, 8;
		___dot_L10005f74:
		  is_diff_greater_than 8, 9, 0, 10;
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  mload 2, 4, 9, 32;
		  mload 2, 0, 18, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		___dot_L10005f84:
		  set_reg 12, 268441028;
		  add_wrap 0, 8, 0, 11;
		  jump _ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE, 1;
		_ZN5alloc7raw_vec17capacity_overflow17hf24027abfa45d94cE:
		  add_wrap 2, 0, 4294967264, 2;
		  set_reg 10, 268440892;
		  mstore 2, 0, 8, 10;
		  add_wrap 0, 0, 1, 10;
		  mstore 2, 0, 12, 10;
		  mstore 2, 0, 24, 0;
		  add_wrap 0, 0, 4, 10;
		  mstore 2, 0, 16, 10;
		  mstore 2, 0, 20, 0;
		  set_reg 11, 268441044;
		  add_wrap 2, 0, 8, 10;
		  jump _ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E, 1;
		_ZN5alloc7raw_vec12handle_error17h9957282c5ae8169cE:
		  branch_if_diff_nonzero 10, 0, ___dot_L10005fca;
		  jump _ZN5alloc7raw_vec17capacity_overflow17hf24027abfa45d94cE, 1;
		___dot_L10005fca:
		  jump _ZN5alloc5alloc18handle_alloc_error17h1317fd18c084ecfaE, 1;
		_ZN5alloc5alloc18handle_alloc_error17h1317fd18c084ecfaE:
		  add_wrap 0, 10, 0, 12;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 12, 0, 11;
		  jump __rust_alloc_error_handler, 1;
		_ZN4core6option13unwrap_failed17h2f54e17bec2b23f6E:
		  add_wrap 0, 10, 0, 12;
		  set_reg 10, 268441992;
		  add_wrap 0, 0, 43, 11;
		  jump _ZN4core9panicking5panic17h6885cb3ca4748be7E, 1;
		_ZN73_$LT$core_dot__dot_panic_dot__dot_panic_info_dot__dot_PanicInfo$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17h186a01ef52ca6532E:
		  add_wrap 2, 0, 4294967216, 2;
		  mstore 2, 0, 76, 1;
		  mstore 2, 0, 72, 8;
		  mstore 2, 0, 68, 9;
		  mstore 2, 0, 64, 18;
		  mstore 2, 0, 60, 19;
		  mstore 2, 0, 56, 20;
		  mload 11, 24, 8, 32;
		  mload 11, 20, 9, 32;
		  mload 8, 12, 20, 32;
		  add_wrap 0, 10, 0, 18;
		  set_reg 11, 268442060;
		  add_wrap 0, 0, 12, 12;
		  add_wrap 0, 9, 0, 10;
		  jump_dyn 20, 1;
		  add_wrap 0, 0, 1, 19;
		  branch_if_diff_nonzero 10, 0, ___dot_L1000608e;
		  mload 18, 24, 10, 32;
		  add_wrap 10, 0, 8, 11;
		  add_wrap 10, 0, 12, 12;
		  mstore 2, 0, 32, 10;
		  load_label 10, _ZN44_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17hc8a5a7407b1afeceE;
		  mstore 2, 0, 36, 10;
		  mstore 2, 0, 40, 11;
		  load_label 10, _ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u32$GT$3fmt17h5898aa4ddbfe8fceE;
		  mstore 2, 0, 44, 10;
		  mstore 2, 0, 48, 12;
		  mstore 2, 0, 52, 10;
		  set_reg 10, 268442036;
		  mstore 2, 0, 8, 10;
		  add_wrap 0, 0, 3, 10;
		  mstore 2, 0, 12, 10;
		  mstore 2, 0, 24, 0;
		  add_wrap 2, 0, 32, 11;
		  mstore 2, 0, 16, 11;
		  mstore 2, 0, 20, 10;
		  add_wrap 2, 0, 8, 12;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 0, 8, 0, 11;
		  jump _ZN4core3fmt5write17hd984f2c6cd7a2630E, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L1000608e;
		  set_reg 11, 268442072;
		  add_wrap 0, 0, 2, 12;
		  add_wrap 0, 9, 0, 10;
		  jump_dyn 20, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L1000608e;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 0, 8, 0, 11;
		  add_wrap 0, 18, 0, 12;
		  jump _ZN4core3fmt5write17hd984f2c6cd7a2630E, 1;
		  add_wrap 0, 10, 0, 19;
		___dot_L1000608e:
		  add_wrap 0, 19, 0, 10;
		  mload 2, 76, 1, 32;
		  mload 2, 72, 8, 32;
		  mload 2, 68, 9, 32;
		  mload 2, 64, 18, 32;
		  mload 2, 60, 19, 32;
		  mload 2, 56, 20, 32;
		  add_wrap 2, 0, 80, 2;
		  jump_dyn 1, 32;
		_ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E:
		  add_wrap 2, 0, 4294967264, 2;
		  mload 10, 20, 12, 32;
		  mload 10, 16, 13, 32;
		  mstore 2, 0, 20, 12;
		  mstore 2, 0, 16, 13;
		  mload 10, 12, 12, 32;
		  mload 10, 8, 13, 32;
		  mload 10, 4, 14, 32;
		  mload 10, 0, 10, 32;
		  mstore 2, 0, 12, 12;
		  mstore 2, 0, 8, 13;
		  mstore 2, 0, 4, 14;
		  mstore 2, 0, 0, 10;
		  mstore 2, 0, 24, 11;
		  add_wrap 0, 0, 1, 10;
		  mload 2, 28, 32, 33;
		  set_reg 34, 0xffff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xffff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 28, 32;
		  add_wrap 0, 2, 0, 10;
		  jump rust_begin_unwind, 1;
		_ZN4core9panicking5panic17h6885cb3ca4748be7E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 24, 10;
		  mstore 2, 0, 28, 11;
		  add_wrap 2, 0, 24, 10;
		  mstore 2, 0, 0, 10;
		  add_wrap 0, 0, 1, 10;
		  mstore 2, 0, 4, 10;
		  mstore 2, 0, 16, 0;
		  add_wrap 0, 0, 4, 10;
		  mstore 2, 0, 8, 10;
		  mstore 2, 0, 12, 0;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 12, 0, 11;
		  jump _ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E, 1;
		_ZN4core9panicking18panic_bounds_check17h622a96b44c564c9cE:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 0, 10;
		  mstore 2, 0, 4, 11;
		  add_wrap 2, 0, 4, 10;
		  mstore 2, 0, 32, 10;
		  load_label 10, _ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u32$GT$3fmt17h5898aa4ddbfe8fceE;
		  mstore 2, 0, 36, 10;
		  add_wrap 0, 2, 0, 11;
		  mstore 2, 0, 40, 11;
		  mstore 2, 0, 44, 10;
		  set_reg 10, 268442092;
		  mstore 2, 0, 8, 10;
		  add_wrap 0, 0, 2, 10;
		  mstore 2, 0, 12, 10;
		  mstore 2, 0, 24, 0;
		  add_wrap 2, 0, 32, 11;
		  mstore 2, 0, 16, 11;
		  mstore 2, 0, 20, 10;
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 12, 0, 11;
		  jump _ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E, 1;
		_ZN4core6result13unwrap_failed17h94b6a44ffee5119cE:
		  add_wrap 2, 0, 4294967232, 2;
		  mstore 2, 0, 8, 10;
		  mstore 2, 0, 12, 11;
		  mstore 2, 0, 16, 12;
		  mstore 2, 0, 20, 13;
		  add_wrap 2, 0, 8, 10;
		  mstore 2, 0, 48, 10;
		  load_label 10, _ZN44_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17hc8a5a7407b1afeceE;
		  mstore 2, 0, 52, 10;
		  add_wrap 2, 0, 16, 10;
		  mstore 2, 0, 56, 10;
		  load_label 10, _ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hdda82f2323befdedE;
		  mstore 2, 0, 60, 10;
		  set_reg 10, 268442112;
		  mstore 2, 0, 24, 10;
		  add_wrap 0, 0, 2, 10;
		  mstore 2, 0, 28, 10;
		  mstore 2, 0, 40, 0;
		  add_wrap 2, 0, 48, 11;
		  mstore 2, 0, 32, 11;
		  mstore 2, 0, 36, 10;
		  add_wrap 2, 0, 24, 10;
		  add_wrap 0, 14, 0, 11;
		  jump _ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E, 1;
		_ZN68_$LT$core_dot__dot_fmt_dot__dot_builders_dot__dot_PadAdapter$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17h1ff0145579e8eb8dE:
		  add_wrap 2, 0, 4294967216, 2;
		  mstore 2, 0, 76, 1;
		  mstore 2, 0, 72, 8;
		  mstore 2, 0, 68, 9;
		  mstore 2, 0, 64, 18;
		  mstore 2, 0, 60, 19;
		  mstore 2, 0, 56, 20;
		  mstore 2, 0, 52, 21;
		  mstore 2, 0, 48, 22;
		  mstore 2, 0, 44, 23;
		  mstore 2, 0, 40, 24;
		  mstore 2, 0, 36, 25;
		  mstore 2, 0, 32, 26;
		  mstore 2, 0, 28, 27;
		  add_wrap 0, 12, 0, 18;
		  add_wrap 0, 11, 0, 8;
		  add_wrap 0, 0, 0, 25;
		  add_wrap 0, 0, 0, 22;
		  add_wrap 0, 0, 0, 27;
		  set_reg 11, 168431616;
		  add_wrap 11, 0, 4294965770, 23;
		  set_reg 11, 16842752;
		  add_wrap 11, 0, 256, 20;
		  mload 10, 8, 9, 32;
		  mload 10, 0, 11, 32;
		  mstore 2, 0, 24, 11;
		  mload 10, 4, 10, 32;
		  mstore 2, 0, 20, 10;
		  add_wrap 8, 0, 4294967295, 10;
		  mstore 2, 0, 12, 10;
		  sub_wrap_with_offset 0, 12, 0, 10;
		  mstore 2, 0, 16, 10;
		  add_wrap 0, 0, 10, 26;
		  set_reg 10, 2155905024;
		  add_wrap 10, 0, 128, 19;
		  mstore 2, 0, 8, 8;
		  mstore 2, 0, 4, 9;
		  jump ___dot_L100061f6, 32;
		___dot_L100061ce:
		  mload 2, 12, 10, 32;
		  add_wrap 10, 21, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 10, 0, 4294967286, 10;
		  is_diff_greater_than 0, 10, -(1), 10;
		___dot_L100061dc:
		  mload 9, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 0, 32;
		  mload 2, 20, 10, 32;
		  mload 10, 12, 13, 32;
		  sub_wrap_with_offset 21, 25, 0, 12;
		  add_wrap 8, 25, 0, 11;
		  mload 2, 24, 10, 32;
		  jump_dyn 13, 1;
		  add_wrap 0, 24, 0, 25;
		  branch_if_diff_nonzero 10, 0, ___dot_L1000631a;
		___dot_L100061f6:
		  and 27, 0, 1, 10;
		  branch_if_diff_nonzero 10, 0, ___dot_L10006316;
		  branch_if_diff_greater_than 18, 22, -1, ___dot_L10006208;
		  jump ___dot_L100062da, 32;
		___dot_L10006204:
		  branch_if_diff_greater_than 22, 18, 0, ___dot_L100062da;
		___dot_L10006208:
		  sub_wrap_with_offset 18, 22, 0, 16;
		  add_wrap 8, 22, 0, 10;
		  add_wrap 0, 0, 7, 11;
		  branch_if_diff_greater_than 16, 11, 0, ___dot_L10006234;
		  branch_if_diff_equal 18, 22, 0, ___dot_L100062d8;
		  add_wrap 0, 0, 0, 11;
		  mload 2, 16, 12, 32;
		  add_wrap 12, 22, 0, 12;
		  add_wrap 0, 10, 0, 13;
		___dot_L10006222:
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  branch_if_diff_equal 14, 26, 0, ___dot_L100062b8;
		  add_wrap 11, 0, 4294967295, 11;
		  add_wrap 13, 0, 1, 13;
		  branch_if_diff_nonzero 12, 11, ___dot_L10006222;
		  jump ___dot_L100062d8, 32;
		___dot_L10006234:
		  add_wrap 10, 0, 3, 14;
		  and 14, 0, 4294967292, 14;
		  sub_wrap_with_offset 14, 10, 0, 12;
		  branch_if_diff_equal 12, 0, 0, ___dot_L1000625e;
		  add_wrap 0, 0, 0, 13;
		___dot_L10006242:
		  add_wrap 10, 13, 0, 11;
		  mload 11, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  branch_if_diff_equal 11, 26, 0, ___dot_L100062bc;
		  add_wrap 13, 0, 1, 13;
		  branch_if_diff_nonzero 12, 13, ___dot_L10006242;
		  add_wrap 16, 0, 4294967288, 13;
		  branch_if_diff_greater_than 13, 12, -1, ___dot_L10006262;
		  jump ___dot_L10006292, 32;
		___dot_L1000625e:
		  add_wrap 16, 0, 4294967288, 13;
		___dot_L10006262:
		  add_wrap 0, 0, 4, 11;
		  add_wrap 14, 11, 0, 14;
		___dot_L10006266:
		  mload 14, 4294967292, 15, 32;
		  mload 14, 0, 11, 32;
		  xor 15, 23, 0, 9;
		  xor 11, 23, 0, 11;
		  sub_wrap_with_offset 20, 11, 0, 8;
		  or 11, 8, 0, 11;
		  sub_wrap_with_offset 20, 9, 0, 9;
		  or 15, 9, 0, 15;
		  and 11, 15, 0, 11;
		  and 11, 19, 0, 11;
		  branch_if_diff_nonzero 11, 19, ___dot_L10006292;
		  add_wrap 12, 0, 8, 12;
		  add_wrap 14, 0, 8, 14;
		  branch_if_diff_greater_than 13, 12, -1, ___dot_L10006266;
		___dot_L10006292:
		  branch_if_diff_equal 12, 16, 0, ___dot_L10006306;
		  add_wrap 10, 12, 0, 13;
		  sub_wrap_with_offset 0, 12, 0, 11;
		  mload 2, 16, 12, 32;
		  add_wrap 12, 22, 0, 12;
		  mload 2, 8, 8, 32;
		  mload 2, 4, 9, 32;
		___dot_L100062a6:
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  branch_if_diff_equal 14, 26, 0, ___dot_L100062b8;
		  add_wrap 11, 0, 4294967295, 11;
		  add_wrap 13, 0, 1, 13;
		  branch_if_diff_nonzero 12, 11, ___dot_L100062a6;
		  jump ___dot_L100062d8, 32;
		___dot_L100062b8:
		  sub_wrap_with_offset 0, 11, 0, 13;
		___dot_L100062bc:
		  add_wrap 13, 22, 0, 11;
		  add_wrap 11, 0, 1, 22;
		  branch_if_diff_greater_than 11, 18, -1, ___dot_L10006204;
		  add_wrap 10, 13, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_nonzero 10, 26, ___dot_L10006204;
		  add_wrap 0, 22, 0, 24;
		  add_wrap 0, 22, 0, 21;
		  jump ___dot_L100062e4, 32;
		___dot_L100062d8:
		  add_wrap 0, 18, 0, 22;
		___dot_L100062da:
		  add_wrap 0, 0, 1, 27;
		  add_wrap 0, 25, 0, 24;
		  add_wrap 0, 18, 0, 21;
		  branch_if_diff_equal 25, 18, 0, ___dot_L10006316;
		___dot_L100062e4:
		  mload 9, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100062fe;
		  mload 2, 20, 10, 32;
		  mload 10, 12, 13, 32;
		  add_wrap 0, 0, 4, 12;
		  mload 2, 24, 10, 32;
		  set_reg 11, 268440595;
		  jump_dyn 13, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L1000631a;
		___dot_L100062fe:
		  branch_if_diff_nonzero 21, 25, ___dot_L100061ce;
		  add_wrap 0, 0, 0, 10;
		  jump ___dot_L100061dc, 32;
		___dot_L10006306:
		  add_wrap 0, 18, 0, 22;
		  mload 2, 8, 8, 32;
		  mload 2, 4, 9, 32;
		  add_wrap 0, 0, 1, 27;
		  add_wrap 0, 25, 0, 24;
		  add_wrap 0, 18, 0, 21;
		  branch_if_diff_nonzero 25, 18, ___dot_L100062e4;
		___dot_L10006316:
		  add_wrap 0, 0, 0, 10;
		  jump ___dot_L1000631c, 32;
		___dot_L1000631a:
		  add_wrap 0, 0, 1, 10;
		___dot_L1000631c:
		  mload 2, 76, 1, 32;
		  mload 2, 72, 8, 32;
		  mload 2, 68, 9, 32;
		  mload 2, 64, 18, 32;
		  mload 2, 60, 19, 32;
		  mload 2, 56, 20, 32;
		  mload 2, 52, 21, 32;
		  mload 2, 48, 22, 32;
		  mload 2, 44, 23, 32;
		  mload 2, 40, 24, 32;
		  mload 2, 36, 25, 32;
		  mload 2, 32, 26, 32;
		  mload 2, 28, 27, 32;
		  add_wrap 2, 0, 80, 2;
		  jump_dyn 1, 32;
		_ZN68_$LT$core_dot__dot_fmt_dot__dot_builders_dot__dot_PadAdapter$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$10write_char17h4307d3afb358f024E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mstore 2, 0, 16, 18;
		  mstore 2, 0, 12, 19;
		  mload 10, 8, 9, 32;
		  mload 9, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 0, 18, 32;
		  mload 10, 4, 8, 32;
		  branch_if_diff_equal 12, 0, 0, ___dot_L1000637c;
		  mload 8, 12, 14, 32;
		  set_reg 13, 268440595;
		  add_wrap 0, 0, 4, 12;
		  add_wrap 0, 18, 0, 10;
		  add_wrap 0, 11, 0, 19;
		  add_wrap 0, 13, 0, 11;
		  jump_dyn 14, 1;
		  add_wrap 0, 19, 0, 11;
		  branch_if_diff_equal 10, 0, 0, ___dot_L1000637c;
		  add_wrap 0, 0, 1, 10;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  mload 2, 16, 18, 32;
		  mload 2, 12, 19, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		___dot_L1000637c:
		  add_wrap 11, 0, 4294967286, 10;
		  is_diff_greater_than 0, 10, -(1), 10;
		  mload 9, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 0, 32;
		  mload 8, 16, 15, 32;
		  add_wrap 0, 18, 0, 10;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  mload 2, 16, 18, 32;
		  mload 2, 12, 19, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 15, 32;
		_ZN4core3fmt8builders11DebugStruct5field17haf5912e584d12f37E:
		  add_wrap 2, 0, 4294967200, 2;
		  mstore 2, 0, 92, 1;
		  mstore 2, 0, 88, 8;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 76, 19;
		  mstore 2, 0, 72, 20;
		  mstore 2, 0, 68, 21;
		  mstore 2, 0, 64, 22;
		  mstore 2, 0, 60, 23;
		  add_wrap 0, 10, 0, 20;
		  mload 10, 4, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 0, 1, 21;
		  add_wrap 0, 0, 1, 8;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100063da;
		___dot_L100063ba:
		  mload 20, 4, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 8, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 20, 33, 4, 32;
		  mload 20, 5, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 21, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 20, 33, 5, 32;
		  add_wrap 0, 20, 0, 10;
		  mload 2, 92, 1, 32;
		  mload 2, 88, 8, 32;
		  mload 2, 84, 9, 32;
		  mload 2, 80, 18, 32;
		  mload 2, 76, 19, 32;
		  mload 2, 72, 20, 32;
		  mload 2, 68, 21, 32;
		  mload 2, 64, 22, 32;
		  mload 2, 60, 23, 32;
		  add_wrap 2, 0, 96, 2;
		  jump_dyn 1, 32;
		___dot_L100063da:
		  add_wrap 0, 14, 0, 19;
		  add_wrap 0, 13, 0, 18;
		  mload 20, 0, 9, 32;
		  mload 9, 28, 10, 32;
		  mload 20, 5, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  and 10, 0, 4, 14;
		  branch_if_diff_nonzero 14, 0, ___dot_L100063fe;
		  add_wrap 0, 11, 0, 22;
		  add_wrap 0, 12, 0, 23;
		  branch_if_diff_nonzero 13, 0, ___dot_L100064a8;
		  set_reg 11, 268442128;
		  jump ___dot_L100064b0, 32;
		___dot_L100063fe:
		  branch_if_diff_nonzero 13, 0, ___dot_L10006422;
		  mload 9, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  mload 13, 12, 14, 32;
		  set_reg 13, 268442133;
		  add_wrap 0, 12, 0, 22;
		  add_wrap 0, 0, 3, 12;
		  add_wrap 0, 11, 0, 8;
		  add_wrap 0, 13, 0, 11;
		  jump_dyn 14, 1;
		  add_wrap 0, 8, 0, 11;
		  add_wrap 0, 0, 1, 8;
		  branch_if_diff_nonzero 10, 0, ___dot_L100063ba;
		  add_wrap 0, 22, 0, 12;
		  mload 9, 28, 10, 32;
		___dot_L10006422:
		  mload 9, 20, 13, 32;
		  mload 9, 24, 14, 32;
		  add_wrap 0, 0, 1, 8;
		  mload 2, 23, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 8, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 23, 32;
		  mstore 2, 0, 8, 13;
		  mstore 2, 0, 12, 14;
		  add_wrap 2, 0, 23, 13;
		  mstore 2, 0, 16, 13;
		  mload 9, 16, 13, 32;
		  mload 9, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 9, 0, 15, 32;
		  mload 9, 4, 16, 32;
		  mload 9, 8, 17, 32;
		  mload 9, 12, 9, 32;
		  mstore 2, 0, 52, 10;
		  mstore 2, 0, 40, 13;
		  mload 2, 56, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 56, 32;
		  mstore 2, 0, 24, 15;
		  mstore 2, 0, 28, 16;
		  mstore 2, 0, 32, 17;
		  mstore 2, 0, 36, 9;
		  add_wrap 2, 0, 8, 10;
		  mstore 2, 0, 44, 10;
		  set_reg 10, 268440504;
		  mstore 2, 0, 48, 10;
		  add_wrap 2, 0, 8, 10;
		  jump _ZN68_$LT$core_dot__dot_fmt_dot__dot_builders_dot__dot_PadAdapter$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17h1ff0145579e8eb8dE, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L100063ba;
		  set_reg 11, 268442108;
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 0, 2, 12;
		  jump _ZN68_$LT$core_dot__dot_fmt_dot__dot_builders_dot__dot_PadAdapter$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17h1ff0145579e8eb8dE, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L100063ba;
		  mload 19, 12, 12, 32;
		  add_wrap 2, 0, 24, 11;
		  add_wrap 0, 18, 0, 10;
		  jump_dyn 12, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L100063ba;
		  mload 2, 48, 11, 32;
		  mload 2, 44, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442136;
		  add_wrap 0, 0, 2, 12;
		  jump_dyn 13, 1;
		  jump ___dot_L100064f6, 32;
		___dot_L100064a8:
		  set_reg 11, 268442131;
		___dot_L100064b0:
		  mload 9, 24, 12, 32;
		  mload 9, 20, 10, 32;
		  mload 12, 12, 14, 32;
		  xor 13, 0, 3, 12;
		  jump_dyn 14, 1;
		  add_wrap 0, 0, 1, 8;
		  branch_if_diff_nonzero 10, 0, ___dot_L100063ba;
		  add_wrap 0, 23, 0, 12;
		  add_wrap 0, 22, 0, 11;
		  mload 9, 24, 13, 32;
		  mload 9, 20, 10, 32;
		  mload 13, 12, 13, 32;
		  jump_dyn 13, 1;
		  add_wrap 0, 0, 1, 8;
		  branch_if_diff_nonzero 10, 0, ___dot_L100063ba;
		  mload 9, 24, 11, 32;
		  mload 9, 20, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442108;
		  add_wrap 0, 0, 2, 12;
		  jump_dyn 13, 1;
		  add_wrap 0, 0, 1, 8;
		  branch_if_diff_nonzero 10, 0, ___dot_L100063ba;
		  mload 19, 12, 12, 32;
		  add_wrap 0, 18, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  jump_dyn 12, 1;
		___dot_L100064f6:
		  add_wrap 0, 10, 0, 8;
		  jump ___dot_L100063ba, 32;
		_ZN4core3fmt8builders10DebugTuple5field17h23894ccf43c0af46E:
		  add_wrap 2, 0, 4294967216, 2;
		  mstore 2, 0, 76, 1;
		  mstore 2, 0, 72, 8;
		  mstore 2, 0, 68, 9;
		  mstore 2, 0, 64, 18;
		  mstore 2, 0, 60, 19;
		  mstore 2, 0, 56, 20;
		  mstore 2, 0, 52, 21;
		  mload 10, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 10, 0, 19, 32;
		  add_wrap 0, 0, 1, 8;
		  branch_if_diff_nonzero 13, 0, ___dot_L100065e6;
		  add_wrap 0, 11, 0, 18;
		  mload 10, 4, 9, 32;
		  mload 9, 28, 11, 32;
		  and 11, 0, 4, 13;
		  branch_if_diff_nonzero 13, 0, ___dot_L10006538;
		  is_diff_greater_than 19, 0, 0, 13;
		  add_wrap 0, 12, 0, 20;
		  add_wrap 0, 10, 0, 21;
		  branch_if_diff_equal 19, 0, 0, ___dot_L100065bc;
		  set_reg 11, 268442131;
		  jump ___dot_L100065c4, 32;
		___dot_L10006538:
		  add_wrap 0, 10, 0, 20;
		  branch_if_diff_nonzero 19, 0, ___dot_L1000655c;
		  add_wrap 0, 12, 0, 21;
		  mload 9, 24, 11, 32;
		  mload 9, 20, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442142;
		  add_wrap 0, 0, 2, 12;
		  jump_dyn 13, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 20, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L100065e6;
		  mload 9, 28, 11, 32;
		  add_wrap 0, 21, 0, 12;
		___dot_L1000655c:
		  mload 9, 20, 10, 32;
		  mload 9, 24, 13, 32;
		  add_wrap 0, 0, 1, 8;
		  mload 2, 15, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 8, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 15, 32;
		  mstore 2, 0, 0, 10;
		  mstore 2, 0, 4, 13;
		  add_wrap 2, 0, 15, 10;
		  mstore 2, 0, 8, 10;
		  mload 9, 16, 10, 32;
		  mload 9, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 9, 0, 14, 32;
		  mload 9, 4, 15, 32;
		  mload 9, 8, 16, 32;
		  mload 9, 12, 9, 32;
		  mstore 2, 0, 44, 11;
		  mstore 2, 0, 32, 10;
		  mload 2, 48, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 48, 32;
		  mstore 2, 0, 16, 14;
		  mstore 2, 0, 20, 15;
		  mstore 2, 0, 24, 16;
		  mstore 2, 0, 28, 9;
		  add_wrap 0, 2, 0, 10;
		  mload 12, 12, 12, 32;
		  mstore 2, 0, 36, 10;
		  set_reg 10, 268440504;
		  mstore 2, 0, 40, 10;
		  add_wrap 2, 0, 16, 11;
		  add_wrap 0, 18, 0, 10;
		  jump_dyn 12, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L100065e4;
		  mload 2, 40, 11, 32;
		  mload 2, 36, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442136;
		  add_wrap 0, 0, 2, 12;
		  jump_dyn 13, 1;
		  jump ___dot_L100065e2, 32;
		___dot_L100065bc:
		  set_reg 11, 268442141;
		___dot_L100065c4:
		  mload 9, 24, 12, 32;
		  mload 9, 20, 10, 32;
		  mload 12, 12, 14, 32;
		  add_wrap 13, 0, 1, 12;
		  jump_dyn 14, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 21, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L100065e6;
		  mload 20, 12, 12, 32;
		  add_wrap 0, 10, 0, 20;
		  add_wrap 0, 18, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  jump_dyn 12, 1;
		___dot_L100065e2:
		  add_wrap 0, 10, 0, 8;
		___dot_L100065e4:
		  add_wrap 0, 20, 0, 10;
		___dot_L100065e6:
		  mload 10, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 8, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 8, 32;
		  add_wrap 19, 0, 1, 19;
		  mstore 10, 0, 0, 19;
		  mload 2, 76, 1, 32;
		  mload 2, 72, 8, 32;
		  mload 2, 68, 9, 32;
		  mload 2, 64, 18, 32;
		  mload 2, 60, 19, 32;
		  mload 2, 56, 20, 32;
		  mload 2, 52, 21, 32;
		  add_wrap 2, 0, 80, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt8builders8DebugSet5entry17h708f2533bb55ba5dE:
		_ZN4core3fmt8builders9DebugList5entry17h3ba77a8ee7e5a7e4E:
		  add_wrap 2, 0, 4294967216, 2;
		  mstore 2, 0, 76, 1;
		  mstore 2, 0, 72, 8;
		  mstore 2, 0, 68, 9;
		  mstore 2, 0, 64, 18;
		  mstore 2, 0, 60, 19;
		  mstore 2, 0, 56, 20;
		  mstore 2, 0, 52, 21;
		  mload 10, 4, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 0, 0, 1, 19;
		  add_wrap 0, 0, 1, 8;
		  branch_if_diff_nonzero 13, 0, ___dot_L100066e2;
		  add_wrap 0, 11, 0, 18;
		  mload 10, 0, 9, 32;
		  mload 9, 28, 11, 32;
		  mload 10, 5, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  and 11, 0, 4, 14;
		  branch_if_diff_nonzero 14, 0, ___dot_L1000665c;
		  branch_if_diff_equal 13, 0, 0, ___dot_L10006650;
		  mload 9, 24, 11, 32;
		  mload 9, 20, 13, 32;
		  mload 11, 12, 14, 32;
		  set_reg 11, 268442131;
		  add_wrap 0, 12, 0, 20;
		  add_wrap 0, 0, 2, 12;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 13, 0, 10;
		  jump_dyn 14, 1;
		  add_wrap 0, 20, 0, 12;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 0, 1, 8;
		  branch_if_diff_nonzero 11, 0, ___dot_L100066e2;
		___dot_L10006650:
		  mload 12, 12, 12, 32;
		  add_wrap 0, 10, 0, 20;
		  add_wrap 0, 18, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  jump_dyn 12, 1;
		  jump ___dot_L100066de, 32;
		___dot_L1000665c:
		  add_wrap 0, 10, 0, 20;
		  branch_if_diff_nonzero 13, 0, ___dot_L10006680;
		  mload 9, 24, 11, 32;
		  mload 9, 20, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442145;
		  add_wrap 0, 12, 0, 21;
		  add_wrap 0, 0, 1, 12;
		  add_wrap 0, 0, 1, 8;
		  jump_dyn 13, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 20, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L100066e2;
		  add_wrap 0, 21, 0, 12;
		  mload 9, 28, 11, 32;
		___dot_L10006680:
		  mload 9, 20, 10, 32;
		  mload 9, 24, 13, 32;
		  add_wrap 0, 0, 1, 8;
		  mload 2, 15, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 8, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 15, 32;
		  mstore 2, 0, 0, 10;
		  mstore 2, 0, 4, 13;
		  add_wrap 2, 0, 15, 10;
		  mstore 2, 0, 8, 10;
		  mload 9, 16, 10, 32;
		  mload 9, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 9, 0, 14, 32;
		  mload 9, 4, 15, 32;
		  mload 9, 8, 16, 32;
		  mload 9, 12, 9, 32;
		  mstore 2, 0, 44, 11;
		  mstore 2, 0, 32, 10;
		  mload 2, 48, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 48, 32;
		  mstore 2, 0, 16, 14;
		  mstore 2, 0, 20, 15;
		  mstore 2, 0, 24, 16;
		  mstore 2, 0, 28, 9;
		  add_wrap 0, 2, 0, 10;
		  mload 12, 12, 12, 32;
		  mstore 2, 0, 36, 10;
		  set_reg 10, 268440504;
		  mstore 2, 0, 40, 10;
		  add_wrap 2, 0, 16, 11;
		  add_wrap 0, 18, 0, 10;
		  jump_dyn 12, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L100066e0;
		  mload 2, 40, 11, 32;
		  mload 2, 36, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442136;
		  add_wrap 0, 0, 2, 12;
		  jump_dyn 13, 1;
		___dot_L100066de:
		  add_wrap 0, 10, 0, 8;
		___dot_L100066e0:
		  add_wrap 0, 20, 0, 10;
		___dot_L100066e2:
		  mload 10, 4, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 8, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 4, 32;
		  mload 10, 5, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 19, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 5, 32;
		  mload 2, 76, 1, 32;
		  mload 2, 72, 8, 32;
		  mload 2, 68, 9, 32;
		  mload 2, 64, 18, 32;
		  mload 2, 60, 19, 32;
		  mload 2, 56, 20, 32;
		  mload 2, 52, 21, 32;
		  add_wrap 2, 0, 80, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt8builders9DebugList6finish17h9c9985aa60f305f9E:
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  add_wrap 0, 10, 0, 8;
		  mload 10, 4, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 0, 1, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10006720;
		  mload 8, 0, 10, 32;
		  mload 10, 24, 11, 32;
		  mload 10, 20, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442146;
		  add_wrap 0, 0, 1, 12;
		  jump_dyn 13, 1;
		___dot_L10006720:
		  mload 8, 4, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 4, 32;
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt3num14parse_u64_into17h01a6afa4fe8ccbc6E:
		  add_wrap 2, 0, 4294967232, 2;
		  mstore 2, 0, 60, 1;
		  mstore 2, 0, 56, 8;
		  mstore 2, 0, 52, 9;
		  mstore 2, 0, 48, 18;
		  mstore 2, 0, 44, 19;
		  mstore 2, 0, 40, 20;
		  mstore 2, 0, 36, 21;
		  mstore 2, 0, 32, 22;
		  mstore 2, 0, 28, 23;
		  mstore 2, 0, 24, 24;
		  mstore 2, 0, 20, 25;
		  mstore 2, 0, 16, 26;
		  mstore 2, 0, 12, 27;
		  add_wrap 0, 13, 0, 18;
		  mload 13, 0, 24, 32;
		  add_wrap 0, 0, 19, 13;
		  branch_if_diff_greater_than 13, 24, -1, ___dot_L10006ba4;
		  add_wrap 0, 12, 0, 19;
		  set_reg 12, 2328306;
		  branch_if_diff_equal 11, 12, 0, ___dot_L100067b0;
		  is_diff_greater_than 12, 11, 0, 12;
		  set_reg 25, 268442290;
		  branch_if_diff_equal 12, 0, 0, ___dot_L100067c2;
		___dot_L10006770:
		  set_reg 12, 99999744;
		  add_wrap 12, 0, 256, 8;
		  is_diff_greater_than 8, 10, 0, 12;
		  is_diff_greater_than 0, 11, -(1), 13;
		  and 12, 13, 0, 12;
		  branch_if_diff_equal 12, 0, 0, ___dot_L100069d2;
		  shr 10, 0, 4, 11;
		  add_wrap 0, 0, 625, 12;
		  branch_if_diff_greater_than 11, 12, -1, ___dot_L10006aac;
		___dot_L10006792:
		  add_wrap 0, 0, 100, 11;
		  branch_if_diff_greater_than 10, 11, -1, ___dot_L10006b26;
		___dot_L1000679a:
		  wrap16 10, 65536, 11;
		  shr 11, 0, 16, 11;
		  add_wrap 0, 0, 10, 12;
		  branch_if_diff_greater_than 11, 12, -1, ___dot_L10006b68;
		___dot_L100067a6:
		  add_wrap 24, 0, 4294967295, 24;
		  add_wrap 19, 24, 0, 19;
		  or 10, 0, 48, 10;
		  jump ___dot_L10006b7e, 32;
		___dot_L100067b0:
		  set_reg 12, 1874919424;
		  is_diff_greater_than 12, 10, 0, 12;
		  set_reg 25, 268442290;
		  branch_if_diff_nonzero 12, 0, ___dot_L10006770;
		___dot_L100067c2:
		  set_reg 12, 2326528;
		  add_wrap 12, 0, 1778, 20;
		  set_reg 12, 1874919424;
		  set_reg 22, 1874919424;
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 11, 0, 8;
		  add_wrap 0, 20, 0, 13;
		  jump __udivdi3, 1;
		  add_wrap 0, 10, 0, 21;
		  mul 10, 20, 10, 32;
		  mul 21, 22, 32, 12;
		  add_wrap 10, 12, 0, 10;
		  mul 11, 22, 11, 32;
		  mul 21, 22, 12, 32;
		  sub_wrap_with_offset 8, 11, 0, 8;
		  sub_wrap_with_offset 8, 10, 0, 8;
		  is_diff_greater_than 12, 9, 0, 10;
		  mstore 2, 0, 8, 18;
		  sub_wrap_with_offset 8, 10, 0, 18;
		  sub_wrap_with_offset 9, 12, 0, 9;
		  set_reg 10, 24576;
		  add_wrap 10, 0, 4294966003, 13;
		  set_reg 12, 276447232;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  jump __udivdi3, 1;
		  mstore 2, 0, 4, 10;
		  set_reg 12, 3567587328;
		  add_wrap 0, 0, 232, 13;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  jump __udivdi3, 1;
		  wrap16 10, 65536, 11;
		  shr 11, 0, 18, 11;
		  set_reg 12, 5243;
		  mul 11, 12, 11, 32;
		  shr 11, 0, 17, 11;
		  add_wrap 0, 0, 100, 20;
		  mul 11, 20, 11, 32;
		  sub_wrap_with_offset 10, 11, 0, 10;
		  mstore 2, 0, 0, 10;
		  set_reg 10, 1410064384;
		  add_wrap 10, 0, 1024, 12;
		  add_wrap 0, 0, 2, 13;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  jump __udivdi3, 1;
		  set_reg 11, 1374388224;
		  add_wrap 11, 0, 1311, 8;
		  mul 10, 8, 32, 11;
		  shr 11, 0, 5, 11;
		  mul 11, 20, 11, 32;
		  sub_wrap_with_offset 10, 11, 0, 27;
		  set_reg 10, 99999744;
		  add_wrap 10, 0, 256, 12;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  add_wrap 0, 0, 0, 13;
		  jump __udivdi3, 1;
		  mul 10, 8, 32, 11;
		  shr 11, 0, 5, 11;
		  mul 11, 20, 11, 32;
		  sub_wrap_with_offset 10, 11, 0, 26;
		  set_reg 10, 999424;
		  add_wrap 10, 0, 576, 12;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  add_wrap 0, 0, 0, 13;
		  jump __udivdi3, 1;
		  add_wrap 0, 0, 100, 12;
		  add_wrap 0, 0, 0, 13;
		  jump __umoddi3, 1;
		  add_wrap 0, 10, 0, 22;
		  set_reg 10, 8192;
		  add_wrap 10, 0, 1808, 12;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  add_wrap 0, 0, 0, 13;
		  jump __udivdi3, 1;
		  add_wrap 0, 0, 100, 12;
		  add_wrap 0, 0, 0, 13;
		  jump __umoddi3, 1;
		  add_wrap 0, 10, 0, 23;
		  add_wrap 0, 0, 100, 12;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  mload 2, 8, 18, 32;
		  add_wrap 0, 0, 0, 13;
		  jump __udivdi3, 1;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 0, 100, 12;
		  add_wrap 0, 0, 0, 13;
		  jump __umoddi3, 1;
		  mul 8, 20, 11, 32;
		  sub_wrap_with_offset 9, 11, 0, 11;
		  mload 2, 4, 12, 32;
		  wrap16 12, 2, 12;
		  add_wrap 25, 12, 0, 13;
		  mload 13, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  add_wrap 24, 0, 4294967280, 24;
		  add_wrap 19, 24, 0, 12;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 12, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 1, 32;
		  mload 2, 0, 14, 32;
		  wrap16 14, 65536, 32;
		  wrap16 32, 2, 14;
		  shr 14, 0, 16, 14;
		  add_wrap 14, 25, 0, 14;
		  mload 14, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  mload 14, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mstore 18, 0, 0, 24;
		  mload 12, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 0, 32;
		  mload 12, 3, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 3, 32;
		  mload 12, 2, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 2, 32;
		  wrap16 27, 2, 27;
		  add_wrap 27, 25, 0, 27;
		  mload 27, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 27, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  wrap16 26, 2, 26;
		  add_wrap 26, 25, 0, 26;
		  mload 26, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  mload 26, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 9;
		  mload 12, 5, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 5, 32;
		  mload 12, 4, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 4, 32;
		  mload 12, 7, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 7, 32;
		  mload 12, 6, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 9, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 6, 32;
		  wrap16 22, 2, 22;
		  add_wrap 22, 25, 0, 22;
		  mload 22, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 22, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  wrap16 23, 2, 23;
		  add_wrap 23, 25, 0, 23;
		  mload 23, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  mload 23, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 9;
		  mload 12, 9, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 9, 32;
		  mload 12, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 8, 32;
		  mload 12, 11, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 11, 32;
		  mload 12, 10, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 9, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 10, 32;
		  wrap16 10, 2, 10;
		  add_wrap 10, 25, 0, 10;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  wrap16 11, 2, 11;
		  add_wrap 11, 25, 0, 11;
		  mload 11, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 11, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 12, 13, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 13, 32;
		  mload 12, 12, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 12, 32;
		  mload 12, 15, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 15, 32;
		  mload 12, 14, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 14, 32;
		  add_wrap 0, 21, 0, 10;
		  add_wrap 0, 0, 100, 11;
		  branch_if_diff_greater_than 11, 21, 0, ___dot_L1000679a;
		  jump ___dot_L10006b26, 32;
		___dot_L100069d2:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 8, 0, 12;
		  add_wrap 0, 0, 0, 13;
		  jump __udivdi3, 1;
		  mul 10, 8, 11, 32;
		  sub_wrap_with_offset 9, 11, 0, 9;
		  set_reg 11, 1125899907;
		  mul 9, 11, 32, 11;
		  set_reg 12, 3518437209;
		  mul 9, 12, 32, 12;
		  shr 12, 0, 13, 13;
		  shr 12, 0, 15, 12;
		  wrap16 12, 65536, 32;
		  wrap16 32, 4, 12;
		  set_reg 14, 85901312;
		  mul 12, 14, 32, 12;
		  shr 12, 0, 17, 12;
		  add_wrap 0, 0, 100, 14;
		  mul 12, 14, 12, 32;
		  sub_wrap_with_offset 13, 12, 0, 13;
		  set_reg 12, 1374389535;
		  mul 9, 12, 32, 12;
		  shr 12, 0, 5, 12;
		  set_reg 15, 42949673;
		  mul 12, 15, 32, 15;
		  mul 15, 14, 15, 32;
		  sub_wrap_with_offset 12, 15, 0, 15;
		  mul 12, 14, 12, 32;
		  sub_wrap_with_offset 9, 12, 0, 9;
		  shr 11, 0, 17, 11;
		  and 11, 0, 4294967294, 11;
		  add_wrap 11, 25, 0, 11;
		  mload 11, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 24, 0, 4294967288, 24;
		  add_wrap 19, 24, 0, 14;
		  mload 11, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 14, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 1, 32;
		  wrap16 13, 65536, 32;
		  wrap16 32, 2, 13;
		  shr 13, 0, 16, 13;
		  add_wrap 13, 25, 0, 13;
		  mload 13, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mstore 18, 0, 0, 24;
		  mload 14, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 0, 32;
		  mload 14, 3, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 3, 32;
		  mload 14, 2, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 2, 32;
		  wrap16 15, 2, 15;
		  add_wrap 15, 25, 0, 15;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 15, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  wrap16 9, 2, 9;
		  add_wrap 9, 25, 0, 9;
		  mload 9, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 9, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  mload 14, 5, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 5, 32;
		  mload 14, 4, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 4, 32;
		  mload 14, 7, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 7, 32;
		  mload 14, 6, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 6, 32;
		  shr 10, 0, 4, 11;
		  add_wrap 0, 0, 625, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L10006792;
		___dot_L10006aac:
		  set_reg 11, 3518437209;
		  mul 10, 11, 32, 11;
		  shr 11, 0, 13, 11;
		  set_reg 12, 10000;
		  mul 11, 12, 12, 32;
		  sub_wrap_with_offset 10, 12, 0, 10;
		  wrap16 10, 65536, 12;
		  shr 12, 0, 18, 12;
		  set_reg 13, 5243;
		  mul 12, 13, 12, 32;
		  shr 12, 0, 17, 13;
		  shr 12, 0, 16, 12;
		  and 12, 0, 2046, 12;
		  add_wrap 0, 0, 100, 14;
		  mul 13, 14, 13, 32;
		  sub_wrap_with_offset 10, 13, 0, 10;
		  wrap16 10, 65536, 32;
		  wrap16 32, 2, 10;
		  shr 10, 0, 16, 10;
		  add_wrap 19, 24, 0, 13;
		  add_wrap 24, 0, 4294967292, 24;
		  add_wrap 12, 25, 0, 12;
		  add_wrap 19, 24, 0, 14;
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  mload 12, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 10, 25, 0, 10;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 9;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 14, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 1, 32;
		  mload 14, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 0, 32;
		  mload 13, 4294967295, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 9, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 4294967295, 32;
		  mload 13, 4294967294, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 4294967294, 32;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 0, 100, 11;
		  branch_if_diff_greater_than 11, 10, 0, ___dot_L1000679a;
		___dot_L10006b26:
		  wrap16 10, 65536, 12;
		  shr 12, 0, 18, 12;
		  set_reg 13, 5243;
		  mul 12, 13, 12, 32;
		  shr 12, 0, 17, 12;
		  mul 12, 11, 11, 32;
		  sub_wrap_with_offset 10, 11, 0, 10;
		  wrap16 10, 65536, 32;
		  wrap16 32, 2, 10;
		  shr 10, 0, 16, 10;
		  add_wrap 10, 25, 0, 10;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 24, 0, 4294967294, 24;
		  add_wrap 19, 24, 0, 13;
		  mload 13, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 1, 32;
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		  add_wrap 0, 12, 0, 10;
		  wrap16 12, 65536, 11;
		  shr 11, 0, 16, 11;
		  add_wrap 0, 0, 10, 12;
		  branch_if_diff_greater_than 12, 11, 0, ___dot_L100067a6;
		___dot_L10006b68:
		  wrap16 10, 65536, 32;
		  wrap16 32, 2, 10;
		  shr 10, 0, 16, 10;
		  add_wrap 10, 25, 0, 10;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 24, 0, 4294967294, 24;
		  add_wrap 19, 24, 0, 19;
		  mload 19, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 1, 32;
		___dot_L10006b7e:
		  mload 19, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 19, 33, 0, 32;
		  mstore 18, 0, 0, 24;
		  mload 2, 60, 1, 32;
		  mload 2, 56, 8, 32;
		  mload 2, 52, 9, 32;
		  mload 2, 48, 18, 32;
		  mload 2, 44, 19, 32;
		  mload 2, 40, 20, 32;
		  mload 2, 36, 21, 32;
		  mload 2, 32, 22, 32;
		  mload 2, 28, 23, 32;
		  mload 2, 24, 24, 32;
		  mload 2, 20, 25, 32;
		  mload 2, 16, 26, 32;
		  mload 2, 12, 27, 32;
		  add_wrap 2, 0, 64, 2;
		  jump_dyn 1, 32;
		___dot_L10006ba4:
		  set_reg 10, 268442490;
		  set_reg 12, 268442520;
		  add_wrap 0, 0, 28, 11;
		  jump _ZN4core9panicking5panic17h6885cb3ca4748be7E, 1;
		_ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$i128$GT$3fmt17h0486ee993b4810b9E:
		  add_wrap 0, 10, 0, 12;
		  mload 10, 0, 10, 32;
		  mload 12, 12, 13, 32;
		  mload 12, 4, 15, 32;
		  mload 12, 8, 12, 32;
		  add_wrap 0, 11, 0, 16;
		  to_signed 13, 32;
		  is_diff_greater_than 0, 32, -(0), 11;
		  xor 11, 0, 1, 14;
		  to_signed 13, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10006c08;
		  sub_wrap_with_offset 0, 12, 0, 6;
		  is_diff_greater_than 15, 0, 0, 17;
		  is_diff_greater_than 10, 0, 0, 5;
		  or 5, 17, 0, 11;
		  is_diff_greater_than 12, 0, 0, 12;
		  sub_wrap_with_offset 6, 11, 0, 17;
		  is_diff_greater_than 11, 6, 0, 11;
		  add_wrap 12, 13, 0, 12;
		  sub_wrap_with_offset 0, 12, 0, 13;
		  sub_wrap_with_offset 13, 11, 0, 13;
		  sub_wrap_with_offset 0, 10, 0, 10;
		  sub_wrap_with_offset 0, 15, 0, 11;
		  sub_wrap_with_offset 11, 5, 0, 15;
		  add_wrap 0, 17, 0, 12;
		___dot_L10006c08:
		  add_wrap 0, 15, 0, 11;
		  add_wrap 0, 16, 0, 15;
		  jump _ZN4core3fmt3num8fmt_u12817h67bd5b311e55127aE, 32;
		_ZN4core3fmt3num8fmt_u12817h67bd5b311e55127aE:
		  add_wrap 2, 0, 4294967200, 2;
		  mstore 2, 0, 92, 1;
		  mstore 2, 0, 88, 8;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 76, 19;
		  mstore 2, 0, 72, 20;
		  mstore 2, 0, 68, 21;
		  mstore 2, 0, 64, 22;
		  mstore 2, 0, 60, 23;
		  mstore 2, 0, 56, 24;
		  mstore 2, 0, 52, 25;
		  mstore 2, 0, 48, 26;
		  mstore 2, 0, 44, 27;
		  add_wrap 0, 15, 0, 18;
		  add_wrap 0, 14, 0, 19;
		  add_wrap 0, 11, 0, 21;
		  add_wrap 0, 10, 0, 20;
		  shr 12, 0, 19, 10;
		  or 10, 13, 0, 10;
		  is_diff_greater_than 0, 10, -(1), 10;
		  set_reg 11, 524288;
		  xor 11, 12, 0, 11;
		  or 11, 13, 0, 11;
		  is_diff_greater_than 0, 11, -(1), 11;
		  add_wrap 11, 0, 4294967295, 11;
		  and 10, 11, 0, 10;
		  add_wrap 0, 0, 39, 11;
		  mstore 2, 0, 40, 11;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10006c8c;
		  shr 20, 0, 19, 10;
		  wrap16 21, 8192, 11;
		  or 10, 11, 0, 10;
		  shr 21, 0, 19, 11;
		  wrap16 12, 8192, 12;
		  or 11, 12, 0, 11;
		  set_reg 12, 3831533885;
		  set_reg 13, 4440;
		  jump __udivdi3, 1;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 11, 0, 9;
		  add_wrap 0, 0, 0, 22;
		  add_wrap 0, 0, 0, 23;
		  jump ___dot_L10006e4a, 32;
		___dot_L10006c8c:
		  set_reg 10, 3895861248;
		  add_wrap 10, 0, 4294965619, 6;
		  mul 20, 6, 32, 10;
		  mul 21, 6, 11, 32;
		  add_wrap 10, 11, 0, 10;
		  is_diff_greater_than 11, 10, 0, 11;
		  mul 21, 6, 32, 14;
		  add_wrap 11, 14, 0, 11;
		  set_reg 14, 2509828096;
		  add_wrap 14, 0, 1265, 15;
		  mul 20, 15, 14, 32;
		  add_wrap 10, 14, 0, 10;
		  is_diff_greater_than 14, 10, 0, 10;
		  mul 20, 15, 32, 14;
		  add_wrap 10, 14, 0, 10;
		  add_wrap 10, 11, 0, 10;
		  mul 21, 15, 14, 32;
		  add_wrap 14, 10, 0, 17;
		  is_diff_greater_than 14, 17, 0, 16;
		  is_diff_greater_than 11, 10, 0, 10;
		  mul 21, 15, 32, 11;
		  add_wrap 10, 11, 0, 10;
		  add_wrap 16, 10, 0, 16;
		  set_reg 10, 3679105024;
		  add_wrap 10, 0, 210, 28;
		  mul 20, 28, 32, 11;
		  mul 21, 28, 14, 32;
		  add_wrap 11, 14, 0, 11;
		  is_diff_greater_than 14, 11, 0, 10;
		  mul 21, 28, 32, 14;
		  add_wrap 14, 10, 0, 5;
		  set_reg 10, 1980704062;
		  mul 20, 10, 8, 32;
		  add_wrap 11, 8, 0, 11;
		  is_diff_greater_than 8, 11, 0, 8;
		  mul 20, 10, 32, 9;
		  add_wrap 8, 9, 0, 8;
		  add_wrap 5, 8, 0, 14;
		  mul 21, 10, 8, 32;
		  add_wrap 8, 14, 0, 9;
		  is_diff_greater_than 8, 9, 0, 29;
		  is_diff_greater_than 5, 14, 0, 14;
		  mul 21, 10, 32, 8;
		  add_wrap 14, 8, 0, 14;
		  mul 20, 28, 5, 32;
		  add_wrap 5, 17, 0, 5;
		  is_diff_greater_than 17, 5, 0, 17;
		  add_wrap 11, 16, 0, 11;
		  add_wrap 11, 17, 0, 7;
		  add_wrap 14, 29, 0, 14;
		  branch_if_diff_equal 7, 16, 0, ___dot_L10006d44;
		  is_diff_greater_than 16, 7, 0, 17;
		___dot_L10006d44:
		  add_wrap 17, 9, 0, 17;
		  is_diff_greater_than 9, 17, 0, 16;
		  add_wrap 16, 14, 0, 16;
		  mul 12, 6, 32, 11;
		  mul 13, 6, 14, 32;
		  add_wrap 11, 14, 0, 11;
		  is_diff_greater_than 14, 11, 0, 14;
		  mul 13, 6, 32, 9;
		  add_wrap 9, 14, 0, 9;
		  mul 12, 15, 14, 32;
		  add_wrap 14, 11, 0, 29;
		  is_diff_greater_than 14, 29, 0, 14;
		  mul 12, 15, 32, 8;
		  add_wrap 14, 8, 0, 14;
		  add_wrap 14, 9, 0, 14;
		  mul 13, 15, 11, 32;
		  add_wrap 11, 14, 0, 8;
		  is_diff_greater_than 11, 8, 0, 30;
		  is_diff_greater_than 9, 14, 0, 11;
		  mul 13, 15, 32, 14;
		  add_wrap 14, 11, 0, 14;
		  mul 12, 6, 11, 32;
		  add_wrap 11, 5, 0, 11;
		  is_diff_greater_than 5, 11, 0, 9;
		  add_wrap 29, 9, 0, 11;
		  add_wrap 11, 7, 0, 11;
		  add_wrap 14, 30, 0, 15;
		  branch_if_diff_equal 11, 7, 0, ___dot_L10006da6;
		  is_diff_greater_than 7, 11, 0, 9;
		___dot_L10006da6:
		  add_wrap 8, 9, 0, 6;
		  is_diff_greater_than 8, 6, 0, 11;
		  add_wrap 15, 11, 0, 5;
		  mul 12, 28, 32, 11;
		  mul 13, 28, 14, 32;
		  add_wrap 11, 14, 0, 11;
		  is_diff_greater_than 14, 11, 0, 14;
		  mul 13, 28, 32, 8;
		  add_wrap 8, 14, 0, 8;
		  mul 12, 10, 14, 32;
		  add_wrap 14, 11, 0, 15;
		  is_diff_greater_than 14, 15, 0, 11;
		  mul 12, 10, 32, 14;
		  add_wrap 11, 14, 0, 11;
		  add_wrap 11, 8, 0, 11;
		  mul 13, 10, 14, 32;
		  add_wrap 14, 11, 0, 9;
		  is_diff_greater_than 14, 9, 0, 14;
		  is_diff_greater_than 8, 11, 0, 11;
		  mul 13, 10, 32, 10;
		  add_wrap 10, 11, 0, 13;
		  mul 12, 28, 11, 32;
		  add_wrap 11, 17, 0, 11;
		  is_diff_greater_than 17, 11, 0, 10;
		  add_wrap 15, 16, 0, 15;
		  add_wrap 15, 10, 0, 8;
		  add_wrap 13, 14, 0, 12;
		  branch_if_diff_equal 8, 16, 0, ___dot_L10006e0e;
		  is_diff_greater_than 16, 8, 0, 10;
		___dot_L10006e0e:
		  add_wrap 10, 9, 0, 10;
		  is_diff_greater_than 9, 10, 0, 14;
		  add_wrap 6, 11, 0, 6;
		  is_diff_greater_than 11, 6, 0, 13;
		  add_wrap 8, 5, 0, 11;
		  add_wrap 11, 13, 0, 11;
		  add_wrap 12, 14, 0, 12;
		  branch_if_diff_equal 11, 8, 0, ___dot_L10006e2a;
		  is_diff_greater_than 8, 11, 0, 13;
		___dot_L10006e2a:
		  add_wrap 0, 0, 0, 23;
		  add_wrap 13, 10, 0, 13;
		  is_diff_greater_than 10, 13, 0, 10;
		  add_wrap 10, 12, 0, 10;
		  shr 13, 0, 30, 12;
		  wrap16 10, 4, 9;
		  or 9, 12, 0, 9;
		  wrap16 13, 4, 13;
		  shr 11, 0, 30, 11;
		  or 11, 13, 0, 8;
		  shr 10, 0, 30, 22;
		___dot_L10006e4a:
		  set_reg 26, 1981284352;
		  set_reg 10, 1966661632;
		  add_wrap 10, 0, 4294966523, 27;
		  mul 8, 26, 32, 10;
		  mul 9, 26, 11, 32;
		  add_wrap 11, 10, 0, 11;
		  mul 8, 27, 12, 32;
		  mul 8, 26, 13, 32;
		  add_wrap 13, 20, 0, 10;
		  is_diff_greater_than 13, 10, 0, 13;
		  add_wrap 12, 21, 0, 12;
		  add_wrap 11, 12, 0, 11;
		  add_wrap 11, 13, 0, 11;
		  add_wrap 2, 0, 1, 12;
		  add_wrap 2, 0, 40, 13;
		  add_wrap 2, 0, 1, 25;
		  jump _ZN4core3fmt3num14parse_u64_into17h01a6afa4fe8ccbc6E, 1;
		  or 8, 22, 0, 10;
		  mload 2, 40, 12, 32;
		  or 9, 23, 0, 11;
		  or 10, 11, 0, 10;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10006f46;
		  add_wrap 2, 0, 21, 10;
		  add_wrap 12, 0, 4294967276, 12;
		  add_wrap 0, 0, 48, 11;
		  jump memset, 1;
		  add_wrap 0, 0, 20, 10;
		  mstore 2, 0, 40, 10;
		  shr 8, 0, 19, 10;
		  wrap16 9, 8192, 11;
		  or 10, 11, 0, 21;
		  shr 9, 0, 19, 10;
		  wrap16 22, 8192, 22;
		  or 10, 22, 0, 22;
		  set_reg 10, 3831533568;
		  add_wrap 10, 0, 317, 23;
		  set_reg 10, 4096;
		  add_wrap 10, 0, 344, 24;
		  add_wrap 0, 21, 0, 10;
		  add_wrap 0, 22, 0, 11;
		  add_wrap 0, 23, 0, 12;
		  add_wrap 0, 24, 0, 13;
		  jump __udivdi3, 1;
		  add_wrap 0, 10, 0, 20;
		  mul 10, 26, 32, 10;
		  mul 11, 26, 11, 32;
		  add_wrap 11, 10, 0, 11;
		  mul 20, 27, 12, 32;
		  mul 20, 26, 13, 32;
		  add_wrap 13, 8, 0, 10;
		  is_diff_greater_than 13, 10, 0, 13;
		  add_wrap 12, 9, 0, 12;
		  add_wrap 11, 12, 0, 11;
		  add_wrap 11, 13, 0, 11;
		  add_wrap 2, 0, 1, 12;
		  add_wrap 2, 0, 40, 13;
		  jump _ZN4core3fmt3num14parse_u64_into17h01a6afa4fe8ccbc6E, 1;
		  branch_if_diff_equal 22, 24, 0, ___dot_L10006f22;
		  shr 22, 0, 3, 10;
		  is_diff_greater_than 0, 10, -(555), 10;
		  mload 2, 40, 12, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10006f2a;
		  jump ___dot_L10006f46, 32;
		___dot_L10006f22:
		  is_diff_greater_than 23, 21, 0, 10;
		  mload 2, 40, 12, 32;
		  branch_if_diff_nonzero 10, 0, ___dot_L10006f46;
		___dot_L10006f2a:
		  add_wrap 2, 0, 2, 10;
		  add_wrap 12, 0, 4294967295, 12;
		  add_wrap 0, 0, 48, 11;
		  jump memset, 1;
		  add_wrap 0, 0, 0, 12;
		  or 20, 0, 48, 10;
		  mload 2, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 1, 32;
		___dot_L10006f46:
		  add_wrap 25, 12, 0, 14;
		  add_wrap 0, 0, 39, 15;
		  sub_wrap_with_offset 15, 12, 0, 15;
		  add_wrap 0, 0, 1, 12;
		  add_wrap 0, 18, 0, 10;
		  add_wrap 0, 19, 0, 11;
		  add_wrap 0, 0, 0, 13;
		  jump _ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E, 1;
		  mload 2, 92, 1, 32;
		  mload 2, 88, 8, 32;
		  mload 2, 84, 9, 32;
		  mload 2, 80, 18, 32;
		  mload 2, 76, 19, 32;
		  mload 2, 72, 20, 32;
		  mload 2, 68, 21, 32;
		  mload 2, 64, 22, 32;
		  mload 2, 60, 23, 32;
		  mload 2, 56, 24, 32;
		  mload 2, 52, 25, 32;
		  mload 2, 48, 26, 32;
		  mload 2, 44, 27, 32;
		  add_wrap 2, 0, 96, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt5Write9write_fmt17hf6b2db250f69dc51E:
		  set_reg 12, 268440504;
		  add_wrap 0, 11, 0, 13;
		  add_wrap 0, 12, 0, 11;
		  add_wrap 0, 13, 0, 12;
		  jump _ZN4core3fmt5write17hd984f2c6cd7a2630E, 32;
		_ZN4core3fmt5write17hd984f2c6cd7a2630E:
		  add_wrap 2, 0, 4294967216, 2;
		  mstore 2, 0, 76, 1;
		  mstore 2, 0, 72, 8;
		  mstore 2, 0, 68, 9;
		  mstore 2, 0, 64, 18;
		  mstore 2, 0, 60, 19;
		  mstore 2, 0, 56, 20;
		  mstore 2, 0, 52, 21;
		  mstore 2, 0, 48, 22;
		  mstore 2, 0, 44, 23;
		  add_wrap 0, 12, 0, 19;
		  mstore 2, 0, 36, 0;
		  add_wrap 0, 0, 32, 12;
		  mstore 2, 0, 24, 12;
		  add_wrap 0, 0, 3, 12;
		  mload 2, 40, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 40, 32;
		  mload 19, 16, 9, 32;
		  mstore 2, 0, 8, 0;
		  mstore 2, 0, 16, 0;
		  mstore 2, 0, 28, 10;
		  mstore 2, 0, 32, 11;
		  branch_if_diff_equal 9, 0, 0, ___dot_L1000707e;
		  mload 19, 20, 21, 32;
		  branch_if_diff_equal 21, 0, 0, ___dot_L100070d2;
		  mload 19, 0, 8, 32;
		  mload 19, 8, 20, 32;
		  add_wrap 21, 0, 4294967295, 10;
		  wrap16 10, 32, 10;
		  shr 10, 0, 5, 10;
		  add_wrap 10, 0, 1, 18;
		  add_wrap 8, 0, 4, 8;
		  wrap16 21, 32, 21;
		  add_wrap 9, 0, 16, 9;
		  add_wrap 0, 0, 2, 22;
		  add_wrap 0, 0, 1, 23;
		___dot_L10006fec:
		  mload 8, 0, 12, 32;
		  branch_if_diff_equal 12, 0, 0, ___dot_L10006ffe;
		  mload 2, 32, 13, 32;
		  mload 2, 28, 10, 32;
		  mload 8, 4294967292, 11, 32;
		  mload 13, 12, 13, 32;
		  jump_dyn 13, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L100070f6;
		___dot_L10006ffe:
		  mload 9, 0, 12, 32;
		  mload 9, 12, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 9, 8, 14, 32;
		  mload 9, 4294967288, 11, 32;
		  mload 9, 4294967292, 10, 32;
		  mstore 2, 0, 24, 12;
		  mload 2, 40, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 40, 32;
		  mstore 2, 0, 36, 14;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007034;
		  branch_if_diff_nonzero 11, 23, ___dot_L10007024;
		  wrap16 10, 8, 10;
		  add_wrap 10, 20, 0, 10;
		  mload 10, 4, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007032;
		___dot_L10007024:
		  mload 9, 4294967280, 12, 32;
		  mstore 2, 0, 8, 0;
		  mstore 2, 0, 12, 10;
		  branch_if_diff_nonzero 12, 22, ___dot_L10007042;
		  jump ___dot_L10007054, 32;
		___dot_L10007032:
		  mload 10, 0, 10, 32;
		___dot_L10007034:
		  add_wrap 0, 0, 1, 11;
		  mload 9, 4294967280, 12, 32;
		  mstore 2, 0, 8, 11;
		  mstore 2, 0, 12, 10;
		  branch_if_diff_equal 12, 22, 0, ___dot_L10007054;
		___dot_L10007042:
		  mload 9, 4294967284, 11, 32;
		  branch_if_diff_nonzero 12, 23, ___dot_L1000705a;
		  wrap16 11, 8, 10;
		  add_wrap 10, 20, 0, 10;
		  mload 10, 4, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007058;
		___dot_L10007054:
		  add_wrap 0, 0, 0, 12;
		  jump ___dot_L1000705c, 32;
		___dot_L10007058:
		  mload 10, 0, 11, 32;
		___dot_L1000705a:
		  add_wrap 0, 0, 1, 12;
		___dot_L1000705c:
		  mload 9, 4, 10, 32;
		  wrap16 10, 8, 10;
		  add_wrap 10, 20, 0, 10;
		  mload 10, 4, 13, 32;
		  mload 10, 0, 10, 32;
		  mstore 2, 0, 16, 12;
		  mstore 2, 0, 20, 11;
		  add_wrap 2, 0, 8, 11;
		  jump_dyn 13, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L100070f6;
		  add_wrap 8, 0, 8, 8;
		  add_wrap 21, 0, 4294967264, 21;
		  add_wrap 9, 0, 32, 9;
		  branch_if_diff_nonzero 21, 0, ___dot_L10006fec;
		  jump ___dot_L100070c8, 32;
		___dot_L1000707e:
		  mload 19, 12, 20, 32;
		  branch_if_diff_equal 20, 0, 0, ___dot_L100070d2;
		  mload 19, 8, 9, 32;
		  mload 19, 0, 8, 32;
		  add_wrap 20, 0, 4294967295, 10;
		  wrap16 10, 8, 10;
		  shr 10, 0, 3, 10;
		  add_wrap 10, 0, 1, 18;
		  add_wrap 8, 0, 4, 8;
		  wrap16 20, 8, 20;
		  add_wrap 9, 0, 4, 9;
		___dot_L100070a0:
		  mload 8, 0, 12, 32;
		  branch_if_diff_equal 12, 0, 0, ___dot_L100070b2;
		  mload 2, 32, 13, 32;
		  mload 2, 28, 10, 32;
		  mload 8, 4294967292, 11, 32;
		  mload 13, 12, 13, 32;
		  jump_dyn 13, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L100070f6;
		___dot_L100070b2:
		  mload 9, 0, 12, 32;
		  mload 9, 4294967292, 10, 32;
		  add_wrap 2, 0, 8, 11;
		  jump_dyn 12, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L100070f6;
		  add_wrap 8, 0, 8, 8;
		  add_wrap 20, 0, 4294967288, 20;
		  add_wrap 9, 0, 8, 9;
		  branch_if_diff_nonzero 20, 0, ___dot_L100070a0;
		___dot_L100070c8:
		  mload 19, 4, 10, 32;
		  branch_if_diff_greater_than 10, 18, 0, ___dot_L100070dc;
		  jump ___dot_L100070fa, 32;
		___dot_L100070d2:
		  add_wrap 0, 0, 0, 18;
		  mload 19, 4, 10, 32;
		  branch_if_diff_greater_than 0, 10, -1, ___dot_L100070fa;
		___dot_L100070dc:
		  mload 19, 0, 10, 32;
		  wrap16 18, 8, 18;
		  add_wrap 18, 10, 0, 18;
		  mload 2, 32, 13, 32;
		  mload 2, 28, 10, 32;
		  mload 18, 0, 11, 32;
		  mload 18, 4, 12, 32;
		  mload 13, 12, 13, 32;
		  jump_dyn 13, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100070fa;
		___dot_L100070f6:
		  add_wrap 0, 0, 1, 10;
		  jump ___dot_L100070fc, 32;
		___dot_L100070fa:
		  add_wrap 0, 0, 0, 10;
		___dot_L100070fc:
		  mload 2, 76, 1, 32;
		  mload 2, 72, 8, 32;
		  mload 2, 68, 9, 32;
		  mload 2, 64, 18, 32;
		  mload 2, 60, 19, 32;
		  mload 2, 56, 20, 32;
		  mload 2, 52, 21, 32;
		  mload 2, 48, 22, 32;
		  mload 2, 44, 23, 32;
		  add_wrap 2, 0, 80, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E:
		  add_wrap 2, 0, 4294967232, 2;
		  mstore 2, 0, 60, 1;
		  mstore 2, 0, 56, 8;
		  mstore 2, 0, 52, 9;
		  mstore 2, 0, 48, 18;
		  mstore 2, 0, 44, 19;
		  mstore 2, 0, 40, 20;
		  mstore 2, 0, 36, 21;
		  mstore 2, 0, 32, 22;
		  mstore 2, 0, 28, 23;
		  mstore 2, 0, 24, 24;
		  mstore 2, 0, 20, 25;
		  mstore 2, 0, 16, 26;
		  mstore 2, 0, 12, 27;
		  add_wrap 0, 15, 0, 19;
		  add_wrap 0, 14, 0, 18;
		  add_wrap 0, 13, 0, 21;
		  add_wrap 0, 12, 0, 22;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007180;
		  mload 10, 28, 8, 32;
		  and 8, 0, 1, 23;
		  set_reg 20, 1114112;
		  branch_if_diff_equal 23, 0, 0, ___dot_L1000714a;
		  add_wrap 0, 0, 43, 20;
		___dot_L1000714a:
		  add_wrap 23, 19, 0, 23;
		  and 8, 0, 4, 11;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007190;
		___dot_L10007152:
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_greater_than 21, 11, -1, ___dot_L10007198;
		  add_wrap 0, 0, 0, 11;
		  branch_if_diff_equal 21, 0, 0, ___dot_L10007178;
		  add_wrap 22, 21, 0, 12;
		  add_wrap 0, 22, 0, 13;
		___dot_L10007164:
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 14;
		  to_signed 14, 32;
		  is_diff_greater_than 0, 32, -(-64), 14;
		  xor 14, 0, 1, 14;
		  add_wrap 13, 0, 1, 13;
		  add_wrap 11, 14, 0, 11;
		  branch_if_diff_nonzero 13, 12, ___dot_L10007164;
		___dot_L10007178:
		  add_wrap 23, 11, 0, 23;
		  mload 10, 0, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L100071ce;
		  jump ___dot_L100071b0, 32;
		___dot_L10007180:
		  mload 10, 28, 8, 32;
		  add_wrap 19, 0, 1, 23;
		  add_wrap 0, 0, 45, 20;
		  and 8, 0, 4, 11;
		  branch_if_diff_nonzero 11, 0, ___dot_L10007152;
		___dot_L10007190:
		  add_wrap 0, 0, 0, 22;
		  mload 10, 0, 11, 32;
		  branch_if_diff_nonzero 11, 0, ___dot_L100071b0;
		  jump ___dot_L100071ce, 32;
		___dot_L10007198:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 22, 0, 10;
		  add_wrap 0, 21, 0, 11;
		  jump _ZN4core3str5count14do_count_chars17hd4a3561b0ae51affE, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 9, 0, 10;
		  add_wrap 23, 11, 0, 23;
		  mload 9, 0, 11, 32;
		  branch_if_diff_equal 11, 0, 0, ___dot_L100071ce;
		___dot_L100071b0:
		  mload 10, 4, 27, 32;
		  branch_if_diff_greater_than 23, 27, -1, ___dot_L100071ce;
		  and 8, 0, 8, 8;
		  branch_if_diff_nonzero 8, 0, ___dot_L10007210;
		  mload 10, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  add_wrap 0, 0, 1, 12;
		  sub_wrap_with_offset 27, 23, 0, 24;
		  to_signed 12, 32;
		  to_signed 11, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10007258;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000726e;
		  jump ___dot_L1000726a, 32;
		___dot_L100071ce:
		  mload 10, 20, 8, 32;
		  mload 10, 24, 9, 32;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  add_wrap 0, 20, 0, 12;
		  add_wrap 0, 22, 0, 13;
		  add_wrap 0, 21, 0, 14;
		  jump _ZN4core3fmt9Formatter12pad_integral12write_prefix17hebba923b735735e0E, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 0, 1, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L1000728c;
		  mload 9, 12, 15, 32;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  add_wrap 0, 19, 0, 12;
		  mload 2, 60, 1, 32;
		  mload 2, 56, 8, 32;
		  mload 2, 52, 9, 32;
		  mload 2, 48, 18, 32;
		  mload 2, 44, 19, 32;
		  mload 2, 40, 20, 32;
		  mload 2, 36, 21, 32;
		  mload 2, 32, 22, 32;
		  mload 2, 28, 23, 32;
		  mload 2, 24, 24, 32;
		  mload 2, 20, 25, 32;
		  mload 2, 16, 26, 32;
		  mload 2, 12, 27, 32;
		  add_wrap 2, 0, 64, 2;
		  jump_dyn 15, 32;
		___dot_L10007210:
		  mload 10, 16, 8, 32;
		  add_wrap 0, 0, 48, 11;
		  mload 10, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 25;
		  mload 10, 20, 24, 32;
		  mload 10, 24, 9, 32;
		  mstore 10, 0, 16, 11;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 10, 0, 26;
		  mload 10, 32, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 10, 33, 32, 32;
		  add_wrap 0, 24, 0, 10;
		  add_wrap 0, 9, 0, 11;
		  add_wrap 0, 20, 0, 12;
		  add_wrap 0, 22, 0, 13;
		  add_wrap 0, 21, 0, 14;
		  jump _ZN4core3fmt9Formatter12pad_integral12write_prefix17hebba923b735735e0E, 1;
		  branch_if_diff_nonzero 10, 0, ___dot_L1000728a;
		  add_wrap 0, 8, 0, 20;
		  sub_wrap_with_offset 27, 23, 0, 8;
		  add_wrap 8, 0, 1, 8;
		___dot_L10007246:
		  add_wrap 8, 0, 4294967295, 8;
		  branch_if_diff_equal 8, 0, 0, ___dot_L100072f4;
		  mload 9, 16, 12, 32;
		  add_wrap 0, 0, 48, 11;
		  add_wrap 0, 24, 0, 10;
		  jump_dyn 12, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10007246;
		  jump ___dot_L1000728a, 32;
		___dot_L10007258:
		  add_wrap 0, 0, 2, 12;
		  branch_if_diff_nonzero 11, 12, ___dot_L1000726a;
		  shr 24, 0, 1, 11;
		  add_wrap 24, 0, 1, 24;
		  shr 24, 0, 1, 24;
		  jump ___dot_L1000726e, 32;
		___dot_L1000726a:
		  add_wrap 0, 24, 0, 11;
		  add_wrap 0, 0, 0, 24;
		___dot_L1000726e:
		  mload 10, 20, 25, 32;
		  mload 10, 24, 8, 32;
		  mload 10, 16, 23, 32;
		  add_wrap 11, 0, 1, 9;
		___dot_L1000727c:
		  add_wrap 9, 0, 4294967295, 9;
		  branch_if_diff_equal 9, 0, 0, ___dot_L100072aa;
		  mload 8, 16, 12, 32;
		  add_wrap 0, 25, 0, 10;
		  add_wrap 0, 23, 0, 11;
		  jump_dyn 12, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L1000727c;
		___dot_L1000728a:
		  add_wrap 0, 0, 1, 10;
		___dot_L1000728c:
		  mload 2, 60, 1, 32;
		  mload 2, 56, 8, 32;
		  mload 2, 52, 9, 32;
		  mload 2, 48, 18, 32;
		  mload 2, 44, 19, 32;
		  mload 2, 40, 20, 32;
		  mload 2, 36, 21, 32;
		  mload 2, 32, 22, 32;
		  mload 2, 28, 23, 32;
		  mload 2, 24, 24, 32;
		  mload 2, 20, 25, 32;
		  mload 2, 16, 26, 32;
		  mload 2, 12, 27, 32;
		  add_wrap 2, 0, 64, 2;
		  jump_dyn 1, 32;
		___dot_L100072aa:
		  add_wrap 0, 25, 0, 10;
		  add_wrap 0, 8, 0, 11;
		  add_wrap 0, 20, 0, 12;
		  add_wrap 0, 22, 0, 13;
		  add_wrap 0, 21, 0, 14;
		  jump _ZN4core3fmt9Formatter12pad_integral12write_prefix17hebba923b735735e0E, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 0, 1, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L1000728c;
		  mload 8, 12, 13, 32;
		  add_wrap 0, 25, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  add_wrap 0, 19, 0, 12;
		  jump_dyn 13, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 0, 1, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L1000728c;
		  sub_wrap_with_offset 0, 24, 0, 18;
		  add_wrap 0, 0, 4294967295, 19;
		  add_wrap 0, 0, 4294967295, 9;
		___dot_L100072da:
		  add_wrap 18, 9, 0, 10;
		  branch_if_diff_equal 10, 19, 0, ___dot_L10007310;
		  mload 8, 16, 12, 32;
		  add_wrap 0, 25, 0, 10;
		  add_wrap 0, 23, 0, 11;
		  jump_dyn 12, 1;
		  add_wrap 9, 0, 1, 9;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100072da;
		  is_diff_greater_than 24, 9, 0, 10;
		  jump ___dot_L1000728c, 32;
		___dot_L100072f4:
		  mload 9, 12, 13, 32;
		  add_wrap 0, 24, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  add_wrap 0, 19, 0, 12;
		  jump_dyn 13, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 0, 1, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L1000728c;
		  add_wrap 0, 0, 0, 10;
		  mstore 26, 0, 16, 20;
		  mload 26, 32, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 25, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 26, 33, 32, 32;
		  jump ___dot_L1000728c, 32;
		___dot_L10007310:
		  is_diff_greater_than 24, 24, 0, 10;
		  jump ___dot_L1000728c, 32;
		_ZN4core3fmt9Formatter12pad_integral12write_prefix17hebba923b735735e0E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mstore 2, 0, 16, 18;
		  mstore 2, 0, 12, 19;
		  set_reg 15, 1114112;
		  add_wrap 0, 14, 0, 18;
		  add_wrap 0, 13, 0, 9;
		  add_wrap 0, 11, 0, 19;
		  branch_if_diff_equal 12, 15, 0, ___dot_L10007342;
		  mload 19, 16, 13, 32;
		  add_wrap 0, 10, 0, 8;
		  add_wrap 0, 12, 0, 11;
		  jump_dyn 13, 1;
		  add_wrap 0, 10, 0, 12;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 0, 1, 11;
		  branch_if_diff_nonzero 12, 0, ___dot_L1000735c;
		___dot_L10007342:
		  branch_if_diff_equal 9, 0, 0, ___dot_L1000735a;
		  mload 19, 12, 15, 32;
		  add_wrap 0, 9, 0, 11;
		  add_wrap 0, 18, 0, 12;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  mload 2, 16, 18, 32;
		  mload 2, 12, 19, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 15, 32;
		___dot_L1000735a:
		  add_wrap 0, 0, 0, 11;
		___dot_L1000735c:
		  add_wrap 0, 11, 0, 10;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  mload 2, 16, 18, 32;
		  mload 2, 12, 19, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt9Formatter3pad17h3a2f05c7cb75f066E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mstore 2, 0, 16, 18;
		  mstore 2, 0, 12, 19;
		  mstore 2, 0, 8, 20;
		  mstore 2, 0, 4, 21;
		  mstore 2, 0, 0, 22;
		  mload 10, 0, 13, 32;
		  mload 10, 8, 14, 32;
		  add_wrap 0, 12, 0, 19;
		  add_wrap 0, 11, 0, 18;
		  and 14, 0, 1, 11;
		  branch_if_diff_nonzero 13, 0, ___dot_L10007390;
		  branch_if_diff_equal 11, 0, 0, ___dot_L100074dc;
		___dot_L10007390:
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000740a;
		  mload 10, 12, 14, 32;
		  add_wrap 18, 19, 0, 12;
		  add_wrap 0, 0, 0, 11;
		  branch_if_diff_equal 14, 0, 0, ___dot_L100073e2;
		  add_wrap 0, 0, 224, 15;
		  add_wrap 0, 0, 240, 16;
		  add_wrap 0, 18, 0, 8;
		  jump ___dot_L100073b8, 32;
		___dot_L100073a8:
		  add_wrap 8, 0, 1, 9;
		___dot_L100073ac:
		  sub_wrap_with_offset 8, 11, 0, 8;
		  add_wrap 14, 0, 4294967295, 14;
		  sub_wrap_with_offset 9, 8, 0, 11;
		  add_wrap 0, 9, 0, 8;
		  branch_if_diff_equal 14, 0, 0, ___dot_L100073e4;
		___dot_L100073b8:
		  branch_if_diff_equal 8, 12, 0, ___dot_L1000740a;
		  mload 8, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 9;
		  to_signed 9, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L100073a8;
		  and 9, 0, 255, 9;
		  branch_if_diff_greater_than 15, 9, 0, ___dot_L100073d6;
		  branch_if_diff_greater_than 16, 9, 0, ___dot_L100073dc;
		  add_wrap 8, 0, 4, 9;
		  jump ___dot_L100073ac, 32;
		___dot_L100073d6:
		  add_wrap 8, 0, 2, 9;
		  jump ___dot_L100073ac, 32;
		___dot_L100073dc:
		  add_wrap 8, 0, 3, 9;
		  jump ___dot_L100073ac, 32;
		___dot_L100073e2:
		  add_wrap 0, 18, 0, 9;
		___dot_L100073e4:
		  branch_if_diff_equal 9, 12, 0, ___dot_L1000740a;
		  mload 9, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 12;
		  to_signed 12, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L100074c2;
		  branch_if_diff_equal 11, 0, 0, ___dot_L100074cc;
		___dot_L100073f2:
		  branch_if_diff_greater_than 11, 19, -1, ___dot_L1000740a;
		  add_wrap 18, 11, 0, 12;
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 12;
		  add_wrap 0, 0, 4294967231, 14;
		  to_signed 14, 32;
		  to_signed 12, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10007408;
		  add_wrap 0, 19, 0, 11;
		___dot_L10007408:
		  add_wrap 0, 11, 0, 19;
		___dot_L1000740a:
		  branch_if_diff_equal 13, 0, 0, ___dot_L100074dc;
		  mload 10, 4, 8, 32;
		  add_wrap 0, 0, 16, 11;
		  branch_if_diff_greater_than 19, 11, -1, ___dot_L10007436;
		  add_wrap 0, 0, 0, 11;
		  branch_if_diff_equal 19, 0, 0, ___dot_L10007448;
		  add_wrap 18, 19, 0, 12;
		  add_wrap 0, 18, 0, 13;
		___dot_L10007420:
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 14;
		  to_signed 14, 32;
		  is_diff_greater_than 0, 32, -(-64), 14;
		  xor 14, 0, 1, 14;
		  add_wrap 13, 0, 1, 13;
		  add_wrap 11, 14, 0, 11;
		  branch_if_diff_nonzero 13, 12, ___dot_L10007420;
		  jump ___dot_L10007448, 32;
		___dot_L10007436:
		  add_wrap 0, 10, 0, 9;
		  add_wrap 0, 18, 0, 10;
		  add_wrap 0, 19, 0, 11;
		  jump _ZN4core3str5count14do_count_chars17hd4a3561b0ae51affE, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 9, 0, 10;
		___dot_L10007448:
		  branch_if_diff_greater_than 11, 8, -1, ___dot_L100074dc;
		___dot_L1000744c:
		  mload 10, 32, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  add_wrap 0, 0, 0, 12;
		  add_wrap 0, 0, 1, 14;
		  sub_wrap_with_offset 8, 11, 0, 20;
		  to_signed 14, 32;
		  to_signed 13, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10007464;
		  branch_if_diff_equal 13, 0, 0, ___dot_L10007474;
		  add_wrap 0, 20, 0, 12;
		  add_wrap 0, 0, 0, 20;
		  jump ___dot_L10007474, 32;
		___dot_L10007464:
		  add_wrap 0, 0, 2, 11;
		  branch_if_diff_nonzero 13, 11, ___dot_L10007474;
		  shr 20, 0, 1, 12;
		  add_wrap 20, 0, 1, 20;
		  shr 20, 0, 1, 20;
		___dot_L10007474:
		  mload 10, 20, 21, 32;
		  mload 10, 24, 8, 32;
		  mload 10, 16, 22, 32;
		  add_wrap 12, 0, 1, 9;
		___dot_L10007482:
		  add_wrap 9, 0, 4294967295, 9;
		  branch_if_diff_equal 9, 0, 0, ___dot_L10007494;
		  mload 8, 16, 12, 32;
		  add_wrap 0, 21, 0, 10;
		  add_wrap 0, 22, 0, 11;
		  jump_dyn 12, 1;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10007482;
		  add_wrap 0, 0, 1, 10;
		  jump ___dot_L10007500, 32;
		___dot_L10007494:
		  mload 8, 12, 13, 32;
		  add_wrap 0, 21, 0, 10;
		  add_wrap 0, 18, 0, 11;
		  add_wrap 0, 19, 0, 12;
		  jump_dyn 13, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 0, 1, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10007500;
		  sub_wrap_with_offset 0, 20, 0, 18;
		  add_wrap 0, 0, 4294967295, 19;
		  add_wrap 0, 0, 4294967295, 9;
		___dot_L100074ac:
		  add_wrap 18, 9, 0, 10;
		  branch_if_diff_equal 10, 19, 0, ___dot_L100074fa;
		  mload 8, 16, 12, 32;
		  add_wrap 0, 21, 0, 10;
		  add_wrap 0, 22, 0, 11;
		  jump_dyn 12, 1;
		  add_wrap 9, 0, 1, 9;
		  branch_if_diff_equal 10, 0, 0, ___dot_L100074ac;
		  jump ___dot_L100074fc, 32;
		___dot_L100074c2:
		  and 12, 0, 255, 12;
		  add_wrap 0, 0, 224, 14;
		  branch_if_diff_nonzero 11, 0, ___dot_L100073f2;
		___dot_L100074cc:
		  branch_if_diff_equal 13, 0, 0, ___dot_L100074da;
		  mload 10, 4, 8, 32;
		  add_wrap 0, 0, 0, 19;
		  add_wrap 0, 0, 0, 11;
		  branch_if_diff_greater_than 8, 0, 0, ___dot_L1000744c;
		  jump ___dot_L100074dc, 32;
		___dot_L100074da:
		  add_wrap 0, 0, 0, 19;
		___dot_L100074dc:
		  mload 10, 24, 11, 32;
		  mload 10, 20, 10, 32;
		  mload 11, 12, 15, 32;
		  add_wrap 0, 18, 0, 11;
		  add_wrap 0, 19, 0, 12;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  mload 2, 16, 18, 32;
		  mload 2, 12, 19, 32;
		  mload 2, 8, 20, 32;
		  mload 2, 4, 21, 32;
		  mload 2, 0, 22, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 15, 32;
		___dot_L100074fa:
		  add_wrap 0, 20, 0, 9;
		___dot_L100074fc:
		  is_diff_greater_than 20, 9, 0, 10;
		___dot_L10007500:
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  mload 2, 16, 18, 32;
		  mload 2, 12, 19, 32;
		  mload 2, 8, 20, 32;
		  mload 2, 4, 21, 32;
		  mload 2, 0, 22, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt9Formatter9write_str17hd51bf5ca43076a08E:
		_ZN57_$LT$core_dot__dot_fmt_dot__dot_Formatter$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17hf3940cfa00b635caE:
		  mload 10, 24, 13, 32;
		  mload 10, 20, 10, 32;
		  mload 13, 12, 15, 32;
		  jump_dyn 15, 32;
		_ZN4core3fmt9Formatter26debug_struct_field2_finish17h3701d021ed82a04eE:
		  add_wrap 2, 0, 4294967232, 2;
		  mstore 2, 0, 60, 1;
		  mstore 2, 0, 56, 8;
		  mstore 2, 0, 52, 9;
		  mstore 2, 0, 48, 18;
		  mstore 2, 0, 44, 19;
		  mstore 2, 0, 40, 20;
		  mstore 2, 0, 36, 21;
		  mstore 2, 0, 32, 22;
		  mstore 2, 0, 28, 23;
		  mstore 2, 0, 24, 24;
		  mstore 2, 0, 20, 25;
		  add_wrap 0, 10, 0, 8;
		  mload 2, 64, 18, 32;
		  mload 10, 24, 9, 32;
		  mload 2, 68, 20, 32;
		  mload 2, 72, 19, 32;
		  mload 10, 20, 10, 32;
		  mload 9, 12, 9, 32;
		  add_wrap 0, 17, 0, 21;
		  add_wrap 0, 16, 0, 22;
		  add_wrap 0, 15, 0, 23;
		  add_wrap 0, 14, 0, 24;
		  add_wrap 0, 13, 0, 25;
		  jump_dyn 9, 1;
		  mstore 2, 0, 12, 8;
		  mload 2, 16, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 16, 32;
		  mload 2, 17, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 17, 32;
		  add_wrap 2, 0, 12, 10;
		  add_wrap 0, 25, 0, 11;
		  add_wrap 0, 24, 0, 12;
		  add_wrap 0, 23, 0, 13;
		  add_wrap 0, 22, 0, 14;
		  jump _ZN4core3fmt8builders11DebugStruct5field17haf5912e584d12f37E, 1;
		  add_wrap 2, 0, 12, 10;
		  add_wrap 0, 21, 0, 11;
		  add_wrap 0, 18, 0, 12;
		  add_wrap 0, 20, 0, 13;
		  add_wrap 0, 19, 0, 14;
		  jump _ZN4core3fmt8builders11DebugStruct5field17haf5912e584d12f37E, 1;
		  mload 2, 17, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 2, 16, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  or 12, 11, 0, 10;
		  branch_if_diff_equal 12, 0, 0, ___dot_L100075bc;
		  and 11, 0, 1, 11;
		  branch_if_diff_nonzero 11, 0, ___dot_L100075bc;
		  mload 2, 12, 10, 32;
		  mload 10, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 11;
		  and 11, 0, 4, 11;
		  branch_if_diff_nonzero 11, 0, ___dot_L100075aa;
		  mload 10, 24, 11, 32;
		  mload 10, 20, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442139;
		  add_wrap 0, 0, 2, 12;
		  jump ___dot_L100075ba, 32;
		___dot_L100075aa:
		  mload 10, 24, 11, 32;
		  mload 10, 20, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442138;
		  add_wrap 0, 0, 1, 12;
		___dot_L100075ba:
		  jump_dyn 13, 1;
		___dot_L100075bc:
		  and 10, 0, 1, 10;
		  mload 2, 60, 1, 32;
		  mload 2, 56, 8, 32;
		  mload 2, 52, 9, 32;
		  mload 2, 48, 18, 32;
		  mload 2, 44, 19, 32;
		  mload 2, 40, 20, 32;
		  mload 2, 36, 21, 32;
		  mload 2, 32, 22, 32;
		  mload 2, 28, 23, 32;
		  mload 2, 24, 24, 32;
		  mload 2, 20, 25, 32;
		  add_wrap 2, 0, 64, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt9Formatter25debug_tuple_field1_finish17hfdc85442d9860525E:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  mstore 2, 0, 24, 8;
		  mstore 2, 0, 20, 9;
		  mstore 2, 0, 16, 18;
		  mstore 2, 0, 12, 19;
		  add_wrap 0, 10, 0, 8;
		  mload 10, 24, 15, 32;
		  mload 10, 20, 10, 32;
		  mload 15, 12, 15, 32;
		  add_wrap 0, 14, 0, 18;
		  add_wrap 0, 13, 0, 19;
		  add_wrap 0, 12, 0, 9;
		  jump_dyn 15, 1;
		  is_diff_greater_than 0, 9, -(1), 11;
		  mstore 2, 0, 4, 8;
		  mload 2, 8, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 8, 32;
		  mstore 2, 0, 0, 0;
		  mload 2, 9, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 2, 33, 9, 32;
		  add_wrap 0, 2, 0, 10;
		  add_wrap 0, 19, 0, 11;
		  add_wrap 0, 18, 0, 12;
		  jump _ZN4core3fmt8builders10DebugTuple5field17h23894ccf43c0af46E, 1;
		  mload 2, 0, 11, 32;
		  mload 2, 8, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  is_diff_greater_than 11, 0, 0, 10;
		  or 10, 12, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007668;
		  and 12, 0, 1, 12;
		  branch_if_diff_nonzero 12, 0, ___dot_L10007668;
		  add_wrap 0, 0, 1, 10;
		  branch_if_diff_nonzero 11, 10, ___dot_L10007654;
		  mload 2, 9, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  mload 2, 4, 8, 32;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10007656;
		  mload 8, 28, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  and 10, 0, 4, 10;
		  branch_if_diff_nonzero 10, 0, ___dot_L10007656;
		  mload 8, 24, 11, 32;
		  mload 8, 20, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268442144;
		  add_wrap 0, 0, 1, 12;
		  jump_dyn 13, 1;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 0, 1, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007656;
		  jump ___dot_L10007668, 32;
		___dot_L10007654:
		  mload 2, 4, 8, 32;
		___dot_L10007656:
		  mload 8, 24, 11, 32;
		  mload 8, 20, 10, 32;
		  mload 11, 12, 13, 32;
		  set_reg 11, 268441989;
		  add_wrap 0, 0, 1, 12;
		  jump_dyn 13, 1;
		___dot_L10007668:
		  and 10, 0, 1, 10;
		  mload 2, 28, 1, 32;
		  mload 2, 24, 8, 32;
		  mload 2, 20, 9, 32;
		  mload 2, 16, 18, 32;
		  mload 2, 12, 19, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt9Formatter10debug_list17h0e7435b302bef3d6E:
		  add_wrap 2, 0, 4294967280, 2;
		  mstore 2, 0, 12, 1;
		  mstore 2, 0, 8, 8;
		  mstore 2, 0, 4, 9;
		  add_wrap 0, 11, 0, 8;
		  mload 11, 24, 11, 32;
		  mload 8, 20, 13, 32;
		  mload 11, 12, 14, 32;
		  add_wrap 0, 10, 0, 9;
		  set_reg 11, 268441991;
		  add_wrap 0, 0, 1, 12;
		  add_wrap 0, 13, 0, 10;
		  jump_dyn 14, 1;
		  mstore 9, 0, 0, 8;
		  mload 9, 4, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 4, 32;
		  mload 9, 5, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 0, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 5, 32;
		  mload 2, 12, 1, 32;
		  mload 2, 8, 8, 32;
		  mload 2, 4, 9, 32;
		  add_wrap 2, 0, 16, 2;
		  jump_dyn 1, 32;
		_ZN42_$LT$str$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17hfa21afe89ad9f42eE:
		  add_wrap 0, 11, 0, 13;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 0, 12, 0, 10;
		  add_wrap 0, 13, 0, 12;
		  jump _ZN4core3fmt9Formatter3pad17h3a2f05c7cb75f066E, 32;
		_ZN4core5slice5index26slice_start_index_len_fail17hf4736d47a4088c7dE:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 0, 10;
		  mstore 2, 0, 4, 11;
		  add_wrap 0, 2, 0, 10;
		  mstore 2, 0, 32, 10;
		  load_label 10, _ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u32$GT$3fmt17h5898aa4ddbfe8fceE;
		  mstore 2, 0, 36, 10;
		  add_wrap 2, 0, 4, 11;
		  mstore 2, 0, 40, 11;
		  mstore 2, 0, 44, 10;
		  set_reg 10, 268442588;
		  mstore 2, 0, 8, 10;
		  add_wrap 0, 0, 2, 10;
		  mstore 2, 0, 12, 10;
		  mstore 2, 0, 24, 0;
		  add_wrap 2, 0, 32, 11;
		  mstore 2, 0, 16, 11;
		  mstore 2, 0, 20, 10;
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 12, 0, 11;
		  jump _ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E, 1;
		_ZN4core5slice5index24slice_end_index_len_fail17ha696029085084a29E:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 0, 10;
		  mstore 2, 0, 4, 11;
		  add_wrap 0, 2, 0, 10;
		  mstore 2, 0, 32, 10;
		  load_label 10, _ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u32$GT$3fmt17h5898aa4ddbfe8fceE;
		  mstore 2, 0, 36, 10;
		  add_wrap 2, 0, 4, 11;
		  mstore 2, 0, 40, 11;
		  mstore 2, 0, 44, 10;
		  set_reg 10, 268442604;
		  mstore 2, 0, 8, 10;
		  add_wrap 0, 0, 2, 10;
		  mstore 2, 0, 12, 10;
		  mstore 2, 0, 24, 0;
		  add_wrap 2, 0, 32, 11;
		  mstore 2, 0, 16, 11;
		  mstore 2, 0, 20, 10;
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 12, 0, 11;
		  jump _ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E, 1;
		_ZN4core5slice5index22slice_index_order_fail17h6a534502875b36bcE:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 0, 10;
		  mstore 2, 0, 4, 11;
		  add_wrap 0, 2, 0, 10;
		  mstore 2, 0, 32, 10;
		  load_label 10, _ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u32$GT$3fmt17h5898aa4ddbfe8fceE;
		  mstore 2, 0, 36, 10;
		  add_wrap 2, 0, 4, 11;
		  mstore 2, 0, 40, 11;
		  mstore 2, 0, 44, 10;
		  set_reg 10, 268442656;
		  mstore 2, 0, 8, 10;
		  add_wrap 0, 0, 2, 10;
		  mstore 2, 0, 12, 10;
		  mstore 2, 0, 24, 0;
		  add_wrap 2, 0, 32, 11;
		  mstore 2, 0, 16, 11;
		  mstore 2, 0, 20, 10;
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 12, 0, 11;
		  jump _ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E, 1;
		_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17he47488d21f7317aeE:
		  add_wrap 2, 0, 4294967248, 2;
		  mstore 2, 0, 0, 10;
		  mstore 2, 0, 4, 11;
		  add_wrap 2, 0, 4, 10;
		  mstore 2, 0, 32, 10;
		  load_label 10, _ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u32$GT$3fmt17h5898aa4ddbfe8fceE;
		  mstore 2, 0, 36, 10;
		  add_wrap 0, 2, 0, 11;
		  mstore 2, 0, 40, 11;
		  mstore 2, 0, 44, 10;
		  set_reg 10, 268442736;
		  mstore 2, 0, 8, 10;
		  add_wrap 0, 0, 3, 10;
		  mstore 2, 0, 12, 10;
		  mstore 2, 0, 24, 0;
		  add_wrap 2, 0, 32, 10;
		  mstore 2, 0, 16, 10;
		  add_wrap 0, 0, 2, 10;
		  mstore 2, 0, 20, 10;
		  add_wrap 2, 0, 8, 10;
		  add_wrap 0, 12, 0, 11;
		  jump _ZN4core9panicking9panic_fmt17hf2d9e6ebf8d7dd62E, 1;
		_ZN4core3str8converts9from_utf817h6bed550b26c86389E:
		  add_wrap 2, 0, 4294967232, 2;
		  mstore 2, 0, 60, 1;
		  mstore 2, 0, 56, 8;
		  mstore 2, 0, 52, 9;
		  mstore 2, 0, 48, 18;
		  mstore 2, 0, 44, 19;
		  mstore 2, 0, 40, 20;
		  mstore 2, 0, 36, 21;
		  mstore 2, 0, 32, 22;
		  mstore 2, 0, 28, 23;
		  mstore 2, 0, 24, 24;
		  mstore 2, 0, 20, 25;
		  mstore 2, 0, 16, 26;
		  mstore 2, 0, 12, 27;
		  branch_if_diff_equal 12, 0, 0, ___dot_L10007986;
		  add_wrap 0, 0, 0, 13;
		  add_wrap 12, 0, 4294967289, 14;
		  is_diff_greater_than 14, 12, 0, 15;
		  add_wrap 15, 0, 4294967295, 15;
		  and 14, 15, 0, 14;
		  add_wrap 11, 0, 3, 15;
		  and 15, 0, 4294967292, 15;
		  sub_wrap_with_offset 15, 11, 0, 16;
		  add_wrap 11, 0, 4, 24;
		  sub_wrap_with_offset 0, 12, 0, 17;
		  set_reg 5, 268442760;
		  add_wrap 0, 0, 4, 6;
		  add_wrap 0, 0, 240, 7;
		  add_wrap 0, 0, 48, 28;
		  add_wrap 0, 0, 4294967231, 29;
		  add_wrap 0, 0, 244, 30;
		  add_wrap 0, 0, 4294967183, 31;
		  add_wrap 0, 0, 2, 25;
		  add_wrap 0, 0, 4294967232, 18;
		  add_wrap 0, 0, 3, 26;
		  add_wrap 0, 0, 224, 19;
		  add_wrap 0, 0, 160, 20;
		  add_wrap 0, 0, 237, 21;
		  add_wrap 0, 0, 4294967199, 22;
		  add_wrap 0, 0, 12, 23;
		  set_reg 15, 2155905024;
		  add_wrap 15, 0, 128, 8;
		  add_wrap 0, 0, 1, 27;
		  jump ___dot_L10007838, 32;
		___dot_L10007832:
		  add_wrap 13, 0, 1, 13;
		  branch_if_diff_greater_than 13, 12, -1, ___dot_L10007986;
		___dot_L10007838:
		  add_wrap 11, 13, 0, 15;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 15;
		  to_signed 15, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10007884;
		  sub_wrap_with_offset 16, 13, 0, 15;
		  and 15, 0, 3, 15;
		  branch_if_diff_nonzero 15, 0, ___dot_L10007832;
		  branch_if_diff_greater_than 13, 14, -1, ___dot_L10007868;
		___dot_L10007850:
		  add_wrap 11, 13, 0, 15;
		  mload 15, 0, 15, 32;
		  add_wrap 24, 13, 0, 9;
		  mload 9, 0, 9, 32;
		  or 15, 9, 0, 15;
		  and 15, 8, 0, 15;
		  branch_if_diff_nonzero 15, 0, ___dot_L10007868;
		  add_wrap 13, 0, 8, 13;
		  branch_if_diff_greater_than 14, 13, 0, ___dot_L10007850;
		___dot_L10007868:
		  branch_if_diff_greater_than 13, 12, -1, ___dot_L100078fc;
		  sub_wrap_with_offset 0, 13, 0, 9;
		  add_wrap 13, 11, 0, 13;
		___dot_L10007872:
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 15;
		  to_signed 15, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L100078f8;
		  add_wrap 9, 0, 4294967295, 9;
		  add_wrap 13, 0, 1, 13;
		  branch_if_diff_nonzero 17, 9, ___dot_L10007872;
		  jump ___dot_L10007986, 32;
		___dot_L10007884:
		  and 15, 0, 255, 9;
		  add_wrap 5, 9, 0, 15;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  branch_if_diff_equal 15, 6, 0, ___dot_L100078d6;
		  branch_if_diff_equal 15, 26, 0, ___dot_L100078b4;
		  branch_if_diff_nonzero 15, 25, ___dot_L10007992;
		  add_wrap 13, 0, 1, 9;
		  branch_if_diff_greater_than 9, 12, -1, ___dot_L1000798e;
		  add_wrap 11, 9, 0, 15;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 15;
		  add_wrap 0, 0, 1, 1;
		  to_signed 29, 32;
		  to_signed 15, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L1000797e;
		  jump ___dot_L1000799c, 32;
		___dot_L100078b4:
		  add_wrap 13, 0, 1, 15;
		  branch_if_diff_greater_than 15, 12, -1, ___dot_L1000798e;
		  add_wrap 15, 11, 0, 15;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 1;
		  branch_if_diff_equal 9, 19, 0, ___dot_L10007902;
		  wrap16 1, 65536, 32;
		  wrap16 32, 256, 1;
		  branch_if_diff_nonzero 9, 21, ___dot_L10007916;
		  to_signed 1, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 1, 0, 15;
		  shr 15, 0, 24, 15;
		  xor 32, 15, 0, 15;
		  to_signed 22, 32;
		  to_signed 15, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10007932;
		  jump ___dot_L10007992, 32;
		___dot_L100078d6:
		  add_wrap 13, 0, 1, 15;
		  branch_if_diff_greater_than 15, 12, -1, ___dot_L1000798e;
		  add_wrap 15, 11, 0, 15;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 1;
		  branch_if_diff_equal 9, 7, 0, ___dot_L1000790c;
		  wrap16 1, 65536, 32;
		  wrap16 32, 256, 1;
		  branch_if_diff_nonzero 9, 30, ___dot_L10007948;
		  to_signed 1, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 1, 0, 15;
		  shr 15, 0, 24, 15;
		  xor 32, 15, 0, 15;
		  to_signed 31, 32;
		  to_signed 15, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10007958;
		  jump ___dot_L10007992, 32;
		___dot_L100078f8:
		  sub_wrap_with_offset 0, 9, 0, 13;
		___dot_L100078fc:
		  branch_if_diff_greater_than 12, 13, 0, ___dot_L10007838;
		  jump ___dot_L10007986, 32;
		___dot_L10007902:
		  and 1, 0, 224, 15;
		  branch_if_diff_equal 15, 20, 0, ___dot_L10007932;
		  jump ___dot_L10007992, 32;
		___dot_L1000790c:
		  add_wrap 1, 0, 4294967152, 15;
		  branch_if_diff_greater_than 28, 15, 0, ___dot_L10007958;
		  jump ___dot_L10007992, 32;
		___dot_L10007916:
		  add_wrap 9, 0, 4294967071, 15;
		  branch_if_diff_greater_than 23, 15, 0, ___dot_L1000792a;
		  and 9, 0, 254, 15;
		  add_wrap 0, 0, 238, 9;
		  branch_if_diff_nonzero 15, 9, ___dot_L10007992;
		___dot_L1000792a:
		  to_signed 1, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 1, 0, 15;
		  shr 15, 0, 24, 15;
		  xor 32, 15, 0, 15;
		  to_signed 15, 32;
		  to_signed 18, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10007992;
		___dot_L10007932:
		  add_wrap 13, 0, 2, 9;
		  branch_if_diff_greater_than 9, 12, -1, ___dot_L1000798e;
		  add_wrap 11, 9, 0, 15;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 15;
		  to_signed 29, 32;
		  to_signed 15, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L1000797e;
		  jump ___dot_L10007996, 32;
		___dot_L10007948:
		  add_wrap 9, 0, 4294967055, 15;
		  branch_if_diff_greater_than 15, 25, 0, ___dot_L10007992;
		  to_signed 1, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 1, 0, 15;
		  shr 15, 0, 24, 15;
		  xor 32, 15, 0, 15;
		  to_signed 15, 32;
		  to_signed 18, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10007992;
		___dot_L10007958:
		  add_wrap 13, 0, 2, 15;
		  branch_if_diff_greater_than 15, 12, -1, ___dot_L1000798e;
		  add_wrap 15, 11, 0, 15;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 15;
		  to_signed 29, 32;
		  to_signed 15, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10007996;
		  add_wrap 13, 0, 3, 9;
		  branch_if_diff_greater_than 9, 12, -1, ___dot_L1000798e;
		  add_wrap 11, 9, 0, 15;
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 15;
		  to_signed 29, 32;
		  to_signed 15, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L1000799a;
		___dot_L1000797e:
		  add_wrap 9, 0, 1, 13;
		  branch_if_diff_greater_than 12, 13, 0, ___dot_L10007838;
		___dot_L10007986:
		  add_wrap 0, 0, 0, 13;
		  mstore 10, 0, 4, 11;
		  mstore 10, 0, 8, 12;
		  jump ___dot_L100079ac, 32;
		___dot_L1000798e:
		  add_wrap 0, 0, 0, 27;
		  jump ___dot_L1000799c, 32;
		___dot_L10007992:
		  add_wrap 0, 0, 1, 1;
		  jump ___dot_L1000799c, 32;
		___dot_L10007996:
		  add_wrap 0, 0, 2, 1;
		  jump ___dot_L1000799c, 32;
		___dot_L1000799a:
		  add_wrap 0, 0, 3, 1;
		___dot_L1000799c:
		  and 1, 0, 255, 11;
		  wrap16 11, 256, 11;
		  or 27, 11, 0, 11;
		  mstore 10, 0, 4, 13;
		  mstore 10, 0, 8, 11;
		  add_wrap 0, 0, 1, 13;
		___dot_L100079ac:
		  mstore 10, 0, 0, 13;
		  mload 2, 60, 1, 32;
		  mload 2, 56, 8, 32;
		  mload 2, 52, 9, 32;
		  mload 2, 48, 18, 32;
		  mload 2, 44, 19, 32;
		  mload 2, 40, 20, 32;
		  mload 2, 36, 21, 32;
		  mload 2, 32, 22, 32;
		  mload 2, 28, 23, 32;
		  mload 2, 24, 24, 32;
		  mload 2, 20, 25, 32;
		  mload 2, 16, 26, 32;
		  mload 2, 12, 27, 32;
		  add_wrap 2, 0, 64, 2;
		  jump_dyn 1, 32;
		_ZN4core3str5count14do_count_chars17hd4a3561b0ae51affE:
		  add_wrap 0, 10, 0, 12;
		  add_wrap 10, 0, 3, 10;
		  and 10, 0, 4294967292, 10;
		  sub_wrap_with_offset 10, 12, 0, 15;
		  branch_if_diff_greater_than 15, 11, 0, ___dot_L100079f4;
		  sub_wrap_with_offset 11, 15, 0, 13;
		  shr 13, 0, 2, 17;
		  branch_if_diff_equal 17, 0, 0, ___dot_L100079f4;
		  add_wrap 15, 12, 0, 15;
		  and 13, 0, 3, 11;
		  branch_if_diff_nonzero 10, 12, ___dot_L10007a10;
		  add_wrap 0, 0, 0, 10;
		  jump ___dot_L10007a26, 32;
		___dot_L100079f4:
		  add_wrap 0, 0, 0, 10;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007a0e;
		  add_wrap 11, 12, 0, 11;
		___dot_L100079fa:
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 13;
		  to_signed 13, 32;
		  is_diff_greater_than 0, 32, -(-64), 13;
		  xor 13, 0, 1, 13;
		  add_wrap 12, 0, 1, 12;
		  add_wrap 10, 13, 0, 10;
		  branch_if_diff_nonzero 12, 11, ___dot_L100079fa;
		___dot_L10007a0e:
		  jump_dyn 1, 32;
		___dot_L10007a10:
		  add_wrap 0, 0, 0, 10;
		___dot_L10007a12:
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 14;
		  to_signed 14, 32;
		  is_diff_greater_than 0, 32, -(-64), 14;
		  xor 14, 0, 1, 14;
		  add_wrap 12, 0, 1, 12;
		  add_wrap 10, 14, 0, 10;
		  branch_if_diff_nonzero 12, 15, ___dot_L10007a12;
		___dot_L10007a26:
		  add_wrap 0, 0, 0, 14;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007a44;
		  and 13, 0, 4294967292, 12;
		  add_wrap 12, 15, 0, 12;
		___dot_L10007a30:
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  sign_extend_byte 32, 13;
		  to_signed 13, 32;
		  is_diff_greater_than 0, 32, -(-64), 13;
		  xor 13, 0, 1, 13;
		  add_wrap 14, 13, 0, 14;
		  add_wrap 11, 0, 4294967295, 11;
		  add_wrap 12, 0, 1, 12;
		  branch_if_diff_nonzero 11, 0, ___dot_L10007a30;
		___dot_L10007a44:
		  set_reg 11, 16842752;
		  add_wrap 11, 0, 257, 30;
		  set_reg 11, 16711680;
		  add_wrap 11, 0, 255, 5;
		  add_wrap 10, 14, 0, 10;
		  add_wrap 0, 0, 4, 16;
		  jump ___dot_L10007a7e, 32;
		___dot_L10007a5a:
		  add_wrap 7, 17, 0, 15;
		  sub_wrap_with_offset 28, 6, 0, 17;
		  and 6, 0, 3, 11;
		  and 14, 5, 0, 12;
		  shr 14, 0, 8, 14;
		  and 14, 5, 0, 13;
		  add_wrap 12, 13, 0, 12;
		  wrap16 12, 65536, 13;
		  add_wrap 12, 13, 0, 12;
		  shr 12, 0, 16, 12;
		  add_wrap 10, 12, 0, 10;
		  branch_if_diff_nonzero 11, 0, ___dot_L10007af8;
		___dot_L10007a7e:
		  branch_if_diff_equal 17, 0, 0, ___dot_L10007a0e;
		  add_wrap 0, 17, 0, 28;
		  add_wrap 0, 15, 0, 7;
		  add_wrap 0, 0, 192, 11;
		  add_wrap 0, 17, 0, 6;
		  branch_if_diff_greater_than 11, 17, 0, ___dot_L10007a94;
		  add_wrap 0, 0, 192, 6;
		___dot_L10007a94:
		  wrap16 6, 4, 17;
		  add_wrap 0, 0, 0, 14;
		  branch_if_diff_greater_than 16, 28, 0, ___dot_L10007a5a;
		  and 17, 0, 1008, 11;
		  add_wrap 7, 11, 0, 29;
		  add_wrap 0, 7, 0, 15;
		___dot_L10007aa8:
		  mload 15, 0, 13, 32;
		  xor 13, 0, 4294967295, 11;
		  shr 11, 0, 7, 11;
		  shr 13, 0, 6, 13;
		  mload 15, 4, 12, 32;
		  or 11, 13, 0, 11;
		  and 11, 30, 0, 11;
		  add_wrap 11, 14, 0, 11;
		  xor 12, 0, 4294967295, 13;
		  shr 13, 0, 7, 13;
		  mload 15, 8, 14, 32;
		  shr 12, 0, 6, 12;
		  or 12, 13, 0, 12;
		  and 12, 30, 0, 12;
		  xor 14, 0, 4294967295, 13;
		  shr 13, 0, 7, 13;
		  shr 14, 0, 6, 14;
		  or 13, 14, 0, 13;
		  mload 15, 12, 14, 32;
		  and 13, 30, 0, 13;
		  add_wrap 12, 13, 0, 12;
		  add_wrap 11, 12, 0, 11;
		  xor 14, 0, 4294967295, 12;
		  shr 12, 0, 7, 12;
		  shr 14, 0, 6, 14;
		  or 12, 14, 0, 12;
		  and 12, 30, 0, 14;
		  add_wrap 15, 0, 16, 15;
		  add_wrap 14, 11, 0, 14;
		  branch_if_diff_nonzero 15, 29, ___dot_L10007aa8;
		  jump ___dot_L10007a5a, 32;
		___dot_L10007af8:
		  add_wrap 0, 0, 0, 11;
		  and 6, 0, 252, 12;
		  wrap16 12, 4, 12;
		  add_wrap 7, 12, 0, 7;
		  is_diff_greater_than 0, 28, -(192), 12;
		  sub_wrap_with_offset 0, 12, 0, 12;
		  and 28, 12, 0, 12;
		  and 12, 0, 3, 12;
		  wrap16 12, 4, 13;
		___dot_L10007b14:
		  mload 7, 0, 12, 32;
		  add_wrap 7, 0, 4, 7;
		  xor 12, 0, 4294967295, 14;
		  shr 14, 0, 7, 14;
		  shr 12, 0, 6, 12;
		  or 12, 14, 0, 12;
		  and 12, 30, 0, 12;
		  add_wrap 13, 0, 4294967292, 13;
		  add_wrap 11, 12, 0, 11;
		  branch_if_diff_nonzero 13, 0, ___dot_L10007b14;
		  and 11, 5, 0, 12;
		  shr 11, 0, 8, 11;
		  and 11, 5, 0, 11;
		  add_wrap 11, 12, 0, 11;
		  wrap16 11, 65536, 12;
		  add_wrap 11, 12, 0, 11;
		  shr 11, 0, 16, 11;
		  add_wrap 10, 11, 0, 10;
		  jump_dyn 1, 32;
		_ZN4core3fmt3num52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$i8$GT$3fmt17hd250080e1f18d68aE:
		_ZN4core3fmt3num52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$u8$GT$3fmt17h0fdedf1563937b07E:
		  add_wrap 2, 0, 4294967152, 2;
		  mstore 2, 0, 140, 1;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 11, 0, 16;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 2, 0, 140, 12;
		  add_wrap 0, 0, 10, 11;
		  jump ___dot_L10007b6c, 32;
		___dot_L10007b58:
		  add_wrap 13, 0, 87, 13;
		___dot_L10007b5c:
		  add_wrap 12, 0, 4294967295, 14;
		  shr 10, 0, 4, 10;
		  mload 12, 4294967295, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 4294967295, 32;
		  add_wrap 15, 0, 1, 15;
		  add_wrap 0, 14, 0, 12;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10007b7a;
		___dot_L10007b6c:
		  and 10, 0, 15, 13;
		  branch_if_diff_greater_than 13, 11, -1, ___dot_L10007b58;
		  add_wrap 13, 0, 48, 13;
		  jump ___dot_L10007b5c, 32;
		___dot_L10007b7a:
		  add_wrap 0, 0, 128, 11;
		  sub_wrap_with_offset 11, 15, 0, 10;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10007ba2;
		  set_reg 12, 268442288;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 0, 2, 13;
		  add_wrap 0, 16, 0, 10;
		  jump _ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E, 1;
		  mload 2, 140, 1, 32;
		  add_wrap 2, 0, 144, 2;
		  jump_dyn 1, 32;
		___dot_L10007ba2:
		  set_reg 12, 268442272;
		  add_wrap 0, 0, 128, 11;
		  jump _ZN4core5slice5index26slice_start_index_len_fail17hf4736d47a4088c7dE, 1;
		_ZN4core3fmt3num52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$i8$GT$3fmt17h3eccc19cdbb6be7dE:
		_ZN4core3fmt3num52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$u8$GT$3fmt17h737d3965b44ee029E:
		  add_wrap 2, 0, 4294967152, 2;
		  mstore 2, 0, 140, 1;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 11, 0, 16;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 2, 0, 140, 12;
		  add_wrap 0, 0, 10, 11;
		  jump ___dot_L10007bdc, 32;
		___dot_L10007bc8:
		  add_wrap 13, 0, 55, 13;
		___dot_L10007bcc:
		  add_wrap 12, 0, 4294967295, 14;
		  shr 10, 0, 4, 10;
		  mload 12, 4294967295, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 4294967295, 32;
		  add_wrap 15, 0, 1, 15;
		  add_wrap 0, 14, 0, 12;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10007bea;
		___dot_L10007bdc:
		  and 10, 0, 15, 13;
		  branch_if_diff_greater_than 13, 11, -1, ___dot_L10007bc8;
		  add_wrap 13, 0, 48, 13;
		  jump ___dot_L10007bcc, 32;
		___dot_L10007bea:
		  add_wrap 0, 0, 128, 11;
		  sub_wrap_with_offset 11, 15, 0, 10;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10007c12;
		  set_reg 12, 268442288;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 0, 2, 13;
		  add_wrap 0, 16, 0, 10;
		  jump _ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E, 1;
		  mload 2, 140, 1, 32;
		  add_wrap 2, 0, 144, 2;
		  jump_dyn 1, 32;
		___dot_L10007c12:
		  set_reg 12, 268442272;
		  add_wrap 0, 0, 128, 11;
		  jump _ZN4core5slice5index26slice_start_index_len_fail17hf4736d47a4088c7dE, 1;
		_ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$i32$GT$3fmt17h2c801e0f986ccbacE:
		_ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$u32$GT$3fmt17he64bd597f748a0a5E:
		_ZN4core3fmt3num55_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$isize$GT$3fmt17hb74a9638b288a0a8E:
		_ZN4core3fmt3num55_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$usize$GT$3fmt17hb2049cc5da27c4f4E:
		  add_wrap 2, 0, 4294967152, 2;
		  mstore 2, 0, 140, 1;
		  mload 10, 0, 10, 32;
		  add_wrap 0, 11, 0, 16;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 2, 0, 140, 12;
		  add_wrap 0, 0, 10, 11;
		  jump ___dot_L10007c4a, 32;
		___dot_L10007c36:
		  add_wrap 13, 0, 87, 13;
		___dot_L10007c3a:
		  add_wrap 12, 0, 4294967295, 14;
		  shr 10, 0, 4, 10;
		  mload 12, 4294967295, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 4294967295, 32;
		  add_wrap 15, 0, 1, 15;
		  add_wrap 0, 14, 0, 12;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10007c58;
		___dot_L10007c4a:
		  and 10, 0, 15, 13;
		  branch_if_diff_greater_than 13, 11, -1, ___dot_L10007c36;
		  add_wrap 13, 0, 48, 13;
		  jump ___dot_L10007c3a, 32;
		___dot_L10007c58:
		  add_wrap 0, 0, 128, 11;
		  sub_wrap_with_offset 11, 15, 0, 10;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10007c80;
		  set_reg 12, 268442288;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 0, 2, 13;
		  add_wrap 0, 16, 0, 10;
		  jump _ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E, 1;
		  mload 2, 140, 1, 32;
		  add_wrap 2, 0, 144, 2;
		  jump_dyn 1, 32;
		___dot_L10007c80:
		  set_reg 12, 268442272;
		  add_wrap 0, 0, 128, 11;
		  jump _ZN4core5slice5index26slice_start_index_len_fail17hf4736d47a4088c7dE, 1;
		_ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$i32$GT$3fmt17h5a591c49bb207bb8E:
		_ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$u32$GT$3fmt17hd1579f74bb557849E:
		_ZN4core3fmt3num55_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$isize$GT$3fmt17h556b55b8ff9e4ae5E:
		_ZN4core3fmt3num55_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$usize$GT$3fmt17h547e218c40c9cf27E:
		  add_wrap 2, 0, 4294967152, 2;
		  mstore 2, 0, 140, 1;
		  mload 10, 0, 10, 32;
		  add_wrap 0, 11, 0, 16;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 2, 0, 140, 12;
		  add_wrap 0, 0, 10, 11;
		  jump ___dot_L10007cb8, 32;
		___dot_L10007ca4:
		  add_wrap 13, 0, 55, 13;
		___dot_L10007ca8:
		  add_wrap 12, 0, 4294967295, 14;
		  shr 10, 0, 4, 10;
		  mload 12, 4294967295, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 4294967295, 32;
		  add_wrap 15, 0, 1, 15;
		  add_wrap 0, 14, 0, 12;
		  branch_if_diff_equal 10, 0, 0, ___dot_L10007cc6;
		___dot_L10007cb8:
		  and 10, 0, 15, 13;
		  branch_if_diff_greater_than 13, 11, -1, ___dot_L10007ca4;
		  add_wrap 13, 0, 48, 13;
		  jump ___dot_L10007ca8, 32;
		___dot_L10007cc6:
		  add_wrap 0, 0, 128, 11;
		  sub_wrap_with_offset 11, 15, 0, 10;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10007cee;
		  set_reg 12, 268442288;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 0, 2, 13;
		  add_wrap 0, 16, 0, 10;
		  jump _ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E, 1;
		  mload 2, 140, 1, 32;
		  add_wrap 2, 0, 144, 2;
		  jump_dyn 1, 32;
		___dot_L10007cee:
		  set_reg 12, 268442272;
		  add_wrap 0, 0, 128, 11;
		  jump _ZN4core5slice5index26slice_start_index_len_fail17hf4736d47a4088c7dE, 1;
		_ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$i64$GT$3fmt17h8a8cb446dfc638f8E:
		_ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_LowerHex$u20$for$u20$u64$GT$3fmt17h476616716b95ad52E:
		  add_wrap 2, 0, 4294967152, 2;
		  mstore 2, 0, 140, 1;
		  mload 10, 4, 12, 32;
		  mload 10, 0, 10, 32;
		  add_wrap 0, 11, 0, 16;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 2, 0, 140, 13;
		  add_wrap 0, 0, 10, 17;
		  jump ___dot_L10007d36, 32;
		___dot_L10007d14:
		  add_wrap 11, 0, 87, 5;
		___dot_L10007d18:
		  add_wrap 13, 0, 4294967295, 14;
		  shr 10, 0, 4, 11;
		  wrap16 12, 65536, 32;
		  wrap16 32, 4096, 10;
		  or 10, 11, 0, 10;
		  shr 12, 0, 4, 12;
		  mload 13, 4294967295, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 5, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 4294967295, 32;
		  or 10, 12, 0, 11;
		  add_wrap 15, 0, 1, 15;
		  add_wrap 0, 14, 0, 13;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007d44;
		___dot_L10007d36:
		  and 10, 0, 15, 11;
		  branch_if_diff_greater_than 11, 17, -1, ___dot_L10007d14;
		  add_wrap 11, 0, 48, 5;
		  jump ___dot_L10007d18, 32;
		___dot_L10007d44:
		  add_wrap 0, 0, 128, 11;
		  sub_wrap_with_offset 11, 15, 0, 10;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10007d6c;
		  set_reg 12, 268442288;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 0, 2, 13;
		  add_wrap 0, 16, 0, 10;
		  jump _ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E, 1;
		  mload 2, 140, 1, 32;
		  add_wrap 2, 0, 144, 2;
		  jump_dyn 1, 32;
		___dot_L10007d6c:
		  set_reg 12, 268442272;
		  add_wrap 0, 0, 128, 11;
		  jump _ZN4core5slice5index26slice_start_index_len_fail17hf4736d47a4088c7dE, 1;
		_ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$i64$GT$3fmt17hafdf13ae719a13f5E:
		_ZN4core3fmt3num53_$LT$impl$u20$core_dot__dot_fmt_dot__dot_UpperHex$u20$for$u20$u64$GT$3fmt17h44a26f96c37e90f5E:
		  add_wrap 2, 0, 4294967152, 2;
		  mstore 2, 0, 140, 1;
		  mload 10, 4, 12, 32;
		  mload 10, 0, 10, 32;
		  add_wrap 0, 11, 0, 16;
		  add_wrap 0, 0, 0, 15;
		  add_wrap 2, 0, 140, 13;
		  add_wrap 0, 0, 10, 17;
		  jump ___dot_L10007db4, 32;
		___dot_L10007d92:
		  add_wrap 11, 0, 55, 5;
		___dot_L10007d96:
		  add_wrap 13, 0, 4294967295, 14;
		  shr 10, 0, 4, 11;
		  wrap16 12, 65536, 32;
		  wrap16 32, 4096, 10;
		  or 10, 11, 0, 10;
		  shr 12, 0, 4, 12;
		  mload 13, 4294967295, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 5, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 4294967295, 32;
		  or 10, 12, 0, 11;
		  add_wrap 15, 0, 1, 15;
		  add_wrap 0, 14, 0, 13;
		  branch_if_diff_equal 11, 0, 0, ___dot_L10007dc2;
		___dot_L10007db4:
		  and 10, 0, 15, 11;
		  branch_if_diff_greater_than 11, 17, -1, ___dot_L10007d92;
		  add_wrap 11, 0, 48, 5;
		  jump ___dot_L10007d96, 32;
		___dot_L10007dc2:
		  add_wrap 0, 0, 128, 11;
		  sub_wrap_with_offset 11, 15, 0, 10;
		  branch_if_diff_greater_than 10, 11, 0, ___dot_L10007dea;
		  set_reg 12, 268442288;
		  add_wrap 0, 0, 1, 11;
		  add_wrap 0, 0, 2, 13;
		  add_wrap 0, 16, 0, 10;
		  jump _ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E, 1;
		  mload 2, 140, 1, 32;
		  add_wrap 2, 0, 144, 2;
		  jump_dyn 1, 32;
		___dot_L10007dea:
		  set_reg 12, 268442272;
		  add_wrap 0, 0, 128, 11;
		  jump _ZN4core5slice5index26slice_start_index_len_fail17hf4736d47a4088c7dE, 1;
		_ZN4core3fmt3num3imp7fmt_u3217h1e10a2100de2b08aE:
		  add_wrap 2, 0, 4294967232, 2;
		  mstore 2, 0, 60, 1;
		  mstore 2, 0, 56, 8;
		  mstore 2, 0, 52, 9;
		  add_wrap 0, 12, 0, 16;
		  shr 10, 0, 4, 12;
		  add_wrap 0, 0, 39, 14;
		  add_wrap 0, 0, 625, 13;
		  set_reg 6, 268442290;
		  branch_if_diff_greater_than 12, 13, -1, ___dot_L10007e42;
		  add_wrap 0, 0, 99, 12;
		  branch_if_diff_greater_than 10, 12, 0, ___dot_L10007ed8;
		___dot_L10007e28:
		  add_wrap 0, 0, 10, 12;
		  branch_if_diff_greater_than 10, 12, -1, ___dot_L10007f1a;
		___dot_L10007e2e:
		  add_wrap 14, 0, 4294967295, 12;
		  add_wrap 2, 0, 13, 13;
		  add_wrap 13, 12, 0, 13;
		  or 10, 0, 48, 10;
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		  jump ___dot_L10007f38, 32;
		___dot_L10007e42:
		  add_wrap 0, 0, 0, 14;
		  add_wrap 2, 0, 48, 17;
		  add_wrap 2, 0, 50, 5;
		  set_reg 12, 3518435328;
		  add_wrap 12, 0, 1881, 28;
		  set_reg 12, 8192;
		  add_wrap 12, 0, 1808, 29;
		  set_reg 12, 4096;
		  add_wrap 12, 0, 1147, 30;
		  add_wrap 0, 0, 100, 7;
		  set_reg 15, 99999744;
		  add_wrap 15, 0, 255, 31;
		___dot_L10007e6c:
		  add_wrap 0, 10, 0, 15;
		  mul 10, 28, 32, 10;
		  shr 10, 0, 13, 10;
		  mul 10, 29, 12, 32;
		  sub_wrap_with_offset 15, 12, 0, 13;
		  wrap16 13, 65536, 12;
		  shr 12, 0, 18, 12;
		  mul 12, 30, 12, 32;
		  shr 12, 0, 17, 8;
		  shr 12, 0, 16, 12;
		  and 12, 0, 2046, 12;
		  mul 8, 7, 8, 32;
		  sub_wrap_with_offset 13, 8, 0, 13;
		  wrap16 13, 65536, 32;
		  wrap16 32, 2, 13;
		  add_wrap 12, 6, 0, 12;
		  mload 12, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 8;
		  shr 13, 0, 16, 13;
		  add_wrap 17, 14, 0, 9;
		  mload 12, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 9, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 8, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 1, 32;
		  add_wrap 13, 6, 0, 13;
		  mload 13, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 8;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 9, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 9, 33, 0, 32;
		  add_wrap 5, 14, 0, 12;
		  mload 12, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 8, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 1, 32;
		  mload 12, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 0, 32;
		  add_wrap 14, 0, 4294967292, 14;
		  branch_if_diff_greater_than 15, 31, 0, ___dot_L10007e6c;
		  add_wrap 14, 0, 39, 14;
		  add_wrap 0, 0, 99, 12;
		  branch_if_diff_greater_than 12, 10, -1, ___dot_L10007e28;
		___dot_L10007ed8:
		  wrap16 10, 65536, 12;
		  shr 12, 0, 18, 12;
		  set_reg 13, 5243;
		  mul 12, 13, 12, 32;
		  shr 12, 0, 17, 12;
		  add_wrap 0, 0, 100, 13;
		  mul 12, 13, 13, 32;
		  sub_wrap_with_offset 10, 13, 0, 10;
		  wrap16 10, 65536, 32;
		  wrap16 32, 2, 10;
		  shr 10, 0, 16, 10;
		  add_wrap 14, 0, 4294967294, 14;
		  add_wrap 10, 6, 0, 10;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 2, 0, 13, 15;
		  add_wrap 15, 14, 0, 15;
		  mload 15, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 15, 33, 1, 32;
		  mload 15, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 15, 33, 0, 32;
		  add_wrap 0, 12, 0, 10;
		  add_wrap 0, 0, 10, 12;
		  branch_if_diff_greater_than 12, 10, 0, ___dot_L10007e2e;
		___dot_L10007f1a:
		  wrap16 10, 2, 10;
		  add_wrap 14, 0, 4294967294, 12;
		  add_wrap 10, 6, 0, 10;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 2, 0, 13, 14;
		  add_wrap 14, 12, 0, 14;
		  mload 14, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 1, 32;
		  mload 14, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 0, 32;
		___dot_L10007f38:
		  add_wrap 2, 0, 13, 14;
		  add_wrap 14, 12, 0, 14;
		  add_wrap 0, 0, 39, 15;
		  sub_wrap_with_offset 15, 12, 0, 15;
		  add_wrap 0, 0, 1, 12;
		  add_wrap 0, 16, 0, 10;
		  add_wrap 0, 0, 0, 13;
		  jump _ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E, 1;
		  mload 2, 60, 1, 32;
		  mload 2, 56, 8, 32;
		  mload 2, 52, 9, 32;
		  add_wrap 2, 0, 64, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt3num3imp51_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u8$GT$3fmt17h93ec0d7ebf9ed4e6E:
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 0, 11, 0, 12;
		  add_wrap 0, 0, 1, 11;
		  jump _ZN4core3fmt3num3imp7fmt_u3217h1e10a2100de2b08aE, 32;
		_ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u32$GT$3fmt17h5898aa4ddbfe8fceE:
		_ZN4core3fmt3num3imp54_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$usize$GT$3fmt17hb511954279292203E:
		  mload 10, 0, 10, 32;
		  add_wrap 0, 11, 0, 12;
		  add_wrap 0, 0, 1, 11;
		  jump _ZN4core3fmt3num3imp7fmt_u3217h1e10a2100de2b08aE, 32;
		_ZN4core3fmt3num3imp7fmt_u6417he4485b0fe0820867E:
		  add_wrap 2, 0, 4294967200, 2;
		  mstore 2, 0, 92, 1;
		  mstore 2, 0, 88, 8;
		  mstore 2, 0, 84, 9;
		  mstore 2, 0, 80, 18;
		  mstore 2, 0, 76, 19;
		  mstore 2, 0, 72, 20;
		  mstore 2, 0, 68, 21;
		  mstore 2, 0, 64, 22;
		  mstore 2, 0, 60, 23;
		  mstore 2, 0, 56, 24;
		  mstore 2, 0, 52, 25;
		  mstore 2, 0, 48, 26;
		  mstore 2, 0, 44, 27;
		  add_wrap 0, 13, 0, 8;
		  add_wrap 0, 12, 0, 19;
		  add_wrap 0, 11, 0, 9;
		  wrap16 11, 65536, 32;
		  wrap16 32, 4096, 11;
		  shr 10, 0, 4, 12;
		  or 11, 12, 0, 11;
		  is_diff_greater_than 0, 11, -(625), 11;
		  shr 9, 0, 4, 12;
		  is_diff_greater_than 0, 12, -(1), 12;
		  and 11, 12, 0, 11;
		  set_reg 21, 268442290;
		  branch_if_diff_nonzero 11, 0, ___dot_L10008062;
		  mstore 2, 0, 0, 8;
		  add_wrap 0, 0, 0, 18;
		  add_wrap 2, 0, 40, 23;
		  add_wrap 2, 0, 42, 24;
		  set_reg 11, 8192;
		  add_wrap 11, 0, 1808, 20;
		  set_reg 11, 4096;
		  add_wrap 11, 0, 1147, 25;
		  add_wrap 0, 0, 100, 26;
		  set_reg 11, 99999744;
		  add_wrap 11, 0, 255, 27;
		___dot_L10007fe0:
		  add_wrap 0, 10, 0, 22;
		  add_wrap 0, 9, 0, 11;
		  add_wrap 0, 20, 0, 12;
		  add_wrap 0, 0, 0, 13;
		  jump __udivdi3, 1;
		  is_diff_greater_than 9, 0, 0, 12;
		  mul 10, 20, 13, 32;
		  sub_wrap_with_offset 22, 13, 0, 13;
		  wrap16 13, 65536, 14;
		  shr 14, 0, 18, 14;
		  mul 14, 25, 14, 32;
		  shr 14, 0, 17, 15;
		  shr 14, 0, 16, 14;
		  and 14, 0, 2046, 14;
		  mul 15, 26, 15, 32;
		  sub_wrap_with_offset 13, 15, 0, 13;
		  wrap16 13, 65536, 32;
		  wrap16 32, 2, 13;
		  add_wrap 14, 21, 0, 14;
		  mload 14, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  shr 13, 0, 16, 13;
		  add_wrap 23, 18, 0, 8;
		  mload 14, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 8, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 1, 32;
		  add_wrap 13, 21, 0, 13;
		  mload 13, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 15;
		  mload 13, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 8, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 8, 33, 0, 32;
		  add_wrap 24, 18, 0, 14;
		  mload 14, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 15, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 1, 32;
		  mload 14, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 0, 32;
		  is_diff_greater_than 22, 27, 0, 13;
		  or 12, 13, 0, 12;
		  add_wrap 18, 0, 4294967292, 18;
		  add_wrap 0, 11, 0, 9;
		  branch_if_diff_nonzero 12, 0, ___dot_L10007fe0;
		  add_wrap 18, 0, 39, 11;
		  mload 2, 0, 8, 32;
		  add_wrap 0, 0, 99, 12;
		  branch_if_diff_greater_than 10, 12, 0, ___dot_L1000806e;
		  jump ___dot_L100080aa, 32;
		___dot_L10008062:
		  add_wrap 0, 0, 39, 11;
		  add_wrap 0, 0, 99, 12;
		  branch_if_diff_greater_than 12, 10, -1, ___dot_L100080aa;
		___dot_L1000806e:
		  wrap16 10, 65536, 12;
		  shr 12, 0, 18, 12;
		  set_reg 13, 5243;
		  mul 12, 13, 12, 32;
		  shr 12, 0, 17, 12;
		  add_wrap 0, 0, 100, 13;
		  mul 12, 13, 13, 32;
		  sub_wrap_with_offset 10, 13, 0, 10;
		  wrap16 10, 65536, 32;
		  wrap16 32, 2, 10;
		  shr 10, 0, 16, 10;
		  add_wrap 11, 0, 4294967294, 11;
		  add_wrap 10, 21, 0, 10;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 13;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 2, 0, 5, 14;
		  add_wrap 14, 11, 0, 14;
		  mload 14, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 13, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 1, 32;
		  mload 14, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 14, 33, 0, 32;
		  add_wrap 0, 12, 0, 10;
		___dot_L100080aa:
		  add_wrap 0, 0, 10, 12;
		  branch_if_diff_greater_than 10, 12, -1, ___dot_L100080c2;
		  add_wrap 11, 0, 4294967295, 11;
		  add_wrap 2, 0, 5, 12;
		  add_wrap 12, 11, 0, 12;
		  or 10, 0, 48, 10;
		  mload 12, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 12, 33, 0, 32;
		  jump ___dot_L100080de, 32;
		___dot_L100080c2:
		  wrap16 10, 2, 10;
		  add_wrap 11, 0, 4294967294, 11;
		  add_wrap 10, 21, 0, 10;
		  mload 10, 1, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  mload 10, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 10;
		  add_wrap 2, 0, 5, 13;
		  add_wrap 13, 11, 0, 13;
		  mload 13, 1, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 1, 32;
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 10, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		___dot_L100080de:
		  add_wrap 2, 0, 5, 14;
		  add_wrap 14, 11, 0, 14;
		  add_wrap 0, 0, 39, 15;
		  sub_wrap_with_offset 15, 11, 0, 15;
		  add_wrap 0, 0, 1, 12;
		  add_wrap 0, 8, 0, 10;
		  add_wrap 0, 19, 0, 11;
		  add_wrap 0, 0, 0, 13;
		  jump _ZN4core3fmt9Formatter12pad_integral17h014113c88b040249E, 1;
		  mload 2, 92, 1, 32;
		  mload 2, 88, 8, 32;
		  mload 2, 84, 9, 32;
		  mload 2, 80, 18, 32;
		  mload 2, 76, 19, 32;
		  mload 2, 72, 20, 32;
		  mload 2, 68, 21, 32;
		  mload 2, 64, 22, 32;
		  mload 2, 60, 23, 32;
		  mload 2, 56, 24, 32;
		  mload 2, 52, 25, 32;
		  mload 2, 48, 26, 32;
		  mload 2, 44, 27, 32;
		  add_wrap 2, 0, 96, 2;
		  jump_dyn 1, 32;
		_ZN4core3fmt3num3imp52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Display$u20$for$u20$u64$GT$3fmt17he69166304e9a7811E:
		  mload 10, 4, 13, 32;
		  mload 10, 0, 10, 32;
		  add_wrap 0, 0, 1, 12;
		  add_wrap 0, 11, 0, 14;
		  add_wrap 0, 13, 0, 11;
		  add_wrap 0, 14, 0, 13;
		  jump _ZN4core3fmt3num3imp7fmt_u6417he4485b0fe0820867E, 32;
		_ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hdda82f2323befdedE:
		  mload 10, 4, 12, 32;
		  mload 10, 0, 10, 32;
		  mload 12, 12, 15, 32;
		  jump_dyn 15, 32;
		_ZN44_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Display$GT$3fmt17hc8a5a7407b1afeceE:
		  mload 10, 0, 13, 32;
		  mload 10, 4, 12, 32;
		  add_wrap 0, 11, 0, 10;
		  add_wrap 0, 13, 0, 11;
		  jump _ZN4core3fmt9Formatter3pad17h3a2f05c7cb75f066E, 32;
		_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17he25d6f41e5deb938E:
		  branch_if_diff_equal 13, 0, 0, ___dot_L100081e6;
		  branch_if_diff_nonzero 14, 0, ___dot_L100081e6;
		  branch_if_diff_equal 12, 0, 0, ___dot_L100082de;
		  branch_if_diff_greater_than 12, 13, -1, ___dot_L100082ee;
		  shr 13, 0, 16, 17;
		  is_diff_greater_than 12, 17, 0, 15;
		  xor 15, 0, 1, 16;
		  add_wrap 0, 13, 0, 6;
		  branch_if_diff_greater_than 12, 17, 0, ___dot_L10008164;
		  add_wrap 0, 17, 0, 6;
		___dot_L10008164:
		  wrap16 16, 16, 16;
		  shr 6, 0, 8, 5;
		  is_diff_greater_than 12, 5, 0, 15;
		  xor 15, 0, 1, 17;
		  branch_if_diff_greater_than 12, 5, 0, ___dot_L10008178;
		  add_wrap 0, 5, 0, 6;
		___dot_L10008178:
		  wrap16 17, 8, 17;
		  or 17, 16, 0, 16;
		  shr 6, 0, 4, 5;
		  is_diff_greater_than 12, 5, 0, 15;
		  xor 15, 0, 1, 17;
		  branch_if_diff_greater_than 12, 5, 0, ___dot_L10008190;
		  add_wrap 0, 5, 0, 6;
		___dot_L10008190:
		  wrap16 17, 4, 17;
		  or 17, 16, 0, 16;
		  shr 6, 0, 2, 5;
		  is_diff_greater_than 12, 5, 0, 15;
		  xor 15, 0, 1, 17;
		  branch_if_diff_greater_than 12, 5, 0, ___dot_L100081a8;
		  add_wrap 0, 5, 0, 6;
		___dot_L100081a8:
		  wrap16 17, 2, 17;
		  shr 6, 0, 1, 15;
		  is_diff_greater_than 12, 15, 0, 15;
		  xor 15, 0, 1, 15;
		  or 17, 15, 0, 15;
		  or 15, 16, 0, 16;
		  branch_if_diff_nonzero 16, 0, ___dot_L10008310;
		  add_wrap 0, 0, 31, 16;
		  add_wrap 16, 0, 4294967264, 6;
		  and 16, 0, 0x1f, 32;
		  shl 13, 32, 0, 17;
		  to_signed 6, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10008324;
		___dot_L100081d0:
		  and 16, 0, 0x1f, 32;
		  shl 14, 32, 0, 5;
		  xor 16, 0, 4294967295, 15;
		  shr 13, 0, 1, 14;
		  and 15, 0, 0x1f, 32;
		  shr 14, 32, 0, 14;
		  or 5, 14, 0, 7;
		  jump ___dot_L10008326, 32;
		___dot_L100081e6:
		  branch_if_diff_equal 12, 14, 0, ___dot_L100081f4;
		  is_diff_greater_than 14, 12, 0, 15;
		  add_wrap 0, 0, 0, 5;
		  branch_if_diff_equal 15, 0, 0, ___dot_L100081fc;
		  jump ___dot_L100082d4, 32;
		___dot_L100081f4:
		  is_diff_greater_than 13, 11, 0, 15;
		  add_wrap 0, 0, 0, 5;
		  branch_if_diff_nonzero 15, 0, ___dot_L100082d4;
		___dot_L100081fc:
		  branch_if_diff_equal 12, 0, 0, ___dot_L100082d4;
		  shr 12, 0, 16, 5;
		  is_diff_greater_than 14, 5, 0, 15;
		  xor 15, 0, 1, 16;
		  wrap16 16, 16, 16;
		  add_wrap 0, 12, 0, 17;
		  branch_if_diff_greater_than 14, 5, 0, ___dot_L10008214;
		  add_wrap 0, 5, 0, 17;
		___dot_L10008214:
		  shr 17, 0, 8, 5;
		  is_diff_greater_than 14, 5, 0, 15;
		  xor 15, 0, 1, 15;
		  wrap16 15, 8, 15;
		  or 15, 16, 0, 16;
		  branch_if_diff_greater_than 14, 5, 0, ___dot_L1000822c;
		  add_wrap 0, 5, 0, 17;
		___dot_L1000822c:
		  shr 17, 0, 4, 5;
		  is_diff_greater_than 14, 5, 0, 15;
		  xor 15, 0, 1, 15;
		  wrap16 15, 4, 15;
		  or 15, 16, 0, 16;
		  branch_if_diff_greater_than 14, 5, 0, ___dot_L10008244;
		  add_wrap 0, 5, 0, 17;
		___dot_L10008244:
		  shr 17, 0, 2, 5;
		  is_diff_greater_than 14, 5, 0, 15;
		  xor 15, 0, 1, 15;
		  wrap16 15, 2, 15;
		  or 15, 16, 0, 16;
		  branch_if_diff_greater_than 14, 5, 0, ___dot_L1000825c;
		  add_wrap 0, 5, 0, 17;
		___dot_L1000825c:
		  add_wrap 0, 0, 0, 5;
		  shr 17, 0, 1, 15;
		  is_diff_greater_than 14, 15, 0, 15;
		  xor 15, 0, 1, 15;
		  or 16, 15, 0, 16;
		  and 16, 0, 0x1f, 32;
		  shl 14, 32, 0, 17;
		  xor 16, 0, 31, 6;
		  shr 13, 0, 1, 15;
		  and 6, 0, 0x1f, 32;
		  shr 15, 32, 0, 15;
		  or 17, 15, 0, 7;
		  and 16, 0, 0x1f, 32;
		  shl 13, 32, 0, 6;
		  add_wrap 0, 0, 1, 15;
		  and 16, 0, 0x1f, 32;
		  shl 15, 32, 0, 16;
		  jump ___dot_L100082a2, 32;
		___dot_L1000828e:
		  shr 6, 0, 1, 17;
		  wrap16 7, 65536, 32;
		  wrap16 32, 32768, 15;
		  or 17, 15, 0, 6;
		  shr 7, 0, 1, 7;
		  shr 16, 0, 1, 16;
		___dot_L100082a2:
		  is_diff_greater_than 6, 11, 0, 17;
		  sub_wrap_with_offset 12, 7, 0, 15;
		  sub_wrap_with_offset 15, 17, 0, 17;
		  to_signed 17, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L1000828e;
		  sub_wrap_with_offset 11, 6, 0, 11;
		  branch_if_diff_equal 17, 14, 0, ___dot_L100082c6;
		  is_diff_greater_than 14, 17, 0, 12;
		  or 16, 5, 0, 5;
		  branch_if_diff_equal 12, 0, 0, ___dot_L100082d0;
		  jump ___dot_L100082da, 32;
		___dot_L100082c6:
		  is_diff_greater_than 13, 11, 0, 12;
		  or 16, 5, 0, 5;
		  branch_if_diff_nonzero 12, 0, ___dot_L100082da;
		___dot_L100082d0:
		  add_wrap 0, 17, 0, 12;
		  jump ___dot_L1000828e, 32;
		___dot_L100082d4:
		  add_wrap 0, 12, 0, 17;
		  add_wrap 0, 5, 0, 16;
		  jump ___dot_L1000837a, 32;
		___dot_L100082da:
		  add_wrap 0, 0, 0, 16;
		  jump ___dot_L1000837a, 32;
		___dot_L100082de:
		  add_wrap 0, 0, 0, 17;
		  add_wrap 0, 0, 0, 16;
		  divremu 11, 13, 5, 32;
		  mul 5, 13, 12, 32;
		  sub_wrap_with_offset 11, 12, 0, 11;
		  jump ___dot_L1000837a, 32;
		___dot_L100082ee:
		  branch_if_diff_nonzero 12, 13, ___dot_L1000838a;
		  add_wrap 0, 0, 0, 17;
		  divremu 11, 12, 13, 32;
		  mul 13, 12, 12, 32;
		  sub_wrap_with_offset 11, 12, 0, 11;
		  is_diff_greater_than 13, 0, 0, 16;
		  add_wrap 13, 0, 4294967295, 13;
		  add_wrap 13, 0, 1, 5;
		  is_diff_greater_than 0, 5, -(1), 12;
		  add_wrap 16, 12, 0, 16;
		  jump ___dot_L1000837a, 32;
		___dot_L10008310:
		  add_wrap 0, 0, 32, 15;
		  sub_wrap_with_offset 15, 16, 0, 16;
		  add_wrap 16, 0, 4294967264, 6;
		  and 16, 0, 0x1f, 32;
		  shl 13, 32, 0, 17;
		  to_signed 6, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L100081d0;
		___dot_L10008324:
		  add_wrap 0, 17, 0, 7;
		___dot_L10008326:
		  add_wrap 0, 0, 0, 5;
		  to_signed 6, 32;
		  is_diff_greater_than 0, 32, 0, 32;
		  affine 32, 32, 0xffffffff, 0;
		  xor 32, 6, 0, 14;
		  shr 14, 0, 31, 14;
		  xor 32, 14, 0, 14;
		  and 14, 17, 0, 17;
		  add_wrap 0, 0, 1, 15;
		  and 16, 0, 0x1f, 32;
		  shl 15, 32, 0, 16;
		  jump ___dot_L1000834c, 32;
		___dot_L10008338:
		  shr 17, 0, 1, 14;
		  wrap16 7, 65536, 32;
		  wrap16 32, 32768, 15;
		  or 14, 15, 0, 17;
		  shr 7, 0, 1, 7;
		  shr 16, 0, 1, 16;
		___dot_L1000834c:
		  is_diff_greater_than 17, 11, 0, 14;
		  sub_wrap_with_offset 12, 7, 0, 15;
		  sub_wrap_with_offset 15, 14, 0, 15;
		  to_signed 15, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L10008338;
		  sub_wrap_with_offset 11, 17, 0, 11;
		  or 16, 5, 0, 5;
		  branch_if_diff_equal 15, 0, 0, ___dot_L10008368;
		  add_wrap 0, 15, 0, 12;
		  jump ___dot_L10008338, 32;
		___dot_L10008368:
		  add_wrap 0, 0, 0, 17;
		  add_wrap 0, 0, 0, 16;
		  divremu 11, 13, 12, 32;
		  mul 12, 13, 13, 32;
		  sub_wrap_with_offset 11, 13, 0, 11;
		  or 12, 5, 0, 5;
		___dot_L1000837a:
		  mstore 10, 0, 8, 11;
		  mstore 10, 0, 0, 5;
		  mstore 10, 0, 12, 17;
		  mstore 10, 0, 4, 16;
		  jump_dyn 1, 32;
		___dot_L1000838a:
		  shr 13, 0, 16, 5;
		  divremu 12, 13, 16, 32;
		  mul 16, 13, 15, 32;
		  sub_wrap_with_offset 12, 15, 0, 17;
		  branch_if_diff_nonzero 5, 0, ___dot_L100083d6;
		  shr 11, 0, 16, 12;
		  wrap16 17, 65536, 17;
		  or 17, 12, 0, 14;
		  divremu 14, 13, 14, 32;
		  mul 14, 13, 15, 32;
		  sub_wrap_with_offset 12, 15, 0, 12;
		  wrap16 12, 65536, 12;
		  wrap16 11, 65536, 11;
		  shr 11, 0, 16, 11;
		  or 11, 12, 0, 11;
		  divremu 11, 13, 12, 32;
		  mul 12, 13, 13, 32;
		  sub_wrap_with_offset 11, 13, 0, 11;
		  wrap16 14, 65536, 13;
		  shr 14, 0, 16, 14;
		  or 14, 16, 0, 16;
		  or 13, 12, 0, 5;
		  add_wrap 0, 0, 0, 17;
		  jump ___dot_L1000837a, 32;
		___dot_L100083d6:
		  branch_if_diff_equal 17, 14, 0, ___dot_L100083e0;
		  is_diff_greater_than 14, 17, 0, 12;
		  jump ___dot_L100083e4, 32;
		___dot_L100083e0:
		  is_diff_greater_than 13, 11, 0, 12;
		___dot_L100083e4:
		  branch_if_diff_equal 12, 0, 0, ___dot_L100083ea;
		  add_wrap 0, 0, 0, 5;
		  jump ___dot_L1000837a, 32;
		___dot_L100083ea:
		  add_wrap 0, 0, 0, 6;
		  shr 13, 0, 1, 12;
		  wrap16 14, 65536, 32;
		  wrap16 32, 32768, 14;
		  or 14, 12, 0, 14;
		  wrap16 13, 65536, 32;
		  wrap16 32, 32768, 7;
		  set_reg 5, 2147483648;
		  jump ___dot_L10008410, 32;
		___dot_L100083fe:
		  shr 7, 0, 1, 12;
		  wrap16 14, 65536, 32;
		  wrap16 32, 32768, 15;
		  or 12, 15, 0, 7;
		  shr 14, 0, 1, 14;
		  shr 5, 0, 1, 5;
		___dot_L10008410:
		  is_diff_greater_than 7, 11, 0, 15;
		  sub_wrap_with_offset 17, 14, 0, 12;
		  sub_wrap_with_offset 12, 15, 0, 12;
		  to_signed 12, 32;
		  to_signed 0, 33;
		  branch_if_diff_greater_than 33, 32, 0, ___dot_L100083fe;
		  sub_wrap_with_offset 11, 7, 0, 11;
		  or 5, 6, 0, 6;
		  branch_if_diff_equal 12, 0, 0, ___dot_L1000842c;
		  add_wrap 0, 12, 0, 17;
		  jump ___dot_L100083fe, 32;
		___dot_L1000842c:
		  add_wrap 0, 0, 0, 17;
		  divremu 11, 13, 12, 32;
		  mul 12, 13, 13, 32;
		  sub_wrap_with_offset 11, 13, 0, 11;
		  or 12, 6, 0, 5;
		  jump ___dot_L1000837a, 32;
		__udivdi3:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  add_wrap 0, 13, 0, 14;
		  add_wrap 0, 12, 0, 13;
		  add_wrap 0, 11, 0, 12;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 2, 0, 8, 10;
		  jump _ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17he25d6f41e5deb938E, 1;
		  mload 2, 12, 11, 32;
		  mload 2, 8, 10, 32;
		  mload 2, 28, 1, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		__umoddi3:
		  add_wrap 2, 0, 4294967264, 2;
		  mstore 2, 0, 28, 1;
		  add_wrap 0, 13, 0, 14;
		  add_wrap 0, 12, 0, 13;
		  add_wrap 0, 11, 0, 12;
		  add_wrap 0, 10, 0, 11;
		  add_wrap 2, 0, 8, 10;
		  jump _ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17he25d6f41e5deb938E, 1;
		  mload 2, 20, 11, 32;
		  mload 2, 16, 10, 32;
		  mload 2, 28, 1, 32;
		  add_wrap 2, 0, 32, 2;
		  jump_dyn 1, 32;
		memcpy:
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L100084f6;
		  sub_wrap_with_offset 0, 10, 0, 13;
		  and 13, 0, 3, 16;
		  add_wrap 10, 16, 0, 7;
		  branch_if_diff_equal 16, 0, 0, ___dot_L100084a8;
		  add_wrap 0, 11, 0, 15;
		  add_wrap 0, 10, 0, 13;
		___dot_L10008498:
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		  add_wrap 13, 0, 1, 13;
		  add_wrap 15, 0, 1, 15;
		  branch_if_diff_greater_than 7, 13, 0, ___dot_L10008498;
		___dot_L100084a8:
		  add_wrap 11, 16, 0, 17;
		  sub_wrap_with_offset 12, 16, 0, 16;
		  and 16, 0, 4294967292, 5;
		  and 17, 0, 3, 11;
		  add_wrap 7, 5, 0, 13;
		  branch_if_diff_equal 11, 0, 0, ___dot_L100084fc;
		  to_signed 0, 32;
		  to_signed 5, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10008510;
		  wrap16 17, 8, 11;
		  and 11, 0, 24, 6;
		  and 17, 0, 4294967292, 15;
		  mload 15, 0, 12, 32;
		  sub_wrap_with_offset 0, 11, 0, 11;
		  and 11, 0, 24, 28;
		  add_wrap 15, 0, 4, 15;
		___dot_L100084da:
		  mload 15, 0, 14, 32;
		  and 6, 0, 0x1f, 32;
		  shr 12, 32, 0, 12;
		  and 28, 0, 0x1f, 32;
		  shl 14, 32, 0, 11;
		  or 11, 12, 0, 11;
		  mstore 7, 0, 0, 11;
		  add_wrap 7, 0, 4, 7;
		  add_wrap 15, 0, 4, 15;
		  add_wrap 0, 14, 0, 12;
		  branch_if_diff_greater_than 13, 7, 0, ___dot_L100084da;
		  jump ___dot_L10008510, 32;
		___dot_L100084f6:
		  add_wrap 0, 10, 0, 13;
		  branch_if_diff_nonzero 12, 0, ___dot_L1000851a;
		  jump ___dot_L1000852c, 32;
		___dot_L100084fc:
		  to_signed 0, 32;
		  to_signed 5, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10008510;
		  add_wrap 0, 17, 0, 11;
		___dot_L10008502:
		  mload 11, 0, 12, 32;
		  mstore 7, 0, 0, 12;
		  add_wrap 7, 0, 4, 7;
		  add_wrap 11, 0, 4, 11;
		  branch_if_diff_greater_than 13, 7, 0, ___dot_L10008502;
		___dot_L10008510:
		  add_wrap 17, 5, 0, 11;
		  and 16, 0, 3, 12;
		  branch_if_diff_equal 12, 0, 0, ___dot_L1000852c;
		___dot_L1000851a:
		  add_wrap 12, 13, 0, 12;
		___dot_L1000851c:
		  mload 11, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		  add_wrap 13, 0, 1, 13;
		  add_wrap 11, 0, 1, 11;
		  branch_if_diff_greater_than 12, 13, 0, ___dot_L1000851c;
		___dot_L1000852c:
		  jump_dyn 1, 32;
		_ZN17compiler_builtins3mem7memmove17hc21b233a7d5e61a6E:
		  sub_wrap_with_offset 10, 11, 0, 13;
		  branch_if_diff_greater_than 13, 12, -1, ___dot_L100085c0;
		  add_wrap 10, 12, 0, 13;
		  add_wrap 0, 0, 16, 14;
		  add_wrap 11, 12, 0, 16;
		  branch_if_diff_greater_than 14, 12, 0, ___dot_L10008638;
		  and 13, 0, 3, 5;
		  sub_wrap_with_offset 0, 5, 0, 17;
		  and 13, 0, 4294967292, 6;
		  branch_if_diff_equal 5, 0, 0, ___dot_L1000856e;
		  add_wrap 11, 12, 0, 14;
		  add_wrap 14, 0, 4294967295, 14;
		___dot_L1000855a:
		  mload 14, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 7;
		  add_wrap 13, 0, 4294967295, 15;
		  mload 13, 4294967295, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 7, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 4294967295, 32;
		  add_wrap 14, 0, 4294967295, 14;
		  add_wrap 0, 15, 0, 13;
		  branch_if_diff_greater_than 15, 6, 0, ___dot_L1000855a;
		___dot_L1000856e:
		  add_wrap 16, 17, 0, 16;
		  sub_wrap_with_offset 12, 5, 0, 17;
		  and 17, 0, 4294967292, 5;
		  and 16, 0, 3, 12;
		  sub_wrap_with_offset 6, 5, 0, 28;
		  branch_if_diff_equal 12, 0, 0, ___dot_L10008642;
		  to_signed 0, 32;
		  to_signed 5, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L1000865e;
		  wrap16 16, 8, 11;
		  and 11, 0, 24, 7;
		  and 16, 0, 4294967292, 12;
		  mload 12, 0, 14, 32;
		  sub_wrap_with_offset 0, 11, 0, 15;
		  and 15, 0, 24, 29;
		  add_wrap 12, 0, 4294967292, 12;
		  add_wrap 0, 6, 0, 11;
		___dot_L100085a0:
		  mload 12, 0, 13, 32;
		  and 29, 0, 0x1f, 32;
		  shl 14, 32, 0, 14;
		  and 7, 0, 0x1f, 32;
		  shr 13, 32, 0, 15;
		  or 14, 15, 0, 14;
		  add_wrap 11, 0, 4294967292, 15;
		  mstore 11, 0, 4294967292, 14;
		  add_wrap 12, 0, 4294967292, 12;
		  add_wrap 0, 13, 0, 14;
		  add_wrap 0, 15, 0, 11;
		  branch_if_diff_greater_than 15, 28, 0, ___dot_L100085a0;
		  jump ___dot_L1000865e, 32;
		___dot_L100085c0:
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L1000863c;
		  sub_wrap_with_offset 0, 10, 0, 13;
		  and 13, 0, 3, 16;
		  add_wrap 10, 16, 0, 7;
		  branch_if_diff_equal 16, 0, 0, ___dot_L100085ea;
		  add_wrap 0, 11, 0, 15;
		  add_wrap 0, 10, 0, 13;
		___dot_L100085da:
		  mload 15, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		  add_wrap 13, 0, 1, 13;
		  add_wrap 15, 0, 1, 15;
		  branch_if_diff_greater_than 7, 13, 0, ___dot_L100085da;
		___dot_L100085ea:
		  add_wrap 11, 16, 0, 17;
		  sub_wrap_with_offset 12, 16, 0, 16;
		  and 16, 0, 4294967292, 5;
		  and 17, 0, 3, 11;
		  add_wrap 7, 5, 0, 13;
		  branch_if_diff_equal 11, 0, 0, ___dot_L1000868a;
		  to_signed 0, 32;
		  to_signed 5, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L1000869e;
		  wrap16 17, 8, 11;
		  and 11, 0, 24, 6;
		  and 17, 0, 4294967292, 15;
		  mload 15, 0, 12, 32;
		  sub_wrap_with_offset 0, 11, 0, 11;
		  and 11, 0, 24, 28;
		  add_wrap 15, 0, 4, 15;
		___dot_L1000861c:
		  mload 15, 0, 14, 32;
		  and 6, 0, 0x1f, 32;
		  shr 12, 32, 0, 12;
		  and 28, 0, 0x1f, 32;
		  shl 14, 32, 0, 11;
		  or 11, 12, 0, 11;
		  mstore 7, 0, 0, 11;
		  add_wrap 7, 0, 4, 7;
		  add_wrap 15, 0, 4, 15;
		  add_wrap 0, 14, 0, 12;
		  branch_if_diff_greater_than 13, 7, 0, ___dot_L1000861c;
		  jump ___dot_L1000869e, 32;
		___dot_L10008638:
		  add_wrap 0, 10, 0, 11;
		  jump ___dot_L10008672, 32;
		___dot_L1000863c:
		  add_wrap 0, 10, 0, 13;
		  branch_if_diff_nonzero 12, 0, ___dot_L100086a8;
		  jump ___dot_L100086ba, 32;
		___dot_L10008642:
		  to_signed 0, 32;
		  to_signed 5, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L1000865e;
		  add_wrap 11, 17, 0, 11;
		  add_wrap 11, 0, 4294967292, 11;
		  add_wrap 0, 6, 0, 12;
		___dot_L1000864c:
		  mload 11, 0, 13, 32;
		  add_wrap 12, 0, 4294967292, 14;
		  mstore 12, 0, 4294967292, 13;
		  add_wrap 11, 0, 4294967292, 11;
		  add_wrap 0, 14, 0, 12;
		  branch_if_diff_greater_than 14, 28, 0, ___dot_L1000864c;
		___dot_L1000865e:
		  and 17, 0, 3, 11;
		  branch_if_diff_equal 11, 0, 0, ___dot_L100086ba;
		  sub_wrap_with_offset 0, 5, 0, 12;
		  add_wrap 6, 12, 0, 13;
		  add_wrap 16, 12, 0, 16;
		  sub_wrap_with_offset 13, 11, 0, 11;
		___dot_L10008672:
		  add_wrap 16, 0, 4294967295, 16;
		___dot_L10008674:
		  mload 16, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 12;
		  add_wrap 13, 0, 4294967295, 14;
		  mload 13, 4294967295, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 12, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 4294967295, 32;
		  add_wrap 16, 0, 4294967295, 16;
		  add_wrap 0, 14, 0, 13;
		  branch_if_diff_greater_than 14, 11, 0, ___dot_L10008674;
		  jump ___dot_L100086ba, 32;
		___dot_L1000868a:
		  to_signed 0, 32;
		  to_signed 5, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L1000869e;
		  add_wrap 0, 17, 0, 11;
		___dot_L10008690:
		  mload 11, 0, 12, 32;
		  mstore 7, 0, 0, 12;
		  add_wrap 7, 0, 4, 7;
		  add_wrap 11, 0, 4, 11;
		  branch_if_diff_greater_than 13, 7, 0, ___dot_L10008690;
		___dot_L1000869e:
		  add_wrap 17, 5, 0, 11;
		  and 16, 0, 3, 12;
		  branch_if_diff_equal 12, 0, 0, ___dot_L100086ba;
		___dot_L100086a8:
		  add_wrap 12, 13, 0, 12;
		___dot_L100086aa:
		  mload 11, 0, 32, 33;
		  affine 33, 33, 8, 0;
		  shr 32, 33, 0, 32;
		  and 32, 0, 0xff, 14;
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 14, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		  add_wrap 13, 0, 1, 13;
		  add_wrap 11, 0, 1, 11;
		  branch_if_diff_greater_than 12, 13, 0, ___dot_L100086aa;
		___dot_L100086ba:
		  jump_dyn 1, 32;
		memmove:
		  jump _ZN17compiler_builtins3mem7memmove17hc21b233a7d5e61a6E, 32;
		memset:
		  add_wrap 0, 0, 16, 13;
		  branch_if_diff_greater_than 13, 12, 0, ___dot_L1000870e;
		  sub_wrap_with_offset 0, 10, 0, 13;
		  and 13, 0, 3, 13;
		  add_wrap 10, 13, 0, 14;
		  branch_if_diff_equal 13, 0, 0, ___dot_L100086e2;
		  add_wrap 0, 10, 0, 15;
		___dot_L100086d8:
		  mload 15, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 15, 33, 0, 32;
		  add_wrap 15, 0, 1, 15;
		  branch_if_diff_greater_than 14, 15, 0, ___dot_L100086d8;
		___dot_L100086e2:
		  sub_wrap_with_offset 12, 13, 0, 12;
		  and 12, 0, 4294967292, 15;
		  add_wrap 14, 15, 0, 13;
		  to_signed 0, 32;
		  to_signed 15, 33;
		  branch_if_diff_greater_than 32, 33, -1, ___dot_L10008708;
		  and 11, 0, 255, 16;
		  set_reg 15, 16843009;
		  mul 16, 15, 15, 32;
		___dot_L10008700:
		  mstore 14, 0, 0, 15;
		  add_wrap 14, 0, 4, 14;
		  branch_if_diff_greater_than 13, 14, 0, ___dot_L10008700;
		___dot_L10008708:
		  and 12, 0, 3, 12;
		  branch_if_diff_nonzero 12, 0, ___dot_L10008712;
		  jump ___dot_L1000871e, 32;
		___dot_L1000870e:
		  add_wrap 0, 10, 0, 13;
		  branch_if_diff_equal 12, 0, 0, ___dot_L1000871e;
		___dot_L10008712:
		  add_wrap 12, 13, 0, 12;
		___dot_L10008714:
		  mload 13, 0, 32, 33;
		  set_reg 34, 0xff;
		  affine 33, 35, 8, 0;
		  shl 34, 35, 0, 34;
		  xor 34, 0, 0xffffffff, 34;
		  and 32, 34, 0, 32;
		  and 11, 0, 0xff, 34;
		  shl 34, 35, 0, 34;
		  or 32, 34, 0, 32;
		  mstore 13, 33, 0, 32;
		  add_wrap 13, 0, 1, 13;
		  branch_if_diff_greater_than 12, 13, 0, ___dot_L10008714;
		___dot_L1000871e:
		  jump_dyn 1, 32;
		// This is the data initialization routine.
		__data_init:
		set_reg 33, 0x464c457f;
		set_reg 32, 0x10000000;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10101;
		set_reg 32, 0x10000004;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xf30002;
		set_reg 32, 0x10000010;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x10000014;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001d88;
		set_reg 32, 0x10000018;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34;
		set_reg 32, 0x1000001c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xb3940;
		set_reg 32, 0x10000020;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x10000024;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x200034;
		set_reg 32, 0x10000028;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x280006;
		set_reg 32, 0x1000002c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x179017b;
		set_reg 32, 0x10000030;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6;
		set_reg 32, 0x10000034;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34;
		set_reg 32, 0x10000038;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10000034;
		set_reg 32, 0x1000003c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10000034;
		set_reg 32, 0x10000040;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xc0;
		set_reg 32, 0x10000044;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xc0;
		set_reg 32, 0x10000048;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x1000004c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x10000050;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x10000054;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10000000;
		set_reg 32, 0x1000005c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10000000;
		set_reg 32, 0x10000060;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1d88;
		set_reg 32, 0x10000064;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1d88;
		set_reg 32, 0x10000068;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x1000006c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1000;
		set_reg 32, 0x10000070;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x10000074;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1d88;
		set_reg 32, 0x10000078;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001d88;
		set_reg 32, 0x1000007c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001d88;
		set_reg 32, 0x10000080;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6998;
		set_reg 32, 0x10000084;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6998;
		set_reg 32, 0x10000088;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5;
		set_reg 32, 0x1000008c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1000;
		set_reg 32, 0x10000090;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x10000094;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x8720;
		set_reg 32, 0x10000098;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10008720;
		set_reg 32, 0x1000009c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10008720;
		set_reg 32, 0x100000a0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x40000008;
		set_reg 32, 0x100000a8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6;
		set_reg 32, 0x100000ac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1000;
		set_reg 32, 0x100000b0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6474e551;
		set_reg 32, 0x100000b4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6;
		set_reg 32, 0x100000cc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x70000003;
		set_reg 32, 0x100000d4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xcbc3;
		set_reg 32, 0x100000d8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34;
		set_reg 32, 0x100000e4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34;
		set_reg 32, 0x100000e8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x100000ec;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x100000f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f06;
		set_reg 32, 0x10000100;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001ef8;
		set_reg 32, 0x10000104;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f10;
		set_reg 32, 0x10000108;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f1e;
		set_reg 32, 0x1000010c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000110;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000114;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000118;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000011c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000120;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000124;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000128;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000012c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000130;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000134;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000138;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000013c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000140;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000144;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000148;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000014c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000150;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000154;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000158;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000015c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000160;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000164;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000168;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000016c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000170;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000174;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000178;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000017c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f06;
		set_reg 32, 0x10000180;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001ef8;
		set_reg 32, 0x10000184;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f10;
		set_reg 32, 0x10000188;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000200e;
		set_reg 32, 0x1000018c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000190;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000194;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000198;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000019c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001f4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001f8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100001fc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002178;
		set_reg 32, 0x10000200;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002188;
		set_reg 32, 0x10000204;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100021e4;
		set_reg 32, 0x10000208;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100021ba;
		set_reg 32, 0x1000020c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000210;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000214;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000218;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001fc2;
		set_reg 32, 0x1000021c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000220;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000224;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000228;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000022c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000230;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000234;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000238;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000023c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000240;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000244;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000248;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000024c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000250;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000254;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000258;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000025c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000260;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000264;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000268;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000026c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000270;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000274;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000278;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000027c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002102;
		set_reg 32, 0x10000280;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002216;
		set_reg 32, 0x10000284;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001ff2;
		set_reg 32, 0x10000288;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100020dc;
		set_reg 32, 0x1000028c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000290;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000294;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000298;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002078;
		set_reg 32, 0x1000029c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002f4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002f8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100002fc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002112;
		set_reg 32, 0x10000300;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000204a;
		set_reg 32, 0x10000304;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001fa4;
		set_reg 32, 0x10000308;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002246;
		set_reg 32, 0x1000030c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000310;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000314;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000318;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002094;
		set_reg 32, 0x1000031c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000320;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000324;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000328;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000032c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000330;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000334;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000338;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000033c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000340;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000344;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000348;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000034c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000350;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000354;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000358;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000035c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000360;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000364;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000368;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000036c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000370;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000374;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000378;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000037c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100020a4;
		set_reg 32, 0x10000380;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000213e;
		set_reg 32, 0x10000384;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100020cc;
		set_reg 32, 0x10000388;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f2c;
		set_reg 32, 0x1000038c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000390;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000394;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000398;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001fd2;
		set_reg 32, 0x1000039c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003f4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003f8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x100003fc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100021a6;
		set_reg 32, 0x10000400;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002272;
		set_reg 32, 0x10000404;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f94;
		set_reg 32, 0x10000408;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000212e;
		set_reg 32, 0x1000040c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000410;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000414;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000418;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000041c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000420;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000424;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000428;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000042c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000430;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000434;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000438;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000043c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000440;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000444;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000448;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000044c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000450;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000454;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000458;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000045c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000460;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000464;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000468;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x1000046c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001eb4;
		set_reg 32, 0x10000470;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001eb4;
		set_reg 32, 0x10000474;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001eb4;
		set_reg 32, 0x10000478;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001eb4;
		set_reg 32, 0x1000047c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022ba;
		set_reg 32, 0x10000480;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f70;
		set_reg 32, 0x10000484;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f50;
		set_reg 32, 0x10000488;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10001f1e;
		set_reg 32, 0x1000048c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000490;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000494;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100022b0;
		set_reg 32, 0x10000498;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002088;
		set_reg 32, 0x1000049c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100026c4;
		set_reg 32, 0x100004a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002706;
		set_reg 32, 0x100004a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000277c;
		set_reg 32, 0x100004a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000266a;
		set_reg 32, 0x100004ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004f4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004f8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100004fc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000500;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000504;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000508;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000050c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000510;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000514;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000518;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000051c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000262a;
		set_reg 32, 0x10000520;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002646;
		set_reg 32, 0x10000524;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100025a4;
		set_reg 32, 0x10000528;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100025e0;
		set_reg 32, 0x1000052c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000530;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000534;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000538;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000053c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000540;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000544;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000548;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000054c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000550;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000554;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000558;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000055c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000560;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000564;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000568;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000056c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000570;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000574;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000578;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000057c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000580;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000584;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000588;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000058c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000590;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000594;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000598;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000059c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002574;
		set_reg 32, 0x100005a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100025c2;
		set_reg 32, 0x100005a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100026d8;
		set_reg 32, 0x100005a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000269e;
		set_reg 32, 0x100005ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002594;
		set_reg 32, 0x100005bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005f4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005f8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100005fc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000600;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000604;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000608;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000060c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000610;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000614;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000618;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000061c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100027a0;
		set_reg 32, 0x10000620;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100027ba;
		set_reg 32, 0x10000624;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000281c;
		set_reg 32, 0x10000628;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100027e6;
		set_reg 32, 0x1000062c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000630;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000634;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000638;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002564;
		set_reg 32, 0x1000063c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000640;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000644;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000648;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000064c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000650;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000654;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000658;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000065c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000660;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000664;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000668;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000066c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000670;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000674;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000678;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000067c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000680;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000684;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000688;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000068c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000690;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000694;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000698;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000069c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100024fa;
		set_reg 32, 0x100006a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002488;
		set_reg 32, 0x100006a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100024bc;
		set_reg 32, 0x100006a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002498;
		set_reg 32, 0x100006ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002468;
		set_reg 32, 0x100006bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006f4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006f8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100006fc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000700;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000704;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000708;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000070c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000710;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000714;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000718;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000071c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100024fa;
		set_reg 32, 0x10000720;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002488;
		set_reg 32, 0x10000724;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100024bc;
		set_reg 32, 0x10000728;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002498;
		set_reg 32, 0x1000072c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000730;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000734;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000738;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002468;
		set_reg 32, 0x1000073c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000740;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000744;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000748;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000074c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000750;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000754;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000758;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000075c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000760;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000764;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000768;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000076c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000770;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000774;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000778;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000077c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000780;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000784;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000788;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000078c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000790;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000794;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000798;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000079c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002610;
		set_reg 32, 0x100007a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002750;
		set_reg 32, 0x100007a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000261a;
		set_reg 32, 0x100007a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002530;
		set_reg 32, 0x100007ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007f4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007f8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x100007fc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000800;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000804;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000808;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x1000080c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000245a;
		set_reg 32, 0x10000810;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000245a;
		set_reg 32, 0x10000814;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000245a;
		set_reg 32, 0x10000818;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000245a;
		set_reg 32, 0x1000081c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002860;
		set_reg 32, 0x10000820;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000272c;
		set_reg 32, 0x10000824;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002540;
		set_reg 32, 0x10000828;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002522;
		set_reg 32, 0x1000082c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000830;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000834;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002856;
		set_reg 32, 0x10000838;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002588;
		set_reg 32, 0x1000083c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a5c;
		set_reg 32, 0x10000840;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a4e;
		set_reg 32, 0x10000844;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a66;
		set_reg 32, 0x10000848;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a74;
		set_reg 32, 0x1000084c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000850;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000854;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000858;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000085c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000860;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000864;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000868;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000086c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000870;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000874;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000878;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000087c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000880;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000884;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000888;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000088c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000890;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000894;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000898;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000089c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a5c;
		set_reg 32, 0x100008c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a4e;
		set_reg 32, 0x100008c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a66;
		set_reg 32, 0x100008c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002b64;
		set_reg 32, 0x100008cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008f4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008f8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100008fc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000900;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000904;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000908;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000090c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000910;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000914;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000918;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000091c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000920;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000924;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000928;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000092c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000930;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000934;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000938;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000093c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002cce;
		set_reg 32, 0x10000940;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002cde;
		set_reg 32, 0x10000944;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002d3a;
		set_reg 32, 0x10000948;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002d10;
		set_reg 32, 0x1000094c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000950;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000954;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000958;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002b18;
		set_reg 32, 0x1000095c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000960;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000964;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000968;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000096c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000970;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000974;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000978;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000097c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000980;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000984;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000988;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000098c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000990;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000994;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000998;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x1000099c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002c58;
		set_reg 32, 0x100009c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002d6c;
		set_reg 32, 0x100009c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002b48;
		set_reg 32, 0x100009c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002c32;
		set_reg 32, 0x100009cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002bce;
		set_reg 32, 0x100009dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009f4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009f8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x100009fc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a00;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a04;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a08;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a0c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a10;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a14;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a18;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a1c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a20;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a24;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a28;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a2c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a30;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a34;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a38;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a3c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002c68;
		set_reg 32, 0x10000a40;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002ba0;
		set_reg 32, 0x10000a44;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002afa;
		set_reg 32, 0x10000a48;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002d9c;
		set_reg 32, 0x10000a4c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a50;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a54;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a58;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002bea;
		set_reg 32, 0x10000a5c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a60;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a64;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a68;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a6c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a70;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a74;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a78;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a7c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a80;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a84;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a88;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a8c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a90;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a94;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a98;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000a9c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000aa0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000aa4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000aa8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000aac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ab0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ab4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ab8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000abc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002bfa;
		set_reg 32, 0x10000ac0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002c94;
		set_reg 32, 0x10000ac4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002c22;
		set_reg 32, 0x10000ac8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a82;
		set_reg 32, 0x10000acc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ad0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ad4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ad8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002b28;
		set_reg 32, 0x10000adc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ae0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ae4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ae8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000aec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000af0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000af4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000af8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000afc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b00;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b04;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b08;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b0c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b10;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b14;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b18;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b1c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b20;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b24;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b28;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b2c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b30;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b34;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b38;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b3c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002cfc;
		set_reg 32, 0x10000b40;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002dc8;
		set_reg 32, 0x10000b44;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002aea;
		set_reg 32, 0x10000b48;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002c84;
		set_reg 32, 0x10000b4c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b50;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b54;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b58;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b5c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b60;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b64;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b68;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b6c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b70;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b74;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b78;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b7c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b80;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b84;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b88;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b8c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b90;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b94;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b98;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000b9c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ba0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ba4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000ba8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000bac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a0a;
		set_reg 32, 0x10000bb0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a0a;
		set_reg 32, 0x10000bb4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a0a;
		set_reg 32, 0x10000bb8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a0a;
		set_reg 32, 0x10000bbc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e10;
		set_reg 32, 0x10000bc0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002ac6;
		set_reg 32, 0x10000bc4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002aa6;
		set_reg 32, 0x10000bc8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002a74;
		set_reg 32, 0x10000bcc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000bd0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000bd4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002e06;
		set_reg 32, 0x10000bd8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002bde;
		set_reg 32, 0x10000bdc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003170;
		set_reg 32, 0x10000be0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000318e;
		set_reg 32, 0x10000be4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000311c;
		set_reg 32, 0x10000be8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000314a;
		set_reg 32, 0x10000bec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000bf0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000bf4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000bf8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000bfc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c00;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c04;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c08;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c0c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c10;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c14;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c18;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c1c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c20;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c24;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c28;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c2c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c30;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c34;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c38;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c3c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c40;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c44;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c48;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c4c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c50;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c54;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c58;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c5c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100030c6;
		set_reg 32, 0x10000c60;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000313c;
		set_reg 32, 0x10000c64;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000321e;
		set_reg 32, 0x10000c68;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100031c4;
		set_reg 32, 0x10000c6c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c70;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c74;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c78;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c7c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c80;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c84;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c88;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c8c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c90;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c94;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c98;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000c9c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ca0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ca4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ca8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cb0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cb4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cb8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cbc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cc0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cc4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cc8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ccc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cd0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cd4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cd8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cdc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003100;
		set_reg 32, 0x10000ce0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003250;
		set_reg 32, 0x10000ce4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000326e;
		set_reg 32, 0x10000ce8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100032bc;
		set_reg 32, 0x10000cec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cf0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cf4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000cf8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100032ac;
		set_reg 32, 0x10000cfc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d00;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d04;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d08;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d0c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d10;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d14;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d18;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d1c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d20;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d24;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d28;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d2c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d30;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d34;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d38;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d3c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d40;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d44;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d48;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d4c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d50;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d54;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d58;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d5c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100030b6;
		set_reg 32, 0x10000d60;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003200;
		set_reg 32, 0x10000d64;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100032f4;
		set_reg 32, 0x10000d68;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100030da;
		set_reg 32, 0x10000d6c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d70;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d74;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d78;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100031b4;
		set_reg 32, 0x10000d7c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d80;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d84;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d88;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d8c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d90;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d94;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d98;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000d9c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000da0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000da4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000da8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000dac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000db0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000db4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000db8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000dbc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000dc0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000dc4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000dc8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000dcc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000dd0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000dd4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000dd8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ddc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fea;
		set_reg 32, 0x10000de0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fda;
		set_reg 32, 0x10000de4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003036;
		set_reg 32, 0x10000de8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003012;
		set_reg 32, 0x10000dec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000df0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000df4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000df8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fba;
		set_reg 32, 0x10000dfc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e00;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e04;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e08;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e0c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e10;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e14;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e18;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e1c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e20;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e24;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e28;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e2c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e30;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e34;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e38;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e3c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e40;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e44;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e48;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e4c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e50;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e54;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e58;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e5c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fea;
		set_reg 32, 0x10000e60;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fda;
		set_reg 32, 0x10000e64;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003036;
		set_reg 32, 0x10000e68;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003012;
		set_reg 32, 0x10000e6c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e70;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e74;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e78;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fba;
		set_reg 32, 0x10000e7c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e80;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e84;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e88;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e8c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e90;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e94;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e98;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000e9c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ea0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ea4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ea8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000eac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000eb0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000eb4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000eb8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ebc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ec0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ec4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ec8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ecc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ed0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ed4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ed8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000edc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100030d0;
		set_reg 32, 0x10000ee0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000329c;
		set_reg 32, 0x10000ee4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000332e;
		set_reg 32, 0x10000ee8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100030a6;
		set_reg 32, 0x10000eec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ef0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ef4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000ef8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000efc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f00;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f04;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f08;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f0c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f10;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f14;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f18;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f1c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f20;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f24;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f28;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f2c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f30;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f34;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f38;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f3c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f40;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f44;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f48;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f4c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fac;
		set_reg 32, 0x10000f50;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fac;
		set_reg 32, 0x10000f54;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fac;
		set_reg 32, 0x10000f58;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10002fac;
		set_reg 32, 0x10000f5c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003372;
		set_reg 32, 0x10000f60;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000322c;
		set_reg 32, 0x10000f64;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003082;
		set_reg 32, 0x10000f68;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003074;
		set_reg 32, 0x10000f6c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f70;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f74;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003368;
		set_reg 32, 0x10000f78;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10003110;
		set_reg 32, 0x10000f7c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_11_10000f80
		set_reg 33, 0x65746e69;
		set_reg 32, 0x10000f80;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6c616e72;
		set_reg 32, 0x10000f84;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72726520;
		set_reg 32, 0x10000f88;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x203a726f;
		set_reg 32, 0x10000f8c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65746e65;
		set_reg 32, 0x10000f90;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20646572;
		set_reg 32, 0x10000f94;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65726e75;
		set_reg 32, 0x10000f98;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61686361;
		set_reg 32, 0x10000f9c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20656c62;
		set_reg 32, 0x10000fa0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65646f63;
		set_reg 32, 0x10000fa4;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_11_10000fa8
		set_reg 33, 0x1000132a;
		set_reg 32, 0x10000fa8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65;
		set_reg 32, 0x10000fac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x17;
		set_reg 32, 0x10000fb0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5;
		set_reg 32, 0x10000fb4;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_30_10000fb8
		set_reg 33, 0x6d6f682f;
		set_reg 32, 0x10000fb8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61702f65;
		set_reg 32, 0x10000fbc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63656863;
		set_reg 32, 0x10000fc0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x632e2f6f;
		set_reg 32, 0x10000fc4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f677261;
		set_reg 32, 0x10000fc8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6765722f;
		set_reg 32, 0x10000fcc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72747369;
		set_reg 32, 0x10000fd0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72732f79;
		set_reg 32, 0x10000fd4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e692f63;
		set_reg 32, 0x10000fd8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e786564;
		set_reg 32, 0x10000fdc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74617263;
		set_reg 32, 0x10000fe0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x692e7365;
		set_reg 32, 0x10000fe4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x66362d6f;
		set_reg 32, 0x10000fe8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32643731;
		set_reg 32, 0x10000fec;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61626232;
		set_reg 32, 0x10000ff0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30303531;
		set_reg 32, 0x10000ff4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x732f6631;
		set_reg 32, 0x10000ff8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65647265;
		set_reg 32, 0x10000ffc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f62635f;
		set_reg 32, 0x10001000;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e302d72;
		set_reg 32, 0x10001004;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x322e3131;
		set_reg 32, 0x10001008;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6372732f;
		set_reg 32, 0x1000100c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e65642f;
		set_reg 32, 0x10001010;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61637372;
		set_reg 32, 0x10001014;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x69636170;
		set_reg 32, 0x10001018;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f207974;
		set_reg 32, 0x1000101c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x66726576;
		set_reg 32, 0x10001020;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x776f6c;
		set_reg 32, 0x10001024;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_12_10001028
		set_reg 33, 0x10000fb8;
		set_reg 32, 0x10001028;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5e;
		set_reg 32, 0x1000102c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x304;
		set_reg 32, 0x10001030;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x12;
		set_reg 32, 0x10001034;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_12_10001038
		set_reg 33, 0x6d6f682f;
		set_reg 32, 0x10001038;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61702f65;
		set_reg 32, 0x1000103c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63656863;
		set_reg 32, 0x10001040;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x632e2f6f;
		set_reg 32, 0x10001044;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f677261;
		set_reg 32, 0x10001048;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7469672f;
		set_reg 32, 0x1000104c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6568632f;
		set_reg 32, 0x10001050;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x756f6b63;
		set_reg 32, 0x10001054;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x702f7374;
		set_reg 32, 0x10001058;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7264776f;
		set_reg 32, 0x1000105c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6461352d;
		set_reg 32, 0x10001060;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63393636;
		set_reg 32, 0x10001064;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x66363932;
		set_reg 32, 0x10001068;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x37336534;
		set_reg 32, 0x1000106c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x31382f37;
		set_reg 32, 0x10001070;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30303831;
		set_reg 32, 0x10001074;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x69722f31;
		set_reg 32, 0x10001078;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2d766373;
		set_reg 32, 0x1000107c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x746e7572;
		set_reg 32, 0x10001080;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f656d69;
		set_reg 32, 0x10001084;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f637273;
		set_reg 32, 0x10001088;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e746d66;
		set_reg 32, 0x1000108c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7372;
		set_reg 32, 0x10001090;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10;
		set_reg 32, 0x10001098;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x8;
		set_reg 32, 0x1000109c;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN61_$LT$serde_cbor_dot__dot_error_dot__dot_Error$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17he3be38c5f0319ea0E;
		set_reg 32, 0x100010a0;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_1_100010a4
		set_reg 33, 0x1000155c;
		set_reg 32, 0x100010a4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x57;
		set_reg 32, 0x100010a8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2b;
		set_reg 32, 0x100010ac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1f;
		set_reg 32, 0x100010b0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x100010bc;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN75_$LT$powdr_riscv_runtime_dot__dot_fmt_dot__dot_ProverWriter$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17hcaec170a5325097dE;
		set_reg 32, 0x100010c0;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN4core3fmt5Write10write_char17ha956c26b76346f98E;
		set_reg 32, 0x100010c4;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN4core3fmt5Write9write_fmt17hb504e02c1f75331cE;
		set_reg 32, 0x100010c8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x100010d0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x100010d4;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN65_$LT$serde_cbor_dot__dot_error_dot__dot_ErrorCode$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hd412ff65ca6eab1cE;
		set_reg 32, 0x100010d8;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_22
		set_reg 33, 0x6c6c6163;
		set_reg 32, 0x100010dc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x60206465;
		set_reg 32, 0x100010e0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x75736552;
		set_reg 32, 0x100010e4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3a3a746c;
		set_reg 32, 0x100010e8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72776e75;
		set_reg 32, 0x100010ec;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x29287061;
		set_reg 32, 0x100010f0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e6f2060;
		set_reg 32, 0x100010f4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x206e6120;
		set_reg 32, 0x100010f8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72724560;
		set_reg 32, 0x100010fc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61762060;
		set_reg 32, 0x10001100;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f65756c;
		set_reg 32, 0x10001104;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656d6f68;
		set_reg 32, 0x10001108;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6361702f;
		set_reg 32, 0x1000110c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f636568;
		set_reg 32, 0x10001110;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61632e2f;
		set_reg 32, 0x10001114;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f6f6772;
		set_reg 32, 0x10001118;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f746967;
		set_reg 32, 0x1000111c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63656863;
		set_reg 32, 0x10001120;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74756f6b;
		set_reg 32, 0x10001124;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f702f73;
		set_reg 32, 0x10001128;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2d726477;
		set_reg 32, 0x1000112c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36646135;
		set_reg 32, 0x10001130;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32633936;
		set_reg 32, 0x10001134;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34663639;
		set_reg 32, 0x10001138;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x37373365;
		set_reg 32, 0x1000113c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3131382f;
		set_reg 32, 0x10001140;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x31303038;
		set_reg 32, 0x10001144;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7369722f;
		set_reg 32, 0x10001148;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x722d7663;
		set_reg 32, 0x1000114c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x69746e75;
		set_reg 32, 0x10001150;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x732f656d;
		set_reg 32, 0x10001154;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x692f6372;
		set_reg 32, 0x10001158;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73722e6f;
		set_reg 32, 0x1000115c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_28
		set_reg 33, 0x10001107;
		set_reg 32, 0x10001160;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x59;
		set_reg 32, 0x10001164;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3f;
		set_reg 32, 0x10001168;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e;
		set_reg 32, 0x1000116c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x10001174;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x10001178;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hb9ac48a0de395922E;
		set_reg 32, 0x1000117c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_2_10001180
		set_reg 33, 0x1000155c;
		set_reg 32, 0x10001180;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x57;
		set_reg 32, 0x10001184;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x25;
		set_reg 32, 0x10001188;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1f;
		set_reg 32, 0x1000118c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x10001198;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN53_$LT$core_dot__dot_fmt_dot__dot_Error$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17h4aab3db1c6a4d518E_10004c3e;
		set_reg 32, 0x1000119c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x100011a4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x100011a8;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hbd0527e3aa88d65fE;
		set_reg 32, 0x100011ac;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_20
		set_reg 33, 0x6f727245;
		set_reg 32, 0x100011b0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x746e6972;
		set_reg 32, 0x100011b4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72656765;
		set_reg 32, 0x100011b8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20606020;
		set_reg 32, 0x100011bc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x69207361;
		set_reg 32, 0x100011c0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x383231;
		set_reg 32, 0x100011c4;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_21
		set_reg 33, 0x100011b5;
		set_reg 32, 0x100011c8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x9;
		set_reg 32, 0x100011cc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x100011be;
		set_reg 32, 0x100011d0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x9;
		set_reg 32, 0x100011d4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x100011e0;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN53_$LT$core_dot__dot_fmt_dot__dot_Error$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17h4aab3db1c6a4d518E_10004c28;
		set_reg 32, 0x100011e4;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_3_100011e8
		set_reg 33, 0x1000155c;
		set_reg 32, 0x100011e8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x57;
		set_reg 32, 0x100011ec;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x21;
		set_reg 32, 0x100011f0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x13;
		set_reg 32, 0x100011f4;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_3_100011f8
		set_reg 33, 0x6f727245;
		set_reg 32, 0x100011f8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f682f72;
		set_reg 32, 0x100011fc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x702f656d;
		set_reg 32, 0x10001200;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65686361;
		set_reg 32, 0x10001204;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e2f6f63;
		set_reg 32, 0x10001208;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x67726163;
		set_reg 32, 0x1000120c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65722f6f;
		set_reg 32, 0x10001210;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74736967;
		set_reg 32, 0x10001214;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x732f7972;
		set_reg 32, 0x10001218;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x692f6372;
		set_reg 32, 0x1000121c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7865646e;
		set_reg 32, 0x10001220;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6172632e;
		set_reg 32, 0x10001224;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e736574;
		set_reg 32, 0x10001228;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x362d6f69;
		set_reg 32, 0x1000122c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x64373166;
		set_reg 32, 0x10001230;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x62623232;
		set_reg 32, 0x10001234;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30353161;
		set_reg 32, 0x10001238;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f663130;
		set_reg 32, 0x1000123c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x64726573;
		set_reg 32, 0x10001240;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e312d65;
		set_reg 32, 0x10001244;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30322e30;
		set_reg 32, 0x10001248;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72732f37;
		set_reg 32, 0x1000124c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65642f63;
		set_reg 32, 0x10001250;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x646f6d2f;
		set_reg 32, 0x10001254;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73722e;
		set_reg 32, 0x10001258;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_23
		set_reg 33, 0x100011fd;
		set_reg 32, 0x1000125c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5e;
		set_reg 32, 0x10001260;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x562;
		set_reg 32, 0x10001264;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x55;
		set_reg 32, 0x10001268;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x10001270;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x10001274;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN4core3fmt3num52_$LT$impl$u20$core_dot__dot_fmt_dot__dot_Debug$u20$for$u20$usize$GT$3fmt17h3f78c7ff64da6168E;
		set_reg 32, 0x10001278;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_4_1000127c
		set_reg 33, 0x1000155c;
		set_reg 32, 0x1000127c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x57;
		set_reg 32, 0x10001280;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x23;
		set_reg 32, 0x10001284;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x13;
		set_reg 32, 0x10001288;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_4_1000128c
		set_reg 33, 0x6c6c6163;
		set_reg 32, 0x1000128c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x60206465;
		set_reg 32, 0x10001290;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x75736552;
		set_reg 32, 0x10001294;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3a3a746c;
		set_reg 32, 0x10001298;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72776e75;
		set_reg 32, 0x1000129c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x29287061;
		set_reg 32, 0x100012a0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e6f2060;
		set_reg 32, 0x100012a4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x206e6120;
		set_reg 32, 0x100012a8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72724560;
		set_reg 32, 0x100012ac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61762060;
		set_reg 32, 0x100012b0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4565756c;
		set_reg 32, 0x100012b4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x726f7272;
		set_reg 32, 0x100012b8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6c706d49;
		set_reg 32, 0x100012bc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x100012c4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x100012c8;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17ha7548e9c1465f8d9E;
		set_reg 32, 0x100012cc;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_5_100012d0
		set_reg 33, 0x1000155c;
		set_reg 32, 0x100012d0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x57;
		set_reg 32, 0x100012d4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1f;
		set_reg 32, 0x100012d8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x13;
		set_reg 32, 0x100012dc;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_5_100012e0
		set_reg 33, 0x10001038;
		set_reg 32, 0x100012e0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5a;
		set_reg 32, 0x100012e4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xe;
		set_reg 32, 0x100012e8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2c;
		set_reg 32, 0x100012ec;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_17_100012f0
		set_reg 33, 0x38667455;
		set_reg 32, 0x100012f0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f727245;
		set_reg 32, 0x100012f4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x79622072;
		set_reg 32, 0x100012f8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20736574;
		set_reg 32, 0x100012fc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x68746977;
		set_reg 32, 0x10001300;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x696c6120;
		set_reg 32, 0x10001304;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656d6e67;
		set_reg 32, 0x10001308;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7620746e;
		set_reg 32, 0x1000130c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x64696c61;
		set_reg 32, 0x10001310;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5f70755f;
		set_reg 32, 0x10001314;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x66206f74;
		set_reg 32, 0x10001318;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656c6961;
		set_reg 32, 0x1000131c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72726564;
		set_reg 32, 0x10001320;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6c5f726f;
		set_reg 32, 0x10001324;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x682f6e65;
		set_reg 32, 0x10001328;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f656d6f;
		set_reg 32, 0x1000132c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x68636170;
		set_reg 32, 0x10001330;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f6f6365;
		set_reg 32, 0x10001334;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7261632e;
		set_reg 32, 0x10001338;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x672f6f67;
		set_reg 32, 0x1000133c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x632f7469;
		set_reg 32, 0x10001340;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6b636568;
		set_reg 32, 0x10001344;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7374756f;
		set_reg 32, 0x10001348;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x776f702f;
		set_reg 32, 0x1000134c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x352d7264;
		set_reg 32, 0x10001350;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36366461;
		set_reg 32, 0x10001354;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x39326339;
		set_reg 32, 0x10001358;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65346636;
		set_reg 32, 0x1000135c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f373733;
		set_reg 32, 0x10001360;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38313138;
		set_reg 32, 0x10001364;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f313030;
		set_reg 32, 0x10001368;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63736972;
		set_reg 32, 0x1000136c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x75722d76;
		set_reg 32, 0x10001370;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6d69746e;
		set_reg 32, 0x10001374;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72732f65;
		set_reg 32, 0x10001378;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f6e2f63;
		set_reg 32, 0x1000137c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6474735f;
		set_reg 32, 0x10001380;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7075735f;
		set_reg 32, 0x10001384;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74726f70;
		set_reg 32, 0x10001388;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73722e;
		set_reg 32, 0x1000138c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_6_10001390
		load_label 33, _ZN4core3ptr46drop_in_place$LT$alloc_dot__dot_vec_dot__dot_Vec$LT$u8$GT$$GT$17hb4e14f7cbf6efe3aE;
		set_reg 32, 0x10001390;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xc;
		set_reg 32, 0x10001394;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x10001398;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN65_$LT$alloc_dot__dot_vec_dot__dot_Vec$LT$T$C$A$GT$$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17h32265791bbe14784E;
		set_reg 32, 0x1000139c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_6_100013a0
		set_reg 33, 0x1000155c;
		set_reg 32, 0x100013a0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x57;
		set_reg 32, 0x100013a4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x35;
		set_reg 32, 0x100013a8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x23;
		set_reg 32, 0x100013ac;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_6_100013b0
		set_reg 33, 0x7366666f;
		set_reg 32, 0x100013b0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7465;
		set_reg 32, 0x100013b4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xc;
		set_reg 32, 0x100013bc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x100013c0;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN68_$LT$core_dot__dot_fmt_dot__dot_builders_dot__dot_PadAdapter$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17h1ff0145579e8eb8dE;
		set_reg 32, 0x100013c4;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN68_$LT$core_dot__dot_fmt_dot__dot_builders_dot__dot_PadAdapter$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$10write_char17h4307d3afb358f024E;
		set_reg 32, 0x100013c8;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN4core3fmt5Write9write_fmt17hf6b2db250f69dc51E;
		set_reg 32, 0x100013cc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x100013d4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x100013d8;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN42_$LT$$RF$T$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17hc839242aa0fb378cE;
		set_reg 32, 0x100013dc;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_7_100013e0
		set_reg 33, 0x1000155c;
		set_reg 32, 0x100013e0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x57;
		set_reg 32, 0x100013e4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x27;
		set_reg 32, 0x100013e8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x16;
		set_reg 32, 0x100013ec;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_24
		set_reg 33, 0x6d6f7246;
		set_reg 32, 0x100013f0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38667455;
		set_reg 32, 0x100013f4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f727245;
		set_reg 32, 0x100013f8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74796272;
		set_reg 32, 0x100013fc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72657365;
		set_reg 32, 0x10001400;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63726f72;
		set_reg 32, 0x10001404;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5365646f;
		set_reg 32, 0x10001408;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4e656d6f;
		set_reg 32, 0x1000140c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20656e6f;
		set_reg 32, 0x10001410;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f202020;
		set_reg 32, 0x10001414;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656d6f68;
		set_reg 32, 0x10001418;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6361702f;
		set_reg 32, 0x1000141c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f636568;
		set_reg 32, 0x10001420;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61632e2f;
		set_reg 32, 0x10001424;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f6f6772;
		set_reg 32, 0x10001428;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x69676572;
		set_reg 32, 0x1000142c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x79727473;
		set_reg 32, 0x10001430;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6372732f;
		set_reg 32, 0x10001434;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x646e692f;
		set_reg 32, 0x10001438;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x632e7865;
		set_reg 32, 0x1000143c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65746172;
		set_reg 32, 0x10001440;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f692e73;
		set_reg 32, 0x10001444;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3166362d;
		set_reg 32, 0x10001448;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32326437;
		set_reg 32, 0x1000144c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x31616262;
		set_reg 32, 0x10001450;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x31303035;
		set_reg 32, 0x10001454;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65732f66;
		set_reg 32, 0x10001458;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5f656472;
		set_reg 32, 0x1000145c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x726f6263;
		set_reg 32, 0x10001460;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x312e302d;
		set_reg 32, 0x10001464;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f322e31;
		set_reg 32, 0x10001468;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f637273;
		set_reg 32, 0x1000146c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x64616572;
		set_reg 32, 0x10001470;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73722e;
		set_reg 32, 0x10001474;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_10_10001478
		set_reg 33, 0x10001417;
		set_reg 32, 0x10001478;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x60;
		set_reg 32, 0x1000147c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x17d;
		set_reg 32, 0x10001480;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20;
		set_reg 32, 0x10001484;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_10_10001488
		set_reg 33, 0x100016f9;
		set_reg 32, 0x10001488;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x15;
		set_reg 32, 0x1000148c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x100012f9;
		set_reg 32, 0x10001490;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x16;
		set_reg 32, 0x10001494;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1000131a;
		set_reg 32, 0x10001498;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7;
		set_reg 32, 0x1000149c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_13
		set_reg 33, 0x10001417;
		set_reg 32, 0x100014a0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x60;
		set_reg 32, 0x100014a4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x189;
		set_reg 32, 0x100014a8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x28;
		set_reg 32, 0x100014ac;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_14_100014b0
		set_reg 33, 0x10001417;
		set_reg 32, 0x100014b0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x60;
		set_reg 32, 0x100014b4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x189;
		set_reg 32, 0x100014b8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xd;
		set_reg 32, 0x100014bc;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_14_100014c0
		set_reg 33, 0x696e6150;
		set_reg 32, 0x100014c0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x203a63;
		set_reg 32, 0x100014c4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xc;
		set_reg 32, 0x100014cc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x100014d0;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN59_$LT$serde_dot__dot_de_dot__dot_format_dot__dot_Buf$u20$as$u20$core_dot__dot_fmt_dot__dot_Write$GT$9write_str17h518e77b31ae91f28E;
		set_reg 32, 0x100014d4;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN4core3fmt5Write10write_char17h638c1cd609c00e6cE;
		set_reg 32, 0x100014d8;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN4core3fmt5Write9write_fmt17h1a000e29a8298ccbE;
		set_reg 32, 0x100014dc;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_8_100014e0
		set_reg 33, 0x1000155c;
		set_reg 32, 0x100014e0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x57;
		set_reg 32, 0x100014e4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x12;
		set_reg 32, 0x100014e8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x19;
		set_reg 32, 0x100014ec;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_8_100014f0
		set_reg 33, 0x696e6150;
		set_reg 32, 0x100014f0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61682063;
		set_reg 32, 0x100014f4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656c646e;
		set_reg 32, 0x100014f8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61682072;
		set_reg 32, 0x100014fc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61702073;
		set_reg 32, 0x10001500;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6b63696e;
		set_reg 32, 0x10001504;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20216465;
		set_reg 32, 0x10001508;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e696854;
		set_reg 32, 0x1000150c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61207367;
		set_reg 32, 0x10001510;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x76206572;
		set_reg 32, 0x10001514;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20797265;
		set_reg 32, 0x10001518;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65726964;
		set_reg 32, 0x1000151c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x646e6920;
		set_reg 32, 0x10001520;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e646565;
		set_reg 32, 0x10001524;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xa2e2e;
		set_reg 32, 0x10001528;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_8_1000152c
		set_reg 33, 0x10001904;
		set_reg 32, 0x1000152c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61;
		set_reg 32, 0x10001530;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xf;
		set_reg 32, 0x10001534;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20;
		set_reg 32, 0x10001538;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_8_1000153c
		set_reg 33, 0x10001016;
		set_reg 32, 0x1000153c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x11;
		set_reg 32, 0x10001540;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_27
		set_reg 33, 0x1;
		set_reg 32, 0x10001544;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_9_1000154c
		load_label 33, _ZN4core3ptr49drop_in_place$LT$alloc_dot__dot_string_dot__dot_FromUtf8Error$GT$17h058822baa58a376fE;
		set_reg 32, 0x1000154c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x14;
		set_reg 32, 0x10001550;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x10001554;
		mstore 32, 0, 0, 33;
		load_label 33, _ZN65_$LT$alloc_dot__dot_string_dot__dot_FromUtf8Error$u20$as$u20$core_dot__dot_fmt_dot__dot_Debug$GT$3fmt17ha97fac1952d45796E;
		set_reg 32, 0x10001558;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_9_1000155c
		set_reg 33, 0x6d6f682f;
		set_reg 32, 0x1000155c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61702f65;
		set_reg 32, 0x10001560;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63656863;
		set_reg 32, 0x10001564;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f702f6f;
		set_reg 32, 0x10001568;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72656477;
		set_reg 32, 0x1000156c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7362616c;
		set_reg 32, 0x10001570;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e65622f;
		set_reg 32, 0x10001574;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x616d6863;
		set_reg 32, 0x10001578;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f736b72;
		set_reg 32, 0x1000157c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x64776f70;
		set_reg 32, 0x10001580;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72622d72;
		set_reg 32, 0x10001584;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x666e6961;
		set_reg 32, 0x10001588;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f6b6375;
		set_reg 32, 0x1000158c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x69617262;
		set_reg 32, 0x10001590;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6375666e;
		set_reg 32, 0x10001594;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73722d6b;
		set_reg 32, 0x10001598;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x746e692f;
		set_reg 32, 0x1000159c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72707265;
		set_reg 32, 0x100015a0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72657465;
		set_reg 32, 0x100015a4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6372732f;
		set_reg 32, 0x100015a8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x62696c2f;
		set_reg 32, 0x100015ac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73722e;
		set_reg 32, 0x100015b0;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_9_100015b4
		set_reg 33, 0x100014c0;
		set_reg 32, 0x100015b4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7;
		set_reg 32, 0x100015b8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x100016f8;
		set_reg 32, 0x100015bc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x100015c0;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_9_100015c4
		set_reg 33, 0x10001904;
		set_reg 32, 0x100015c4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61;
		set_reg 32, 0x100015c8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x19;
		set_reg 32, 0x100015cc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x17;
		set_reg 32, 0x100015d0;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_9_100015d4
		set_reg 33, 0x10001717;
		set_reg 32, 0x100015d4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7e;
		set_reg 32, 0x100015d8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x18;
		set_reg 32, 0x100015dc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5;
		set_reg 32, 0x100015e0;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_36
		set_reg 33, 0x2f637273;
		set_reg 32, 0x100015e4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e69616d;
		set_reg 32, 0x100015e8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73722e;
		set_reg 32, 0x100015ec;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_29
		set_reg 33, 0x100015e4;
		set_reg 32, 0x100015f0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xb;
		set_reg 32, 0x100015f4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x11;
		set_reg 32, 0x100015f8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2c;
		set_reg 32, 0x100015fc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10;
		set_reg 32, 0x10001600;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x527a01;
		set_reg 32, 0x10001608;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1017c01;
		set_reg 32, 0x1000160c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20c1b;
		set_reg 32, 0x10001610;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10;
		set_reg 32, 0x10001614;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x18;
		set_reg 32, 0x10001618;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3e10;
		set_reg 32, 0x1000161c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x8;
		set_reg 32, 0x10001620;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000568e;
		set_reg 32, 0x1000162c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100056aa;
		set_reg 32, 0x10001630;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005742;
		set_reg 32, 0x10001634;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005762;
		set_reg 32, 0x10001638;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x1000163c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001640;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001644;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001648;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x1000164c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001650;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001654;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001658;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x1000165c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001660;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001664;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001668;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x1000166c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100057b4;
		set_reg 32, 0x10001670;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001674;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005660;
		set_reg 32, 0x10001678;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x1000167c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001680;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001684;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001688;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x1000168c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001690;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001694;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x10001698;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x1000169c;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016a0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016a4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016a8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016ac;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016b0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016b4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016b8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016bc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016c0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016c4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016c8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016cc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016d0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016d4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016d8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016dc;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016e0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016e4;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016e8;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L100056e4;
		set_reg 32, 0x100016ec;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L10005662;
		set_reg 32, 0x100016f0;
		mstore 32, 0, 0, 33;
		load_label 33, ___dot_L1000572e;
		set_reg 32, 0x100016f4;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_15_100016f8
		set_reg 33, 0x6d656d0a;
		set_reg 32, 0x100016f8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2079726f;
		set_reg 32, 0x100016fc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f6c6c61;
		set_reg 32, 0x10001700;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x69746163;
		set_reg 32, 0x10001704;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f206e6f;
		set_reg 32, 0x10001708;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x654d2066;
		set_reg 32, 0x1000170c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x67617373;
		set_reg 32, 0x10001710;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f6f4965;
		set_reg 32, 0x10001714;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656d6f68;
		set_reg 32, 0x10001718;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6361702f;
		set_reg 32, 0x1000171c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f636568;
		set_reg 32, 0x10001720;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x75722e2f;
		set_reg 32, 0x10001724;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x70757473;
		set_reg 32, 0x10001728;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f6f742f;
		set_reg 32, 0x1000172c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6168636c;
		set_reg 32, 0x10001730;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f736e69;
		set_reg 32, 0x10001734;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6867696e;
		set_reg 32, 0x10001738;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2d796c74;
		set_reg 32, 0x1000173c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34323032;
		set_reg 32, 0x10001740;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2d38302d;
		set_reg 32, 0x10001744;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x782d3130;
		set_reg 32, 0x10001748;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x365f3638;
		set_reg 32, 0x1000174c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e752d34;
		set_reg 32, 0x10001750;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x776f6e6b;
		set_reg 32, 0x10001754;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x696c2d6e;
		set_reg 32, 0x10001758;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2d78756e;
		set_reg 32, 0x1000175c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f756e67;
		set_reg 32, 0x10001760;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f62696c;
		set_reg 32, 0x10001764;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74737572;
		set_reg 32, 0x10001768;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f62696c;
		set_reg 32, 0x1000176c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f637273;
		set_reg 32, 0x10001770;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74737572;
		set_reg 32, 0x10001774;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x62696c2f;
		set_reg 32, 0x10001778;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x79726172;
		set_reg 32, 0x1000177c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6c6c612f;
		set_reg 32, 0x10001780;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x732f636f;
		set_reg 32, 0x10001784;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x722f6372;
		set_reg 32, 0x10001788;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x765f7761;
		set_reg 32, 0x1000178c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x722e6365;
		set_reg 32, 0x10001790;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72635373;
		set_reg 32, 0x10001794;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x68637461;
		set_reg 32, 0x10001798;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x536f6f54;
		set_reg 32, 0x1000179c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6c6c616d;
		set_reg 32, 0x100017a0;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_41
		set_reg 33, 0x57666f45;
		set_reg 32, 0x100017a4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656c6968;
		set_reg 32, 0x100017a8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73726150;
		set_reg 32, 0x100017ac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x56676e69;
		set_reg 32, 0x100017b0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65756c61;
		set_reg 32, 0x100017b4;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_42
		set_reg 33, 0x57666f45;
		set_reg 32, 0x100017b8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656c6968;
		set_reg 32, 0x100017bc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73726150;
		set_reg 32, 0x100017c0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x41676e69;
		set_reg 32, 0x100017c4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x79617272;
		set_reg 32, 0x100017c8;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_43
		set_reg 33, 0x57666f45;
		set_reg 32, 0x100017cc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656c6968;
		set_reg 32, 0x100017d0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73726150;
		set_reg 32, 0x100017d4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4d676e69;
		set_reg 32, 0x100017d8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7061;
		set_reg 32, 0x100017dc;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_456
		set_reg 33, 0x676e6172;
		set_reg 32, 0x100017e0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e652065;
		set_reg 32, 0x100017e4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e692064;
		set_reg 32, 0x100017e8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20786564;
		set_reg 32, 0x100017ec;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_44
		set_reg 33, 0x676e654c;
		set_reg 32, 0x100017f0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x754f6874;
		set_reg 32, 0x100017f4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x52664f74;
		set_reg 32, 0x100017f8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65676e61;
		set_reg 32, 0x100017fc;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_45
		set_reg 33, 0x61766e49;
		set_reg 32, 0x10001800;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5564696c;
		set_reg 32, 0x10001804;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x55386674;
		set_reg 32, 0x10001808;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7373616e;
		set_reg 32, 0x1000180c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656e6769;
		set_reg 32, 0x10001810;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x646f4364;
		set_reg 32, 0x10001814;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656e5565;
		set_reg 32, 0x10001818;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63657078;
		set_reg 32, 0x1000181c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x43646574;
		set_reg 32, 0x10001820;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5465646f;
		set_reg 32, 0x10001824;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6c696172;
		set_reg 32, 0x10001828;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x44676e69;
		set_reg 32, 0x1000182c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x41617461;
		set_reg 32, 0x10001830;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x79617272;
		set_reg 32, 0x10001834;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x536f6f54;
		set_reg 32, 0x10001838;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74726f68;
		set_reg 32, 0x1000183c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_50
		set_reg 33, 0x61727241;
		set_reg 32, 0x10001840;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f6f5479;
		set_reg 32, 0x10001844;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x676e6f4c;
		set_reg 32, 0x10001848;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_51
		set_reg 33, 0x75636552;
		set_reg 32, 0x1000184c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f697372;
		set_reg 32, 0x10001850;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6d694c6e;
		set_reg 32, 0x10001854;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x78457469;
		set_reg 32, 0x10001858;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x64656563;
		set_reg 32, 0x1000185c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72576465;
		set_reg 32, 0x10001860;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x45676e6f;
		set_reg 32, 0x10001864;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x466d756e;
		set_reg 32, 0x10001868;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x616d726f;
		set_reg 32, 0x1000186c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f725774;
		set_reg 32, 0x10001870;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7453676e;
		set_reg 32, 0x10001874;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74637572;
		set_reg 32, 0x10001878;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6d726f46;
		set_reg 32, 0x1000187c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7461;
		set_reg 32, 0x10001880;
		mstore 32, 0, 0, 33;
		 // data .Lswitch.table._ZN65_$LT$serde_cbor..error..ErrorCode$u20$as$u20$core..fmt..Debug$GT$3fmt17hd412ff65ca6eab1cE
		set_reg 33, 0x7;
		set_reg 32, 0x10001884;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2;
		set_reg 32, 0x10001888;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xf;
		set_reg 32, 0x1000188c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x14;
		set_reg 32, 0x10001890;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x14;
		set_reg 32, 0x10001894;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x12;
		set_reg 32, 0x10001898;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10;
		set_reg 32, 0x1000189c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xb;
		set_reg 32, 0x100018a0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xe;
		set_reg 32, 0x100018a4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xe;
		set_reg 32, 0x100018a8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xc;
		set_reg 32, 0x100018ac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xd;
		set_reg 32, 0x100018b0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xc;
		set_reg 32, 0x100018b4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x16;
		set_reg 32, 0x100018b8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xf;
		set_reg 32, 0x100018bc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x11;
		set_reg 32, 0x100018c0;
		mstore 32, 0, 0, 33;
		 // data .Lswitch.table._ZN65_$LT$serde_cbor..error..ErrorCode$u20$as$u20$core..fmt..Debug$GT$3fmt17hd412ff65ca6eab1cE.9
		set_reg 33, 0x1000170e;
		set_reg 32, 0x100018c4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001715;
		set_reg 32, 0x100018c8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001795;
		set_reg 32, 0x100018cc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x100017a4;
		set_reg 32, 0x100018d0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x100017b8;
		set_reg 32, 0x100018d4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x100017cc;
		set_reg 32, 0x100018d8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x100017f0;
		set_reg 32, 0x100018dc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001800;
		set_reg 32, 0x100018e0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1000180b;
		set_reg 32, 0x100018e4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001819;
		set_reg 32, 0x100018e8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001827;
		set_reg 32, 0x100018ec;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001833;
		set_reg 32, 0x100018f0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001840;
		set_reg 32, 0x100018f4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1000184c;
		set_reg 32, 0x100018f8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001862;
		set_reg 32, 0x100018fc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001871;
		set_reg 32, 0x10001900;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_94
		set_reg 33, 0x6d6f682f;
		set_reg 32, 0x10001904;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61702f65;
		set_reg 32, 0x10001908;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63656863;
		set_reg 32, 0x1000190c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x632e2f6f;
		set_reg 32, 0x10001910;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f677261;
		set_reg 32, 0x10001914;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6765722f;
		set_reg 32, 0x10001918;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72747369;
		set_reg 32, 0x1000191c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72732f79;
		set_reg 32, 0x10001920;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e692f63;
		set_reg 32, 0x10001924;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2e786564;
		set_reg 32, 0x10001928;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74617263;
		set_reg 32, 0x1000192c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x692e7365;
		set_reg 32, 0x10001930;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x66362d6f;
		set_reg 32, 0x10001934;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32643731;
		set_reg 32, 0x10001938;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61626232;
		set_reg 32, 0x1000193c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30303531;
		set_reg 32, 0x10001940;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x732f6631;
		set_reg 32, 0x10001944;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65647265;
		set_reg 32, 0x10001948;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x302e312d;
		set_reg 32, 0x1000194c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3730322e;
		set_reg 32, 0x10001950;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6372732f;
		set_reg 32, 0x10001954;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f65642f;
		set_reg 32, 0x10001958;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6d726f66;
		set_reg 32, 0x1000195c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x722e7461;
		set_reg 32, 0x10001960;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x646e6973;
		set_reg 32, 0x10001964;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f207865;
		set_reg 32, 0x10001968;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f207475;
		set_reg 32, 0x1000196c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f622066;
		set_reg 32, 0x10001970;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73646e75;
		set_reg 32, 0x10001974;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6874203a;
		set_reg 32, 0x10001978;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656c2065;
		set_reg 32, 0x1000197c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7369206e;
		set_reg 32, 0x10001980;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5b3a2920;
		set_reg 32, 0x10001984;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_190
		set_reg 33, 0x6c6c6163;
		set_reg 32, 0x10001988;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x60206465;
		set_reg 32, 0x1000198c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6974704f;
		set_reg 32, 0x10001990;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3a3a6e6f;
		set_reg 32, 0x10001994;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72776e75;
		set_reg 32, 0x10001998;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x29287061;
		set_reg 32, 0x1000199c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e6f2060;
		set_reg 32, 0x100019a0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x60206120;
		set_reg 32, 0x100019a4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656e6f4e;
		set_reg 32, 0x100019a8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61762060;
		set_reg 32, 0x100019ac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65756c;
		set_reg 32, 0x100019b0;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_191
		set_reg 33, 0x1;
		set_reg 32, 0x100019b4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001986;
		set_reg 32, 0x100019bc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x100019c0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001986;
		set_reg 32, 0x100019c4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x100019c8;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_192
		set_reg 33, 0x696e6170;
		set_reg 32, 0x100019cc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x64656b63;
		set_reg 32, 0x100019d0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20746120;
		set_reg 32, 0x100019d4;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_193
		set_reg 33, 0x62200a3a;
		set_reg 32, 0x100019d8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74207475;
		set_reg 32, 0x100019dc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x69206568;
		set_reg 32, 0x100019e0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7865646e;
		set_reg 32, 0x100019e4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20736920;
		set_reg 32, 0x100019e8;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_197
		set_reg 33, 0x10001965;
		set_reg 32, 0x100019ec;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20;
		set_reg 32, 0x100019f0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x100019da;
		set_reg 32, 0x100019f4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x12;
		set_reg 32, 0x100019f8;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_215
		set_reg 33, 0x203a;
		set_reg 32, 0x100019fc;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_209
		set_reg 33, 0x1;
		set_reg 32, 0x10001a00;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x100019fc;
		set_reg 32, 0x10001a08;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2;
		set_reg 32, 0x10001a0c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_213
		set_reg 33, 0x2c207b20;
		set_reg 32, 0x10001a10;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xa7b2020;
		set_reg 32, 0x10001a14;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_216
		set_reg 33, 0x207d0a2c;
		set_reg 32, 0x10001a18;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xa28287d;
		set_reg 32, 0x10001a1c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_222
		set_reg 33, 0x2f5d0a2c;
		set_reg 32, 0x10001a20;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x656d6f68;
		set_reg 32, 0x10001a24;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6361702f;
		set_reg 32, 0x10001a28;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f636568;
		set_reg 32, 0x10001a2c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x75722e2f;
		set_reg 32, 0x10001a30;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x70757473;
		set_reg 32, 0x10001a34;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f6f742f;
		set_reg 32, 0x10001a38;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6168636c;
		set_reg 32, 0x10001a3c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f736e69;
		set_reg 32, 0x10001a40;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6867696e;
		set_reg 32, 0x10001a44;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2d796c74;
		set_reg 32, 0x10001a48;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34323032;
		set_reg 32, 0x10001a4c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2d38302d;
		set_reg 32, 0x10001a50;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x782d3130;
		set_reg 32, 0x10001a54;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x365f3638;
		set_reg 32, 0x10001a58;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e752d34;
		set_reg 32, 0x10001a5c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x776f6e6b;
		set_reg 32, 0x10001a60;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x696c2d6e;
		set_reg 32, 0x10001a64;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2d78756e;
		set_reg 32, 0x10001a68;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f756e67;
		set_reg 32, 0x10001a6c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f62696c;
		set_reg 32, 0x10001a70;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74737572;
		set_reg 32, 0x10001a74;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f62696c;
		set_reg 32, 0x10001a78;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2f637273;
		set_reg 32, 0x10001a7c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74737572;
		set_reg 32, 0x10001a80;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x62696c2f;
		set_reg 32, 0x10001a84;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x79726172;
		set_reg 32, 0x10001a88;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x726f632f;
		set_reg 32, 0x10001a8c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72732f65;
		set_reg 32, 0x10001a90;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6d662f63;
		set_reg 32, 0x10001a94;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x756e2f74;
		set_reg 32, 0x10001a98;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73722e6d;
		set_reg 32, 0x10001a9c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_258
		set_reg 33, 0x10001a23;
		set_reg 32, 0x10001aa0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7d;
		set_reg 32, 0x10001aa4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x66;
		set_reg 32, 0x10001aa8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x17;
		set_reg 32, 0x10001aac;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_257
		set_reg 33, 0x30307830;
		set_reg 32, 0x10001ab0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32303130;
		set_reg 32, 0x10001ab4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34303330;
		set_reg 32, 0x10001ab8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36303530;
		set_reg 32, 0x10001abc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38303730;
		set_reg 32, 0x10001ac0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30313930;
		set_reg 32, 0x10001ac4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32313131;
		set_reg 32, 0x10001ac8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34313331;
		set_reg 32, 0x10001acc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36313531;
		set_reg 32, 0x10001ad0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38313731;
		set_reg 32, 0x10001ad4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30323931;
		set_reg 32, 0x10001ad8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32323132;
		set_reg 32, 0x10001adc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34323332;
		set_reg 32, 0x10001ae0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36323532;
		set_reg 32, 0x10001ae4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38323732;
		set_reg 32, 0x10001ae8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30333932;
		set_reg 32, 0x10001aec;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32333133;
		set_reg 32, 0x10001af0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34333333;
		set_reg 32, 0x10001af4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36333533;
		set_reg 32, 0x10001af8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38333733;
		set_reg 32, 0x10001afc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30343933;
		set_reg 32, 0x10001b00;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32343134;
		set_reg 32, 0x10001b04;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34343334;
		set_reg 32, 0x10001b08;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36343534;
		set_reg 32, 0x10001b0c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38343734;
		set_reg 32, 0x10001b10;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30353934;
		set_reg 32, 0x10001b14;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32353135;
		set_reg 32, 0x10001b18;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34353335;
		set_reg 32, 0x10001b1c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36353535;
		set_reg 32, 0x10001b20;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38353735;
		set_reg 32, 0x10001b24;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30363935;
		set_reg 32, 0x10001b28;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32363136;
		set_reg 32, 0x10001b2c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34363336;
		set_reg 32, 0x10001b30;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36363536;
		set_reg 32, 0x10001b34;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38363736;
		set_reg 32, 0x10001b38;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30373936;
		set_reg 32, 0x10001b3c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32373137;
		set_reg 32, 0x10001b40;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34373337;
		set_reg 32, 0x10001b44;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36373537;
		set_reg 32, 0x10001b48;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38373737;
		set_reg 32, 0x10001b4c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30383937;
		set_reg 32, 0x10001b50;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32383138;
		set_reg 32, 0x10001b54;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34383338;
		set_reg 32, 0x10001b58;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36383538;
		set_reg 32, 0x10001b5c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38383738;
		set_reg 32, 0x10001b60;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x30393938;
		set_reg 32, 0x10001b64;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x32393139;
		set_reg 32, 0x10001b68;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x34393339;
		set_reg 32, 0x10001b6c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x36393539;
		set_reg 32, 0x10001b70;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x38393739;
		set_reg 32, 0x10001b74;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73613939;
		set_reg 32, 0x10001b78;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74726573;
		set_reg 32, 0x10001b7c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x206e6f69;
		set_reg 32, 0x10001b80;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6c696166;
		set_reg 32, 0x10001b84;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x203a6465;
		set_reg 32, 0x10001b88;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7275632a;
		set_reg 32, 0x10001b8c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x203e2072;
		set_reg 32, 0x10001b90;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3931;
		set_reg 32, 0x10001b94;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_250
		set_reg 33, 0x10001a23;
		set_reg 32, 0x10001b98;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x7d;
		set_reg 32, 0x10001b9c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20d;
		set_reg 32, 0x10001ba0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x5;
		set_reg 32, 0x10001ba4;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_454
		set_reg 33, 0x676e6172;
		set_reg 32, 0x10001ba8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x74732065;
		set_reg 32, 0x10001bac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20747261;
		set_reg 32, 0x10001bb0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65646e69;
		set_reg 32, 0x10001bb4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f202078;
		set_reg 32, 0x10001bb8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f207475;
		set_reg 32, 0x10001bbc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61722066;
		set_reg 32, 0x10001bc0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2065676e;
		set_reg 32, 0x10001bc4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20726f66;
		set_reg 32, 0x10001bc8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x63696c73;
		set_reg 32, 0x10001bcc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x666f2065;
		set_reg 32, 0x10001bd0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e656c20;
		set_reg 32, 0x10001bd4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20687467;
		set_reg 32, 0x10001bd8;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_264
		set_reg 33, 0x10001ba8;
		set_reg 32, 0x10001bdc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x12;
		set_reg 32, 0x10001be0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001bba;
		set_reg 32, 0x10001be4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x22;
		set_reg 32, 0x10001be8;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_265
		set_reg 33, 0x100017e0;
		set_reg 32, 0x10001bec;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10;
		set_reg 32, 0x10001bf0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001bba;
		set_reg 32, 0x10001bf4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x22;
		set_reg 32, 0x10001bf8;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_457
		set_reg 33, 0x63696c73;
		set_reg 32, 0x10001bfc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e692065;
		set_reg 32, 0x10001c00;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20786564;
		set_reg 32, 0x10001c04;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x72617473;
		set_reg 32, 0x10001c08;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x61207374;
		set_reg 32, 0x10001c0c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x62202074;
		set_reg 32, 0x10001c10;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65207475;
		set_reg 32, 0x10001c14;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2073646e;
		set_reg 32, 0x10001c18;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x207461;
		set_reg 32, 0x10001c1c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_266
		set_reg 33, 0x10001bfc;
		set_reg 32, 0x10001c20;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x16;
		set_reg 32, 0x10001c24;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001c12;
		set_reg 32, 0x10001c28;
		mstore 32, 0, 0, 33;
		set_reg 33, 0xd;
		set_reg 32, 0x10001c2c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_462
		set_reg 33, 0x72756f73;
		set_reg 32, 0x10001c30;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x73206563;
		set_reg 32, 0x10001c34;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6563696c;
		set_reg 32, 0x10001c38;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e656c20;
		set_reg 32, 0x10001c3c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20687467;
		set_reg 32, 0x10001c40;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x64202928;
		set_reg 32, 0x10001c44;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2073656f;
		set_reg 32, 0x10001c48;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20746f6e;
		set_reg 32, 0x10001c4c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6374616d;
		set_reg 32, 0x10001c50;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x65642068;
		set_reg 32, 0x10001c54;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6e697473;
		set_reg 32, 0x10001c58;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6f697461;
		set_reg 32, 0x10001c5c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x6c73206e;
		set_reg 32, 0x10001c60;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x20656369;
		set_reg 32, 0x10001c64;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x676e656c;
		set_reg 32, 0x10001c68;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x28206874;
		set_reg 32, 0x10001c6c;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_271
		set_reg 33, 0x10001c30;
		set_reg 32, 0x10001c70;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x15;
		set_reg 32, 0x10001c74;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001c45;
		set_reg 32, 0x10001c78;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2b;
		set_reg 32, 0x10001c7c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x10001985;
		set_reg 32, 0x10001c80;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1;
		set_reg 32, 0x10001c84;
		mstore 32, 0, 0, 33;
		 // data .L__unnamed_272
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001c88;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001c8c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001c90;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001c94;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001c98;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001c9c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001ca0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001ca4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001ca8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cac;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cb0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cb4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cb8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cbc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cc0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cc4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cc8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001ccc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cd0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cd4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cd8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cdc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001ce0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001ce4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001ce8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cec;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cf0;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cf4;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cf8;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001cfc;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001d00;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x1010101;
		set_reg 32, 0x10001d04;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2020000;
		set_reg 32, 0x10001d48;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2020202;
		set_reg 32, 0x10001d4c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2020202;
		set_reg 32, 0x10001d50;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2020202;
		set_reg 32, 0x10001d54;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2020202;
		set_reg 32, 0x10001d58;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2020202;
		set_reg 32, 0x10001d5c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2020202;
		set_reg 32, 0x10001d60;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x2020202;
		set_reg 32, 0x10001d64;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3030303;
		set_reg 32, 0x10001d68;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3030303;
		set_reg 32, 0x10001d6c;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3030303;
		set_reg 32, 0x10001d70;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x3030303;
		set_reg 32, 0x10001d74;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4040404;
		set_reg 32, 0x10001d78;
		mstore 32, 0, 0, 33;
		set_reg 33, 0x4;
		set_reg 32, 0x10001d7c;
		mstore 32, 0, 0, 33;
		// This is the end of the data initialization routine.
		jump_dyn 1, 32;
		// ecall handler
		__ecall_handler:
		branch_if_diff_equal 5, 0, 0, __ecall_handler_input;
		branch_if_diff_equal 5, 0, 1, __ecall_handler_data_identifier;
		branch_if_diff_equal 5, 0, 2, __ecall_handler_output;
		branch_if_diff_equal 5, 0, 9, __ecall_handler_halt;
		__invalid_syscall:
		fail;
		__ecall_handler_input:
		query_arg_1 <== get_reg(10);
		set_reg 10, ${ std::prover::Query::Input(std::convert::int(std::prover::eval(query_arg_1))) };
		jump_dyn 1, 32;
		__ecall_handler_data_identifier:
		query_arg_1 <== get_reg(10);
		query_arg_2 <== get_reg(11);
		set_reg 10, ${ std::prover::Query::DataIdentifier(std::convert::int(std::prover::eval(query_arg_2)), std::convert::int(std::prover::eval(query_arg_1))) };
		jump_dyn 1, 32;
		__ecall_handler_output:
		query_arg_1 <== get_reg(10);
		query_arg_2 <== get_reg(11);
		set_reg 0, ${ std::prover::Query::Output(std::convert::int(std::prover::eval(query_arg_1)), std::convert::int(std::prover::eval(query_arg_2))) };
		jump_dyn 1, 32;
		__ecall_handler_halt:
		return;
		jump_dyn 1, 32;
		// end of ecall handler
    }
}    
